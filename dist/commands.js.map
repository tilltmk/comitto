{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://comitto/webpack/runtime/chunk loaded","webpack://comitto/webpack/runtime/startup chunk dependencies","webpack://comitto/webpack/runtime/require chunk loading","webpack://comitto/external node-commonjs \"os\"","webpack://comitto/external commonjs \"vscode\"","webpack://comitto/./commands.js","webpack://comitto/external node-commonjs \"tty\"","webpack://comitto/external node-commonjs \"stream\"","webpack://comitto/external node-commonjs \"assert\"","webpack://comitto/external node-commonjs \"zlib\"","webpack://comitto/external node-commonjs \"events\"","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/external node-commonjs \"https\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/external node-commonjs \"crypto\"","webpack://comitto/external node-commonjs \"url\"","webpack://comitto/external node-commonjs \"http\"","webpack://comitto/external node-commonjs \"util\"","webpack://comitto/external node-commonjs \"fs\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/runtime/ensure chunk","webpack://comitto/webpack/runtime/get javascript chunk filename","webpack://comitto/webpack/runtime/hasOwnProperty shorthand","webpack://comitto/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t__webpack_require__.e(121);\n\t__webpack_require__.e(730);\n\treturn next();\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t217: 1\n};\n\n__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\t__webpack_require__.O();\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","module.exports = require(\"os\");","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst ui = require('./ui'); // Importiere UI-Modul für Hilfsfunktionen\nconst { executeGitCommand } = require('./utils'); // Annahme: executeGitCommand ist in utils.js\n\n/**\n * Registriert die Befehle für die UI-Interaktionen\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers UI-Provider-Instanzen\n * @param {vscode.StatusBarItem} statusBarItem Das Statusleisten-Element\n * @param {Function} setupFileWatcher Funktion zum Einrichten des File Watchers\n * @param {Function} disableFileWatcher Funktion zum Deaktivieren des File Watchers\n * @param {Function} performAutoCommit Funktion zum Ausführen des Commits\n * @param {Function} showNotification Funktion zum Anzeigen von Benachrichtigungen\n */\nfunction registerCommands(context, providers, statusBarItem, setupFileWatcher, disableFileWatcher, performAutoCommit, showNotification) {\n    // #region Kernbefehle (vorher in extension.js)\n\n    // Befehl zum Öffnen der Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.openSettings', () => {\n        vscode.commands.executeCommand('workbench.action.openSettings', 'comitto');\n    }));\n\n    // Befehl zum Aktualisieren der Einstellungsansicht\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.refreshSettings', () => {\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        showNotification('Comitto-Einstellungen wurden aktualisiert.', 'info');\n    }));\n\n    // Befehl zum Aktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.enableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', true, vscode.ConfigurationTarget.Global);\n        setupFileWatcher(context); // Übergabe des Kontexts ist hier wichtig\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind aktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Deaktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.disableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', false, vscode.ConfigurationTarget.Global);\n        disableFileWatcher();\n        statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind deaktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Umschalten der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoCommit', async () => {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const isEnabled = !config.get('autoCommitEnabled');\n        // Rufe die spezifischen enable/disable Befehle auf, um die Logik nicht zu duplizieren\n        if (isEnabled) {\n            await vscode.commands.executeCommand('comitto.enableAutoCommit');\n        } else {\n            await vscode.commands.executeCommand('comitto.disableAutoCommit');\n        }\n    }));\n\n    // Befehl zum manuellen Ausführen eines KI-generierten Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.performManualCommit', async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            const uiSettings = config.get('uiSettings');\n            \n            // Optional Bestätigung anfordern\n            let shouldProceed = true;\n            if (uiSettings && uiSettings.confirmBeforeCommit) {\n                shouldProceed = await vscode.window.showInformationMessage(\n                    'Möchten Sie einen manuellen KI-Commit durchführen?',\n                    { modal: true }, // Macht das Dialogfeld modal\n                    'Ja'\n                ) === 'Ja';\n            }\n            \n            if (shouldProceed) {\n                await performAutoCommit(true); // 'true' signalisiert manuellen Trigger\n                // Die Erfolgsmeldung wird jetzt innerhalb von performAutoCommit angezeigt\n            }\n        } catch (error) {\n            showNotification(`Fehler beim manuellen Commit: ${error.message}`, 'error');\n        }\n    }));\n\n    // #endregion Kernbefehle\n\n    // #region UI & Konfigurationsbefehle\n\n    // KI-Provider auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAiProvider', async () => {\n        const providerOptions = [\n            { label: 'Ollama (lokal)', id: 'ollama' },\n            { label: 'OpenAI', id: 'openai' },\n            { label: 'Anthropic Claude', id: 'anthropic' }\n        ];\n        \n        const selected = await vscode.window.showQuickPick(providerOptions, {\n            placeHolder: 'KI-Provider auswählen',\n            title: 'Comitto - KI-Provider auswählen'\n        });\n        \n        if (selected) {\n            await vscode.workspace.getConfiguration('comitto').update('aiProvider', selected.id, vscode.ConfigurationTarget.Global);\n            if (providers) {\n                providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n            showNotification(`KI-Provider auf \"${selected.label}\" gesetzt.`, 'info');\n        }\n    }));\n\n    // Ollama-Modell bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaModel', async () => { ... }));\n\n    // Ollama-Endpoint bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaEndpoint', async () => { ... }));\n\n    // OpenAI-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectOpenAIModel', async () => {\n        await handleOpenAIModelSelectionCommand(); // Ruft die dedizierte Funktion auf\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // OpenAI-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editOpenAIKey', async () => {\n        await handleEditOpenAIKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAnthropicModel', async () => {\n        await handleSelectAnthropicModelCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editAnthropicKey', async () => {\n        await handleEditAnthropicKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // #region Trigger-Regeln Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFileCountThreshold', async () => {\n        await handleEditTriggerRuleCommand('fileCountThreshold', 'Datei-Anzahl Schwellenwert', 'z.B. 3', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editMinChangeCount', async () => {\n        await handleEditTriggerRuleCommand('minChangeCount', 'Änderungs-Anzahl Schwellenwert', 'z.B. 10', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editTimeThreshold', async () => {\n        await handleEditTriggerRuleCommand('timeThresholdMinutes', 'Zeit-Schwellwert (Minuten)', 'z.B. 30', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFilePatterns', async () => {\n        await handleEditTriggerRuleCommand('filePatterns', 'Dateimuster (kommagetrennt)', 'z.B. **/*.js, **/*.ts', 'patterns');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editSpecificFiles', async () => {\n        await handleEditTriggerRuleCommand('specificFiles', 'Spezifische Dateien (kommagetrennt)', 'z.B. package.json, README.md', 'files');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editIntervalMinutes', async () => {\n        await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall für Intervall-Trigger (Minuten)', 'z.B. 15', 'number');\n    }));\n\n    // Neue Toggle-Befehle für Trigger-Regeln\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnSave', async () => {\n        await handleToggleTriggerRuleCommand('onSave', 'Speichern-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnInterval', async () => {\n        await handleToggleTriggerRuleCommand('onInterval', 'Intervall-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnBranchSwitch', async () => {\n        await handleToggleTriggerRuleCommand('onBranchSwitch', 'Branch-Wechsel-Trigger');\n    }));\n    // #endregion\n\n    // #region Git-Einstellungen Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoPush', async () => {\n        await handleToggleGitSettingCommand('autoPush', 'Auto-Push');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editBranch', async () => {\n        await handleEditGitSettingCommand('branch', 'Branch für Commits', 'Leer lassen für aktuellen Branch');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitLanguage', async () => {\n        await handleCommitMessageLanguageCommand(); // Behält eigene Logik wegen Prompt-Anpassung\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitStyle', async () => {\n        await handleSelectGitSettingCommand('commitMessageStyle', 'Commit-Nachrichtenstil', [\n            { label: 'Conventional Commits', value: 'conventional' },\n            { label: 'Gitmoji', value: 'gitmoji' }\n        ]);\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleUseGitignore', async () => {\n        await handleToggleGitSettingCommand('useGitignore', 'Gitignore-Verwendung');\n        // Eventuell gitignore neu laden\n        const commandExists = await vscode.commands.getCommands(true).then(cmds => cmds.includes('comitto.internal.reloadGitignore'));\n        if (commandExists) {\n            vscode.commands.executeCommand('comitto.internal.reloadGitignore');\n        } else {\n            console.warn('Befehl comitto.internal.reloadGitignore nicht gefunden.');\n        }\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectStageMode', async () => {\n        await handleSelectStageModeCommand(); // Behält eigene Logik wegen Pattern-Frage\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editStagingPatterns', async () => {\n        await handleEditStagingPatternsCommand(); // Behält eigene Logik\n    }));\n    // #endregion\n\n    // #region UI-Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleSimpleMode', async () => {\n        await handleToggleUISettingCommand('simpleMode', 'Einfacher Modus');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleConfirmBeforeCommit', async () => {\n        await handleToggleUISettingCommand('confirmBeforeCommit', 'Bestätigung vor Commit');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleShowNotifications', async () => {\n        await handleToggleUISettingCommand('showNotifications', 'Benachrichtigungen anzeigen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectTheme', async () => {\n        await handleSelectThemeCommand();\n    }));\n    // #endregion\n\n    // #region Benachrichtigungseinstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnCommit', async () => {\n        await handleToggleNotificationSettingCommand('onCommit', 'Commit-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnPush', async () => {\n        await handleToggleNotificationSettingCommand('onPush', 'Push-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnError', async () => {\n        await handleToggleNotificationSettingCommand('onError', 'Fehler-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnTriggerFired', async () => {\n        await handleToggleNotificationSettingCommand('onTriggerFired', 'Trigger-Benachrichtigungen');\n    }));\n    // #endregion\n\n    // Prompt-Vorlage bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editPromptTemplate', async () => {\n        await handleEditPromptTemplateCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Dashboard anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showDashboard', async () => {\n        await handleShowDashboardCommand(context);\n    }));\n\n    // KI-Provider konfigurieren (kombiniert Auswahl und spezifische Konfig)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureAIProvider', async () => {\n        await handleConfigureAIProviderCommand(providers);\n    }));\n\n    // Trigger konfigurieren (grafisch oder direkt)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureTriggers', async () => {\n        await handleConfigureTriggersCommand(context, providers);\n    }));\n\n    // Einfache Benutzeroberfläche anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showSimpleUI', () => {\n        showSimpleUI(context, providers);\n    }));\n\n    // #endregion UI & Konfigurationsbefehle\n}\n\n// ==========================================================================\n// HILFSFUNKTIONEN FÜR BEFEHLE\n// ==========================================================================\n\n// #region Generische Handler für Einstellungen\n\n/**\n * Generischer Handler zum Bearbeiten einer Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n * @param {'number'|'patterns'|'files'} inputType Typ der Eingabe für Validierung/Parsing.\n */\nasync function handleEditTriggerRuleCommand(ruleKey, promptText, placeHolder, inputType) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = { ...config.get('triggerRules') }; // Kopie erstellen\n    const currentValue = rules[ruleKey];\n\n    let valueToString = '';\n    if (inputType === 'patterns' || inputType === 'files') {\n        valueToString = Array.isArray(currentValue) ? currentValue.join(', ') : '';\n    } else {\n        valueToString = currentValue !== undefined ? currentValue.toString() : '';\n    }\n\n        const value = await vscode.window.showInputBox({\n        value: valueToString,\n        prompt: promptText,\n        placeHolder: placeHolder,\n            validateInput: text => {\n            if (inputType === 'number') {\n                if (!text) return 'Eingabe darf nicht leer sein.';\n                const num = parseInt(text);\n                if (isNaN(num) || num < (ruleKey === 'intervalMinutes' || ruleKey === 'timeThresholdMinutes' ? 1 : 0)) {\n                    return 'Bitte geben Sie eine gültige positive Zahl ein.';\n                }\n            }\n            // Keine spezielle Validierung für patterns/files hier, erfolgt beim Speichern\n            return null;\n            }\n        });\n        \n        if (value !== undefined) {\n        let processedValue;\n        if (inputType === 'number') {\n            processedValue = parseInt(value);\n        } else if (inputType === 'patterns' || inputType === 'files') {\n            processedValue = value.split(',').map(p => p.trim()).filter(p => p.length > 0);\n            if (inputType === 'patterns' && processedValue.length === 0) {\n                processedValue = ['**/*']; // Standard, wenn leer\n            }\n        } else {\n            processedValue = value; // Fallback\n        }\n\n        rules[ruleKey] = processedValue;\n        await config.update('triggerRules', rules, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleTriggerRuleCommand(ruleKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const triggerRules = config.get('triggerRules') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(triggerRules[ruleKey]);\n        \n        // Aktualisierte triggerRules erstellen\n        const updatedRules = { ...triggerRules, [ruleKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('triggerRules', updatedRules, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        \n        // Falls es der Intervall-Trigger ist und er aktiviert wurde, nach dem Intervall fragen\n        if (ruleKey === 'onInterval' && newValue && (!triggerRules.intervalMinutes || triggerRules.intervalMinutes <= 0)) {\n            await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall (Minuten)', 'z.B. 5', 'number');\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n/**\n * Generischer Handler zum Bearbeiten einer Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n */\nasync function handleEditGitSettingCommand(settingKey, promptText, placeHolder) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') }; // Kopie erstellen\n    const currentValue = gitSettings[settingKey];\n\n        const value = await vscode.window.showInputBox({\n        value: currentValue !== undefined ? currentValue.toString() : '',\n        prompt: promptText,\n        placeHolder: placeHolder,\n        });\n        \n        if (value !== undefined) {\n        gitSettings[settingKey] = value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleGitSettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const newValue = !gitSettings[settingKey];\n    gitSettings[settingKey] = newValue;\n    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`${settingName} ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n/**\n * Generischer Handler zum Auswählen einer Git-Einstellung aus einer Liste.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} placeHolder Platzhalter für die QuickPick-Liste.\n * @param {Array<{label: string, value: any}>} options Auswahloptionen.\n */\nasync function handleSelectGitSettingCommand(settingKey, placeHolder, options) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentValue = gitSettings[settingKey];\n\n    const selected = await vscode.window.showQuickPick(\n        options.map(opt => ({ \n            ...opt,\n            description: currentValue === opt.value ? '(Aktuell)' : ''\n        })),\n        {\n            placeHolder: placeHolder,\n            ignoreFocusOut: true\n        }\n    );\n\n    if (selected) {\n        gitSettings[settingKey] = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${placeHolder} auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen UI-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `uiSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleUISettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const newValue = !uiSettings[settingKey];\n    uiSettings[settingKey] = newValue;\n    await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n    \n    // Für Benachrichtigungen immer eine Nachricht zeigen\n    if (settingKey === 'showNotifications') {\n         vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    } else if (uiSettings.showNotifications) {\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    }\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n// #endregion\n\n// #region Spezifische Handler (Beibehaltene Logik)\n\n/**\n * Behandelt das Kommando zum Bearbeiten des OpenAI API-Schlüssels.\n */\nasync function handleEditOpenAIKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('openai.apiKey');\n        const value = await vscode.window.showInputBox({\n            value: currentValue,\n        prompt: 'Geben Sie Ihren OpenAI API-Schlüssel ein',\n        placeHolder: 'sk-...',\n        password: true,\n        ignoreFocusOut: true\n        });\n        \n        if (value !== undefined) {\n        await config.update('openai.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('OpenAI API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Anthropic-Modells.\n */\nasync function handleSelectAnthropicModelCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentModel = config.get('anthropic.model');\n    const models = [\n        'claude-3-haiku-20240307',\n        'claude-3-sonnet-20240229',\n        'claude-3-opus-20240229',\n        'claude-2.1',\n        'claude-2.0',\n        'claude-instant-1.2'\n    ];\n        \n        const selected = await vscode.window.showQuickPick(\n        models.map(name => ({\n            label: name,\n            description: name === currentModel ? '(Aktuell)' : ''\n        })),\n        { \n            placeHolder: 'Claude-Modell auswählen',\n            ignoreFocusOut: true\n        }\n        );\n        \n        if (selected) {\n        await config.update('anthropic.model', selected.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Anthropic-Modell auf ${selected.label} gesetzt.`);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten des Anthropic API-Schlüssels.\n */\nasync function handleEditAnthropicKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('anthropic.apiKey');\n    const value = await vscode.window.showInputBox({\n        value: currentValue,\n        prompt: 'Geben Sie Ihren Anthropic API-Schlüssel ein',\n        placeHolder: 'sk-ant-...',\n        password: true,\n        ignoreFocusOut: true\n    });\n    \n    if (value !== undefined) {\n        await config.update('anthropic.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('Anthropic API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Bearbeitung der Prompt-Vorlage.\n */\nasync function handleEditPromptTemplateCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('promptTemplate');\n        \n        // Temporäre Datei erstellen und öffnen\n    try {\n        const document = await vscode.workspace.openTextDocument({\n            content: currentValue,\n            language: 'markdown'\n        });\n        \n        await vscode.window.showTextDocument(document);\n        \n        // Listener für Speichern hinzufügen und nach erfolgreichem Speichern wieder entfernen\n        const disposable = vscode.workspace.onDidSaveTextDocument(async (doc) => {\n            if (doc === document) {\n                const newContent = doc.getText();\n                // Nur aktualisieren, wenn sich der Inhalt geändert hat\n                if (newContent !== currentValue) {\n                    await config.update('promptTemplate', newContent, vscode.ConfigurationTarget.Global);\n                vscode.window.showInformationMessage('Prompt-Vorlage wurde gespeichert.');\n                }\n                disposable.dispose(); // Listener entfernen\n                // Optional: Temporäres Dokument schließen?\n                // await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n            }\n        });\n        \n        // Listener für Schließen des Dokuments (ohne Speichern)\n        const closeDisposable = vscode.workspace.onDidCloseTextDocument(doc => {\n            if (doc === document) {\n                disposable.dispose(); // Auch den Speicher-Listener entfernen\n                closeDisposable.dispose();\n            }\n        });\n\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Öffnen der Prompt-Vorlage: ${error.message}`);\n        console.error('Fehler bei handleEditPromptTemplateCommand:', error);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Anzeigen des Dashboards.\n * @param {vscode.ExtensionContext} context \n */\nasync function handleShowDashboardCommand(context) {\n    // Bestehendes Panel prüfen und wiederverwenden\n    let panel = context.globalState.get('comittoDashboardPanel');\n    \n    if (panel) {\n        // Panel bereits vorhanden, fokussieren\n        panel.reveal(vscode.ViewColumn.One);\n    } else {\n        // Neues Panel erstellen\n        panel = vscode.window.createWebviewPanel(\n            'comittoDashboard',\n            'Comitto Dashboard',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(context.extensionUri, 'resources')\n                ]\n            }\n        );\n        \n        // Panel im globalen Zustand speichern\n        context.globalState.update('comittoDashboardPanel', panel);\n        \n        // HTML für das Webview generieren und setzen\n        panel.webview.html = generateDashboardHTML(context);\n        \n        // Nachrichten vom Webview verarbeiten\n        panel.webview.onDidReceiveMessage(\n            async (message) => {\n                switch (message.command) {\n                    case 'refresh':\n                        panel.webview.html = generateDashboardHTML(context);\n                        break;\n                    case 'toggleAutoCommit':\n                        const config = vscode.workspace.getConfiguration('comitto');\n                        const enabled = !config.get('autoCommitEnabled');\n                        await config.update('autoCommitEnabled', enabled, vscode.ConfigurationTarget.Global);\n                        panel.webview.html = generateDashboardHTML(context);\n                        break;\n                    case 'manualCommit':\n                        vscode.commands.executeCommand('comitto.performManualCommit');\n                        break;\n                    case 'openSettings':\n                        vscode.commands.executeCommand('comitto.openSettings');\n                        break;\n                    case 'configureProvider':\n                        vscode.commands.executeCommand('comitto.configureAIProvider');\n                        break;\n                    case 'configureTriggers':\n                        vscode.commands.executeCommand('comitto.configureTriggers');\n                        break;\n                }\n            },\n            undefined,\n            context.subscriptions\n        );\n\n        // Bereinigen, wenn das Panel geschlossen wird\n        panel.onDidDispose(() => {\n            context.globalState.update('comittoDashboardPanel', undefined);\n        }, null, context.subscriptions);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Konfiguration des KI-Providers.\n * @param {Object} providers \n */\nasync function handleConfigureAIProviderCommand(providers) {\n    const providerOptions = [\n        { label: 'Ollama (lokal)', id: 'ollama' },\n        { label: 'OpenAI', id: 'openai' },\n        { label: 'Anthropic Claude', id: 'anthropic' }\n    ];\n    \n    const selectedProvider = await vscode.window.showQuickPick(providerOptions, {\n                placeHolder: 'KI-Provider auswählen',\n                title: 'Comitto - KI-Provider konfigurieren'\n    });\n    \n    if (!selectedProvider) return;\n    \n    // Provider in der Konfiguration speichern\n    await vscode.workspace.getConfiguration('comitto').update('aiProvider', selectedProvider.id, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`KI-Provider auf \"${selectedProvider.label}\" gesetzt.`);\n    \n    // Provider-spezifische Einstellungen konfigurieren\n    let configSuccess = true;\n    switch (selectedProvider.id) {\n        case 'ollama':\n            configSuccess = await configureOllamaSettings();\n                    break;\n                case 'openai':\n            await handleOpenAIModelSelectionCommand();\n            await handleEditOpenAIKeyCommand(); // Fragen wir gleich nach dem Key\n            break;\n        case 'anthropic':\n            await handleSelectAnthropicModelCommand();\n            await handleEditAnthropicKeyCommand(); // Fragen wir gleich nach dem Key\n            break;\n    }\n    \n    // UI nur aktualisieren, wenn Konfiguration erfolgreich war\n    if (configSuccess && providers) {\n        providers.statusProvider.refresh();\n        providers.quickActionsProvider.refresh();\n        providers.settingsProvider.refresh();\n    }\n}\n\n/**\n * Konfiguriert die Ollama-Einstellungen (Endpunkt und Modell) mit verbesserter UX.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Abbruch/Fehler.\n */\nasync function configureOllamaSettings() {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentEndpoint = config.get('ollama.endpoint') || 'http://localhost:11434/api/generate';\n        const currentModel = config.get('ollama.model') || 'llama3';\n        \n        // Konfiguration des Endpoints\n        const endpoint = await vscode.window.showInputBox({\n            placeHolder: 'http://localhost:11434/api/generate',\n            prompt: 'Ollama API-Endpunkt',\n            value: currentEndpoint,\n            validateInput: value => {\n                if (!value) return 'Der Endpunkt darf nicht leer sein';\n                if (!value.startsWith('http://') && !value.startsWith('https://')) {\n                    return 'Der Endpunkt muss mit http:// oder https:// beginnen';\n                }\n                // Einfache URL-Validierung (optional, könnte komplexer sein)\n                try {\n                    new URL(value);\n                } catch (e) {\n                    return 'Ungültige URL';\n                }\n                return null; // Kein Fehler\n            },\n            ignoreFocusOut: true\n        });\n        \n        // Abbruch durch Benutzer\n        if (endpoint === undefined) return false;\n\n        await config.update('ollama.endpoint', endpoint, vscode.ConfigurationTarget.Global);\n        \n        // Versuche, die Verbindung zu Ollama zu testen und Modelle zu laden\n        let availableModels = [];\n        let connectionError = null;\n        try {\n            const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Teste Verbindung zu Ollama und lade Modelle...', 5000);\n            const axios = require('axios');\n            // Verwende /api/tags zum Testen der Verbindung und Abrufen der Modelle\n            const tagsEndpoint = endpoint.replace(/\\/api\\/(generate|chat)$/, '/api/tags');\n            const response = await axios.get(tagsEndpoint, { timeout: 7000 }); // 7 Sekunden Timeout\n            statusBarMessage.dispose(); // Nachricht entfernen\n            \n            if (response.data && response.data.models) {\n                availableModels = response.data.models.map(model => model.name).sort();\n                vscode.window.showInformationMessage(`Verbindung zu Ollama erfolgreich! ${availableModels.length} Modelle gefunden.`);\n            } else {\n                vscode.window.showWarningMessage('Verbindung zu Ollama erfolgreich, aber keine Modelle gefunden.');\n            }\n        } catch (error) {\n            connectionError = error;\n            console.error('Fehler beim Testen der Ollama-Verbindung:', error);\n            vscode.window.showWarningMessage(\n                `Warnung: Konnte keine Verbindung zu Ollama herstellen (${error.message}). ` +\n                'Bitte stellen Sie sicher, dass Ollama läuft und der Endpunkt korrekt ist.'\n            );\n        }\n        \n        // Konfiguration des Modells\n        const popularModels = [\n            'llama3', 'mistral', 'mixtral', 'phi', 'gemma', 'codellama', 'orca-mini'\n        ];\n        \n        // Kombiniere populäre und verfügbare Modelle ohne Duplikate\n        const allModels = [...new Set([...availableModels, ...popularModels])].sort(); // Sortieren für bessere Übersicht\n        \n        // QuickPick für Modell-Auswahl\n        const quickPickItems = allModels.map(model => ({\n            label: model,\n            description: availableModels.includes(model) ? '$(check) Lokal verfügbar' : '$(cloud-download) Evtl. Download nötig',\n            detail: model === currentModel ? '(Aktuell ausgewählt)' : ''\n        }));\n        \n        const selectedModel = await vscode.window.showQuickPick(quickPickItems, {\n            placeHolder: 'Wählen Sie ein Ollama-Modell',\n            title: 'Ollama Modell auswählen',\n            ignoreFocusOut: true\n        });\n        \n        // Abbruch durch Benutzer\n        if (!selectedModel) return false;\n\n        await config.update('ollama.model', selectedModel.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Ollama-Modell auf \"${selectedModel.label}\" gesetzt.`);\n        \n        return true; // Erfolg\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Konfiguration von Ollama: ${error.message}`);\n        console.error('Fehler bei der Konfiguration von Ollama:', error);\n        return false; // Fehler\n    }\n}\n\n/**\n * Funktion zum Verwalten der OpenAI-Modellauswahl\n * Verbesserte Implementierung mit moderner Benutzeroberfläche\n * @returns {Promise<void>}\n */\nasync function handleOpenAIModelSelectionCommand() {\n    try {\n        // OpenAI-Modelle aus UI-Modul abrufen\n        const models = ui.getOpenAIModelOptions().map(option => ({\n            label: option.label,\n            description: option.value,\n            detail: option.value === 'gpt-4o' ? 'Empfohlen' : undefined\n        }));\n        \n        // Aktuelles Modell abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentModel = config.get('openai.model');\n        \n        // Modellauswahl anzeigen\n        const selectedModel = await vscode.window.showQuickPick(models, {\n            placeHolder: 'Wählen Sie ein OpenAI-Modell',\n            title: 'OpenAI-Modell auswählen',\n            matchOnDescription: true,\n            matchOnDetail: true\n        });\n        \n        if (selectedModel) {\n            // Konfiguration aktualisieren\n            await config.update('openai.model', selectedModel.description, vscode.ConfigurationTarget.Global);\n            vscode.window.showInformationMessage(`OpenAI-Modell auf \"${selectedModel.label}\" gesetzt.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der OpenAI-Modellauswahl: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Konfiguration der Trigger-Regeln.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers \n */\nasync function handleConfigureTriggersCommand(context, providers) {\n    const configOptions = [\n        // { label: 'Grafischer Trigger-Konfigurator öffnen', id: 'graphical', description: 'Visuelle Einstellung der Trigger' }, // Zukünftig?\n        { label: 'Trigger-Einstellungen bearbeiten', id: 'direct', description: 'Einzelne Trigger-Regeln anpassen' }\n    ];\n    \n    const selectedOption = await vscode.window.showQuickPick(configOptions, {\n        placeHolder: 'Wie möchten Sie die Trigger konfigurieren?',\n            title: 'Comitto - Trigger konfigurieren'\n        });\n        \n    if (!selectedOption) return;\n    \n    // if (selectedOption.id === 'graphical') {\n    //     showTriggerConfigWebview(context, providers); // Für zukünftige grafische UI\n    // } else\n     if (selectedOption.id === 'direct') {\n        // Menü zur Auswahl der spezifischen Trigger-Einstellung\n        const config = vscode.workspace.getConfiguration('comitto');\n        const rules = config.get('triggerRules');\n        \n        const triggerOptions = [\n            { label: `Datei-Anzahl Schwellenwert: ${rules.fileCountThreshold}`, id: 'comitto.editFileCountThreshold' },\n            { label: `Änderungs-Anzahl Schwellenwert: ${rules.minChangeCount}`, id: 'comitto.editMinChangeCount' },\n            { label: `Zeit-Schwellwert (Minuten): ${rules.timeThresholdMinutes}`, id: 'comitto.editTimeThreshold' },\n            { label: `Trigger bei Speichern: ${rules.onSave ? 'Ja' : 'Nein'}`, id: 'comitto.toggleOnSave' },\n            { label: `Intervall-Trigger: ${rules.onInterval ? `Ja (alle ${rules.intervalMinutes} Min.)` : 'Nein'}`, id: 'comitto.toggleOnInterval' },\n            { label: `Intervall-Dauer bearbeiten`, id: 'comitto.editIntervalMinutes', disabled: !rules.onInterval }, // Nur wenn Intervall aktiv\n            { label: `Trigger bei Branch-Wechsel: ${rules.onBranchSwitch ? 'Ja' : 'Nein'}`, id: 'comitto.toggleOnBranchSwitch' },\n            { label: 'Dateimuster bearbeiten', id: 'comitto.editFilePatterns' },\n            { label: 'Spezifische Dateien bearbeiten', id: 'comitto.editSpecificFiles' }\n        ];\n        \n        const selectedTrigger = await vscode.window.showQuickPick(\n             triggerOptions.filter(opt => !opt.disabled), // Deaktivierte Optionen ausblenden\n             {\n                placeHolder: 'Welche Trigger-Einstellung möchten Sie bearbeiten?',\n                title: 'Comitto - Trigger-Regel bearbeiten'\n             }\n        );\n        \n        if (selectedTrigger && selectedTrigger.id) {\n            vscode.commands.executeCommand(selectedTrigger.id);\n        }\n    }\n}\n\n/**\n * Zeigt eine einfache Benutzeroberfläche für grundlegende Funktionen.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers \n */\nfunction showSimpleUI(context, providers) {\n    // Bestehendes Panel prüfen und wiederverwenden\n    let panel = context.globalState.get('comittoSimpleUIPanel');\n    \n    if (panel) {\n        // Panel bereits vorhanden, fokussieren\n        panel.reveal(vscode.ViewColumn.One);\n        \n        // Inhalt aktualisieren\n        const config = vscode.workspace.getConfiguration('comitto');\n        const autoCommitEnabled = config.get('autoCommitEnabled');\n        const providerName = ui.getProviderDisplayName(config.get('aiProvider'));\n        panel.webview.html = generateSimpleUIHTML(autoCommitEnabled, providerName, context);\n    } else {\n        // Neues Panel erstellen\n        panel = vscode.window.createWebviewPanel(\n            'comittoSimpleUI',\n            'Comitto: Einfache Benutzeroberfläche',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(context.extensionUri, 'resources')\n                ]\n            }\n        );\n        \n        // Panel im globalen Zustand speichern\n        context.globalState.update('comittoSimpleUIPanel', panel);\n        \n        // Konfiguration auslesen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const autoCommitEnabled = config.get('autoCommitEnabled');\n        const providerName = ui.getProviderDisplayName(config.get('aiProvider'));\n        \n        // HTML für das Webview generieren und setzen\n        panel.webview.html = generateSimpleUIHTML(autoCommitEnabled, providerName, context);\n        \n        // Nachrichten vom Webview verarbeiten\n        panel.webview.onDidReceiveMessage(\n            async (message) => {\n                try {\n                    switch (message.command) {\n                        case 'toggleAutoCommit':\n                            const newEnabled = !autoCommitEnabled;\n                            await config.update('autoCommitEnabled', newEnabled, vscode.ConfigurationTarget.Global);\n                            // UI-Aktualisierung (wird automatisch durch Konfigurationsänderung ausgelöst)\n                    break;\n                        case 'performManualCommit':\n                            vscode.commands.executeCommand('comitto.performManualCommit');\n                    break;\n                        case 'selectProvider':\n                            vscode.commands.executeCommand('comitto.configureAIProvider');\n                    break;\n                        case 'configureTriggers':\n                            vscode.commands.executeCommand('comitto.configureTriggers');\n                    break;\n                        case 'openDashboard':\n                            vscode.commands.executeCommand('comitto.showDashboard');\n                            break;\n                        case 'openSettings':\n                            vscode.commands.executeCommand('comitto.openSettings');\n                    break;\n            }\n                } catch (error) {\n                    vscode.window.showErrorMessage(`Fehler bei der Verarbeitung der SimpleUI-Aktion: ${error.message}`);\n                }\n            },\n            undefined,\n            context.subscriptions\n        );\n        \n        // Bereinigen, wenn das Panel geschlossen wird\n        panel.onDidDispose(() => {\n            context.globalState.update('comittoSimpleUIPanel', undefined);\n        }, null, context.subscriptions);\n    }\n}\n\n/**\n * Generiert das HTML für die einfache Benutzeroberfläche.\n * @param {boolean} autoCommitEnabled \n * @param {string} providerName \n * @param {vscode.ExtensionContext} context\n * @returns {string} \n */\nfunction generateSimpleUIHTML(autoCommitEnabled, providerName, context) {\n    // Pfade zu Ressourcen erstellen\n    const simpleUIJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'simpleUI.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'comitto_icon_color.svg');\n\n    // Webview URIs erstellen\n    let panel = context.globalState.get('comittoSimpleUIPanel');\n    if (!panel) return \"<div>Simple UI konnte nicht geladen werden.</div>\";\n\n    const simpleUIJsWebviewUri = panel.webview.asWebviewUri(simpleUIJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n\n    // Version aus package.json lesen\n    let version = '0.9.5'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n\n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto - Einfache Bedienung</title>\n        \n        <style nonce=\"${nonce}\">\n            /* Spezifische Inline-Styles für diese Ansicht */\n            .animated-bg {\n                background: linear-gradient(-45deg, #6366f1, #4f46e5, #3b82f6, #0ea5e9);\n                background-size: 400% 400%;\n                animation: animated-bg 15s ease infinite;\n            }\n            \n            .status-box {\n                border-radius: 16px;\n                padding: 1rem;\n                margin: 1.5rem 0;\n                text-align: center;\n                font-size: 1.25rem;\n                font-weight: 500;\n                transition: all 0.3s ease;\n            }\n            \n            .provider-card {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                padding: 1rem;\n                border-radius: 12px;\n                background: rgba(255, 255, 255, 0.1);\n                margin-bottom: 1rem;\n            }\n            \n            .provider-icon {\n                font-size: 2rem;\n                width: 48px;\n                height: 48px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: 12px;\n                background: rgba(99, 102, 241, 0.2);\n            }\n        </style>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container animated-bg\">\n            <!-- Header mit Logo -->\n            <div class=\"header flex items-center justify-center py-6\">\n                <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-16 w-16 floating-element\"/>\n                <h1 class=\"text-3xl font-bold ml-4 typing\">Comitto</h1>\n            </div>\n            \n            <!-- Status-Anzeige -->\n            <div class=\"status-box glass-container ${autoCommitEnabled ? 'bg-green-900 bg-opacity-20' : 'bg-red-900 bg-opacity-20'} border ${autoCommitEnabled ? 'border-green-500' : 'border-red-500'} shadow-lg\">\n                <div class=\"flex items-center justify-center\">\n                    <span class=\"status-indicator ${autoCommitEnabled ? 'status-active pulse' : 'status-inactive'} mr-2\"></span>\n                    <span>Automatische Commits: <strong>${autoCommitEnabled ? 'AKTIVIERT' : 'DEAKTIVIERT'}</strong></span>\n                </div>\n            </div>\n            \n            <!-- Aktions-Buttons -->\n            <div class=\"action-buttons flex flex-col gap-4 mt-8\">\n                <button id=\"toggleBtn\" class=\"btn ${autoCommitEnabled ? 'btn-danger' : 'btn-secondary'} hover-lift w-full text-lg py-4\" data-enabled=\"${autoCommitEnabled}\">\n                    <span class=\"icon text-2xl\">${autoCommitEnabled ? '🚫' : '✅'}</span>\n                    ${autoCommitEnabled ? 'Auto-Commit deaktivieren' : 'Auto-Commit aktivieren'}\n                </button>\n                \n                <button id=\"manualCommitBtn\" class=\"btn hover-lift w-full text-lg py-4\">\n                    <span class=\"icon text-2xl\">💾</span>\n                    Manuellen Commit ausführen\n                </button>\n            </div>\n            \n            <!-- KI-Provider Info -->\n            <div class=\"info-box glass-container mt-8 p-4 rounded-xl shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                    <span class=\"icon mr-2\">🧠</span> KI-Provider\n                </h2>\n                <div class=\"provider-card\">\n                    <div class=\"provider-icon\">🤖</div>\n                    <div class=\"flex-1\">\n                        <p>Aktiver Provider:</p>\n                        <p class=\"text-lg font-semibold\">${providerName}</p>\n                    </div>\n                    <button id=\"configureAIBtn\" class=\"btn btn-icon\">\n                        <span class=\"icon\">⚙️</span>\n                    </button>\n                </div>\n            </div>\n            \n            <!-- Weitere Aktionen -->\n            <div class=\"info-box glass-container mt-6 p-4 rounded-xl shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                    <span class=\"icon mr-2\">⚡</span> Weitere Aktionen\n                </h2>\n                <div class=\"grid grid-cols-1 gap-3\">\n                    <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">⚙️</span> Trigger konfigurieren\n                    </button>\n                    <button id=\"openDashboardBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">📊</span> Dashboard öffnen\n                    </button>\n                    <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">🔧</span> Alle Einstellungen\n                    </button>\n                </div>\n            </div>\n            \n            <!-- Footer -->\n            <div class=\"footer mt-8 mb-4 text-center opacity-70\">\n                <p>Comitto v${version}</p>\n            </div>\n        </div>\n        \n        <!-- Simple UI JavaScript -->\n        <script nonce=\"${nonce}\" src=\"${simpleUIJsWebviewUri}\"></script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert das HTML für das Dashboard (Webview).\n * @param {vscode.ExtensionContext} context\n * @returns {string} HTML-Inhalt\n */\nfunction generateDashboardHTML(context) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const enabled = config.get('autoCommitEnabled');\n    const provider = config.get('aiProvider');\n    const rules = config.get('triggerRules');\n    const gitSettings = config.get('gitSettings');\n    const providerName = ui.getProviderDisplayName(provider);\n    const providerIcon = ui.getProviderIcon(provider); // Holen des Icons\n    \n    let providerModel = '';\n    switch (provider) {\n        case 'ollama': providerModel = config.get('ollama.model'); break;\n        case 'openai': providerModel = config.get('openai.model'); break;\n        case 'anthropic': providerModel = config.get('anthropic.model'); break;\n    }\n\n    // Pfade zu Ressourcen\n    const dashboardJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'dashboard.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'comitto_icon_color.svg');\n    const chartJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'chart.min.js');\n\n    // Webview URIs erstellen\n    let panel = context.globalState.get('comittoDashboardPanel');\n    if (!panel) return \"<div>Dashboard konnte nicht geladen werden. Panel nicht gefunden.</div>\";\n\n    const dashboardJsWebviewUri = panel.webview.asWebviewUri(dashboardJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    const chartJsWebviewUri = panel.webview.asWebviewUri(chartJsUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n    \n    // Version aus package.json lesen\n    let version = '0.9.5'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n    \n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto Dashboard</title>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container glass-container animated-bg\">\n            <div class=\"dashboard-header\">\n                <div class=\"flex items-center gap-4\">\n                    <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-12 w-12 floating-element\"/>\n                    <h1 class=\"dashboard-title typing\">Comitto Dashboard</h1>\n                </div>\n                <button id=\"refreshBtn\" class=\"btn btn-icon\" title=\"Aktualisieren\">\n                    <span class=\"icon\">🔄</span>\n                </button>\n            </div>\n            \n            <div class=\"flex justify-between items-center mb-6 fade-in\" style=\"animation-delay: 0.2s\">\n                <div class=\"status ${enabled ? 'status-enabled' : 'status-disabled'} flex items-center\">\n                    <span class=\"status-indicator ${enabled ? 'status-active' : 'status-inactive'}\"></span>\n                    <span><strong>Status:</strong> Comitto ist derzeit ${enabled ? 'aktiviert' : 'deaktiviert'}</span>\n                </div>\n                \n                <div class=\"flex gap-2\">\n                    <button id=\"commitBtn\" class=\"btn hover-lift\" title=\"Jetzt einen Commit mit KI generieren\">\n                        <span class=\"icon\">💾</span> Manueller Commit\n                    </button>\n                    <button id=\"toggleBtn\" class=\"btn ${enabled ? 'btn-danger' : 'btn-secondary'} hover-lift\" data-enabled=\"${enabled}\" title=\"Automatische Commits an-/ausschalten\">\n                        <span class=\"icon\">${enabled ? '🚫' : '✅'}</span> ${enabled ? 'Deaktivieren' : 'Aktivieren'}\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"dashboard fade-in\" style=\"animation-delay: 0.4s\">\n                <!-- KI-Konfiguration -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">${providerIcon.id ? `$(${providerIcon.id})` : '🧠'}</span> KI-Konfiguration\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${providerName}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <p class=\"mb-2\"><strong>Modell:</strong> ${providerModel || 'Nicht gesetzt'}</p>\n                        <div class=\"flex justify-center mt-4\">\n                            <button id=\"configureAIBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> KI konfigurieren\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Trigger-Regeln -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">⚙️</span> Trigger-Regeln\n                        </h2>\n                        <span class=\"badge ${rules.onSave || rules.onInterval ? 'badge-success' : 'badge-danger'}\">\n                            ${rules.onSave || rules.onInterval ? 'Aktiv' : 'Inaktiv'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Datei-Anzahl:</strong></p>\n                                <span class=\"badge\">${rules.fileCountThreshold}</span>\n                            </div>\n                            <div>\n                                <p><strong>Änderungs-Anzahl:</strong></p>\n                                <span class=\"badge\">${rules.minChangeCount}</span>\n                            </div>\n                            <div>\n                                <p><strong>Zeit-Schwellwert:</strong></p>\n                                <span class=\"badge\">${rules.timeThresholdMinutes} Min.</span>\n                            </div>\n                            <div>\n                                <p><strong>Aktive Trigger:</strong></p>\n                                <div class=\"flex flex-wrap gap-1\">\n                                    ${rules.onSave ? '<span class=\"badge badge-success\">Speichern</span>' : ''}\n                                    ${rules.onInterval ? `<span class=\"badge badge-success\">Intervall (${rules.intervalMinutes} Min.)</span>` : ''}\n                                    ${rules.onBranchSwitch ? '<span class=\"badge badge-success\">Branch-Wechsel</span>' : ''}\n                                    ${!rules.onSave && !rules.onInterval && !rules.onBranchSwitch ? '<span class=\"badge badge-danger\">Keine</span>' : ''}\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> Trigger konfigurieren\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Git-Einstellungen -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📝</span> Git-Einstellungen\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Auto-Push:</strong></p>\n                                <span class=\"badge ${gitSettings.autoPush ? 'badge-success' : 'badge-danger'}\">\n                                    ${gitSettings.autoPush ? 'Ja' : 'Nein'}\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Branch:</strong></p>\n                                <span class=\"badge tooltip\">\n                                    ${gitSettings.branch || 'Aktueller Branch'}\n                                    <span class=\"tooltip-text\">Aktiv für ${gitSettings.branch || 'aktuellen Branch'}</span>\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Commit-Stil:</strong></p>\n                                <span class=\"badge\">${gitSettings.commitMessageStyle}</span>\n                            </div>\n                            <div>\n                                <p><strong>Staging-Modus:</strong></p>\n                                <span class=\"badge\">${ui.getStageModeLabel(gitSettings.stageMode)}</span>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">🔧</span> Alle Einstellungen\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Aktivitätsübersicht -->\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📊</span> Aktivitätsübersicht\n                        </h2>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"h-40\">\n                            <canvas id=\"commitChart\"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"flex justify-center mt-4 fade-in\" style=\"animation-delay: 0.8s\">\n                <div class=\"badge\">Comitto v${version}</div>\n            </div>\n        </div>\n        \n        <!-- Chart.js (optional) -->\n        <script nonce=\"${nonce}\" src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\n        \n        <!-- Dashboard JavaScript -->\n        <script nonce=\"${nonce}\" src=\"${dashboardJsWebviewUri}\"></script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert eine Nonce für die Content Security Policy.\n * @returns {string} Eine zufällige Nonce.\n */\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\n/**\n * Funktion zum Verwalten der Commit-Nachrichtensprache\n * Verbesserte Implementierung mit Anpassung des Prompt-Templates\n * @returns {Promise<void>}\n */\nasync function handleCommitMessageLanguageCommand() {\n    try {\n        // Konfiguration abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings') || {};\n        \n        // Aktuell eingestellte Sprache abrufen\n        const currentLanguage = gitSettings.commitMessageLanguage || 'en';\n        \n        // Sprachoptionen definieren\n        const languageOptions = [\n            { label: 'Englisch', value: 'en', description: 'Commit-Nachrichten in englischer Sprache' },\n            { label: 'Deutsch', value: 'de', description: 'Commit-Nachrichten in deutscher Sprache' }\n        ];\n        \n        // Sprachauswahl anzeigen\n        const selectedLanguage = await vscode.window.showQuickPick(languageOptions, {\n            placeHolder: 'Wählen Sie die Sprache für Commit-Nachrichten',\n            title: 'Commit-Nachrichtensprache auswählen'\n        });\n        \n        if (selectedLanguage) {\n            // Git-Einstellungen aktualisieren\n            gitSettings.commitMessageLanguage = selectedLanguage.value;\n            await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n            \n            // Prompt-Template entsprechend anpassen\n            let promptTemplate = config.get('promptTemplate');\n            \n            // Je nach gewählter Sprache den Prompt-Template anpassen\n            if (selectedLanguage.value === 'de') {\n                // Wenn es bereits ein deutsches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('auf Deutsch')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generate a meaningful commit message in English/i,\n                        'Generiere eine aussagekräftige Commit-Nachricht auf Deutsch'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /using the Conventional Commits format/i,\n                        'im Format der Conventional Commits'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Keep it under 80 characters/i,\n                        'Halte sie unter 80 Zeichen'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Here is the diff of changes/i,\n                        'Hier ist das Diff der Änderungen'\n                    );\n                }\n            } else {\n                // Wenn es bereits ein englisches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('in English')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generiere eine aussagekräftige Commit-Nachricht auf Deutsch/i,\n                        'Generate a meaningful commit message in English'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /im Format der Conventional Commits/i,\n                        'using the Conventional Commits format'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Halte sie unter 80 Zeichen/i,\n                        'Keep it under 80 characters'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Hier ist das Diff der Änderungen/i,\n                        'Here is the diff of changes'\n                    );\n                }\n            }\n            \n            // Aktualisiertes Template speichern\n            await config.update('promptTemplate', promptTemplate, vscode.ConfigurationTarget.Global);\n            \n            vscode.window.showInformationMessage(\n                `Commit-Nachrichtensprache auf \"${selectedLanguage.label}\" gesetzt.`\n            );\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Spracheinstellung: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Staging-Modus.\n */\nasync function handleSelectStageModeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentMode = gitSettings.stageMode || 'all';\n\n    const modes = [\n        { label: 'Alle Änderungen', value: 'all', detail: 'Alle geänderten Dateien automatisch stagen (`git add .`)' },\n        { label: 'Spezifische Muster', value: 'specific', detail: 'Nur Dateien stagen, die bestimmten Mustern entsprechen' },\n        { label: 'Manuell auswählen', value: 'prompt', detail: 'Vor jedem Commit nach zu stagenden Dateien fragen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        modes.map(mode => ({ ...mode, description: currentMode === mode.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Staging-Modus auswählen',\n            title: 'Wie sollen Änderungen gestaged werden?',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        gitSettings.stageMode = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Staging-Modus auf \"${selected.label}\" gesetzt.`);\n        \n        // Wenn \"Spezifische Dateien\" ausgewählt wurde und keine Muster existieren, nach Mustern fragen\n        if (selected.value === 'specific' && (!gitSettings.specificStagingPatterns || gitSettings.specificStagingPatterns.length === 0)) {\n            await handleEditStagingPatternsCommand();\n        }\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten der Staging-Muster.\n */\nasync function handleEditStagingPatternsCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentPatterns = gitSettings.specificStagingPatterns || [];\n\n    const input = await vscode.window.showInputBox({\n        placeHolder: '*.js,*.json,src/**/*',\n        value: currentPatterns.join(','),\n        prompt: 'Kommagetrennte Glob-Muster für spezifisches Staging',\n        title: 'Staging-Muster bearbeiten',\n        ignoreFocusOut: true\n    });\n\n    if (input !== undefined) {\n        const patterns = input.split(',').map(p => p.trim()).filter(p => p);\n        gitSettings.specificStagingPatterns = patterns;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        if (patterns.length > 0) {\n            vscode.window.showInformationMessage(`Spezifische Staging-Muster aktualisiert: ${patterns.join(', ')}`);\n        } else {\n             vscode.window.showInformationMessage('Spezifische Staging-Muster entfernt.');\n        }\n       // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Alle Änderungen stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageAllCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Prüfe, ob es überhaupt Änderungen gibt\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen vorhanden.');\n            return true;\n        }\n\n        const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Stage alle Änderungen...', 2000);\n        await executeGitCommand('git add .', repoPath);\n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage('Alle Änderungen wurden gestaged.');\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen aller Änderungen: ${error.message}`);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Ausgewählte Dateien stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageSelectedCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Git-Status abrufen\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Geänderte Dateien parsen und für QuickPick vorbereiten\n        const changedFiles = statusOutput\n            .split('\\n')\n            .filter(line => line.trim() !== '')\n            .map(line => {\n                const status = line.substring(0, 2);\n                const filePath = line.substring(3).trim(); // Trimmen ist wichtig\n                return { \n                    status,\n                    filePath,\n                    label: `${ui.getStatusDescription(status)}: ${filePath}`,\n                    picked: !status.includes('?') // Vorauswahl aller Dateien außer untracked\n                };\n            });\n        \n        if (changedFiles.length === 0) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Dateien zur Auswahl anbieten\n        const selectedItems = await vscode.window.showQuickPick(changedFiles, {\n            placeHolder: 'Wählen Sie die zu stagenden Dateien aus',\n            canPickMany: true,\n            ignoreFocusOut: true,\n            title: 'Dateien für Staging auswählen'\n        });\n        \n        if (!selectedItems || selectedItems.length === 0) {\n            vscode.window.showInformationMessage('Keine Dateien zum Stagen ausgewählt.');\n            return false; // Benutzerabbruch\n        }\n        \n        const statusBarMessage = vscode.window.setStatusBarMessage(`$(sync~spin) Stage ${selectedItems.length} Datei(en)...`, 5000);\n        // Ausgewählte Dateien stagen\n        // Git add akzeptiert mehrere Dateien, sicherstellen, dass Pfade korrekt sind\n        const filesToStage = selectedItems.map(item => `\"${item.filePath}\"`).join(' ');\n        await executeGitCommand(`git add -- ${filesToStage}`, repoPath); // '--' trennt Optionen von Dateipfaden\n        \n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage(`${selectedItems.length} Datei(en) wurden gestaged.`);\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen ausgewählter Dateien: ${error.message}`);\n        console.error(\"Staging Error Details:\", error);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Themes.\n */\nasync function handleSelectThemeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const currentTheme = uiSettings.theme || 'auto';\n\n    const themes = [\n        { label: 'Hell', value: 'light', detail: 'Helles Theme für Comitto UI-Elemente' },\n        { label: 'Dunkel', value: 'dark', detail: 'Dunkles Theme für Comitto UI-Elemente' },\n        { label: 'Automatisch', value: 'auto', detail: 'Theme automatisch an VS Code anpassen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        themes.map(theme => ({...theme, description: currentTheme === theme.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Theme für Comitto auswählen',\n            title: 'Comitto Theme',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        uiSettings.theme = selected.value;\n        await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Comitto Theme auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Umschaltet eine Einstellung in den notifications-Einstellungen\n * @param {string} settingKey Der Schlüssel der Einstellung\n * @param {string} settingName Anzeigename der Einstellung für Benachrichtigungen\n */\nasync function handleToggleNotificationSettingCommand(settingKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const notifications = config.get('notifications') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(notifications[settingKey]);\n        \n        // Aktualisierte notifications erstellen\n        const updatedNotifications = { ...notifications, [settingKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('notifications', updatedNotifications, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen, wenn sie nicht gerade deaktiviert wurde\n        if (settingKey !== 'onError' || newValue) {\n            vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n// #endregion Spezifische Handler\n\nmodule.exports = {\n    registerCommands,\n    handleSelectThemeCommand,\n    handleStageSelectedCommand,\n    handleStageAllCommand,\n    handleOpenAIModelSelectionCommand,\n    handleCommitMessageLanguageCommand,\n    handleConfigureTriggersCommand,\n    showSimpleUI,\n    generateSimpleUIHTML,\n    generateDashboardHTML,\n    handleSelectStageModeCommand,\n    handleEditStagingPatternsCommand,\n    handleToggleGitSettingCommand,\n    handleToggleUISettingCommand,\n    handleToggleNotificationSettingCommand,\n    handleConfigureAIProviderCommand,\n    handleEditOpenAIKeyCommand,\n    handleSelectAnthropicModelCommand,\n    handleEditAnthropicKeyCommand,\n    handleEditPromptTemplateCommand\n}; ","module.exports = require(\"tty\");","module.exports = require(\"stream\");","module.exports = require(\"assert\");","module.exports = require(\"zlib\");","module.exports = require(\"events\");","module.exports = require(\"child_process\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"crypto\");","module.exports = require(\"url\");","module.exports = require(\"http\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [121,730], () => (__webpack_require__(1449)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 121 ? \"vendor\" : chunkId) + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","installedChunks","module","exports","require","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","vscode","ui","executeGitCommand","handleEditTriggerRuleCommand","_x","_x2","_x3","_x4","_handleEditTriggerRuleCommand","_callee39","ruleKey","promptText","placeHolder","inputType","config","rules","currentValue","valueToString","processedValue","_context39","workspace","getConfiguration","_objectSpread","get","Array","isArray","join","undefined","toString","window","showInputBox","prompt","validateInput","text","num","parseInt","split","map","trim","filter","update","ConfigurationTarget","Global","showInformationMessage","concat","handleToggleTriggerRuleCommand","_x5","_x6","_handleToggleTriggerRuleCommand","_callee40","settingName","triggerRules","newValue","updatedRules","_context40","_defineProperty","intervalMinutes","t0","showErrorMessage","message","handleEditGitSettingCommand","_x7","_x8","_x9","_handleEditGitSettingCommand","_callee41","settingKey","gitSettings","_context41","handleToggleGitSettingCommand","_x10","_x11","_handleToggleGitSettingCommand","_callee42","_context42","handleSelectGitSettingCommand","_x12","_x13","_x14","_handleSelectGitSettingCommand","_callee43","options","selected","_context43","showQuickPick","opt","description","ignoreFocusOut","label","handleToggleUISettingCommand","_x15","_x16","_handleToggleUISettingCommand","_callee44","uiSettings","_context44","showNotifications","handleEditOpenAIKeyCommand","_handleEditOpenAIKeyCommand","_callee45","_context45","password","handleSelectAnthropicModelCommand","_handleSelectAnthropicModelCommand","_callee46","currentModel","models","_context46","handleEditAnthropicKeyCommand","_handleEditAnthropicKeyCommand","_callee47","_context47","handleEditPromptTemplateCommand","_handleEditPromptTemplateCommand","_callee49","document","disposable","closeDisposable","_context49","openTextDocument","content","language","showTextDocument","onDidSaveTextDocument","_ref39","_callee48","doc","newContent","_context48","getText","dispose","_x24","onDidCloseTextDocument","console","error","handleShowDashboardCommand","_x17","_handleShowDashboardCommand","_callee51","context","panel","_context51","globalState","reveal","ViewColumn","One","createWebviewPanel","enableScripts","retainContextWhenHidden","localResourceRoots","Uri","joinPath","extensionUri","webview","html","generateDashboardHTML","onDidReceiveMessage","_ref40","_callee50","enabled","_context50","command","commands","executeCommand","_x25","subscriptions","onDidDispose","handleConfigureAIProviderCommand","_x18","_handleConfigureAIProviderCommand","_callee52","providers","providerOptions","selectedProvider","configSuccess","_context52","id","title","configureOllamaSettings","handleOpenAIModelSelectionCommand","statusProvider","refresh","quickActionsProvider","settingsProvider","_configureOllamaSettings","_callee53","currentEndpoint","endpoint","availableModels","statusBarMessage","axios","tagsEndpoint","response","popularModels","allModels","quickPickItems","selectedModel","_context53","startsWith","URL","setStatusBarMessage","replace","timeout","data","model","sort","showWarningMessage","_toConsumableArray","Set","includes","detail","t1","_handleOpenAIModelSelectionCommand","_callee54","_context54","getOpenAIModelOptions","option","matchOnDescription","matchOnDetail","handleConfigureTriggersCommand","_x19","_x20","_handleConfigureTriggersCommand","_callee55","configOptions","selectedOption","triggerOptions","selectedTrigger","_context55","fileCountThreshold","minChangeCount","timeThresholdMinutes","onSave","onInterval","disabled","onBranchSwitch","showSimpleUI","autoCommitEnabled","providerName","getProviderDisplayName","generateSimpleUIHTML","_ref38","_callee38","newEnabled","_context38","_x21","simpleUIJsUri","styleUri","animationsUri","logoUri","simpleUIJsWebviewUri","asWebviewUri","styleWebviewUri","animationsWebviewUri","logoWebviewUri","nonce","getNonce","version","pkgPath","fsPath","JSON","parse","cspSource","provider","providerIcon","getProviderIcon","providerModel","dashboardJsUri","chartJsUri","dashboardJsWebviewUri","commitMessageLanguage","autoPush","branch","commitMessageStyle","getStageModeLabel","stageMode","Math","floor","possible","random","handleCommitMessageLanguageCommand","_handleCommitMessageLanguageCommand","_callee56","languageOptions","selectedLanguage","promptTemplate","_context56","handleSelectStageModeCommand","_handleSelectStageModeCommand","_callee57","currentMode","modes","_context57","mode","specificStagingPatterns","handleEditStagingPatternsCommand","_handleEditStagingPatternsCommand","_callee58","currentPatterns","input","patterns","_context58","_handleStageAllCommand","_callee59","workspaceFolder","repoPath","_context59","workspaceFolders","uri","_handleStageSelectedCommand","_callee60","statusOutput","changedFiles","selectedItems","filesToStage","_context60","line","status","substring","filePath","getStatusDescription","picked","canPickMany","item","handleSelectThemeCommand","_handleSelectThemeCommand","_callee61","currentTheme","themes","_context61","theme","handleToggleNotificationSettingCommand","_x22","_x23","_handleToggleNotificationSettingCommand","_callee62","notifications","updatedNotifications","_context62","registerCommands","statusBarItem","setupFileWatcher","disableFileWatcher","performAutoCommit","showNotification","registerCommand","_callee","_context","_callee2","_context2","_callee3","_context3","_callee4","shouldProceed","_context4","confirmBeforeCommit","modal","_callee5","_context5","_callee6","_context6","_callee7","_context7","_callee8","_context8","_callee9","_context9","_callee10","_context10","_callee11","_context11","_callee12","_context12","_callee13","_context13","_callee14","_context14","_callee15","_context15","_callee16","_context16","_callee17","_context17","_callee18","_context18","_callee19","_context19","_callee20","_context20","_callee21","_context21","_callee22","_context22","_callee23","_context23","getCommands","cmds","warn","_callee24","_context24","_callee25","_context25","_callee26","_context26","_callee27","_context27","_callee28","_context28","_callee29","_context29","_callee30","_context30","_callee31","_context31","_callee32","_context32","_callee33","_context33","_callee34","_context34","_callee35","_context35","_callee36","_context36","_callee37","_context37","handleStageSelectedCommand","handleStageAllCommand","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","x","__webpack_exports__","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","chunkId","all","reduce","promises","obj","prop","chunk","moreModules","modules","ids","runtime","installChunk"],"sourceRoot":""}