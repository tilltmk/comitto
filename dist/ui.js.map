{"version":3,"file":"ui.js","mappings":"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","sources":["webpack://comitto/external commonjs \"vscode\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/./ui.js","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/startup"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"path\");","const vscode = require('vscode');\r\nconst path = require('path');\r\n\r\n/**\r\n * Klasse für die Statusanzeige in der Seitenleiste\r\n * Erweiterte Implementierung mit verbesserten visuellen Elementen und Gruppierung\r\n */\r\nclass StatusViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            // Unterelemente für gruppierte Ansicht\r\n            return this._getSubItems(element);\r\n        }\r\n\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        // Statusgruppe erstellen\r\n        const statusGroup = new vscode.TreeItem(\r\n            'Status und Schnellzugriff',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        statusGroup.contextValue = 'status-group';\r\n        statusGroup.iconPath = new vscode.ThemeIcon('pulse');\r\n        statusGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(statusGroup);\r\n\r\n        // Konfigurationsgruppe erstellen\r\n        const configGroup = new vscode.TreeItem(\r\n            'Konfiguration',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        configGroup.contextValue = 'config-group';\r\n        configGroup.iconPath = new vscode.ThemeIcon('settings');\r\n        configGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(configGroup);\r\n\r\n        // Aktionsgruppe erstellen\r\n        const actionGroup = new vscode.TreeItem(\r\n            'Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        actionGroup.contextValue = 'action-group';\r\n        actionGroup.iconPath = new vscode.ThemeIcon('run-all');\r\n        actionGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(actionGroup);\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Liefert Unterelemente für gruppierte Ansicht\r\n     * @param {vscode.TreeItem} element Das Übergeordnete Element\r\n     * @returns {Promise<vscode.TreeItem[]>} Liste der Unterelemente\r\n     */\r\n    async _getSubItems(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'status-group':\r\n                // Status-Element mit verbesserter Visualisierung\r\n                const statusItem = new vscode.TreeItem(\r\n                    `Status: ${enabled ? 'Aktiviert' : 'Deaktiviert'}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                statusItem.contextValue = enabled ? 'comitto-status-enabled' : 'comitto-status-disabled';\r\n                statusItem.iconPath = new vscode.ThemeIcon(enabled ? 'check' : 'circle-slash');\r\n                statusItem.tooltip = enabled ? 'Comitto überwacht aktiv Änderungen' : 'Comitto ist derzeit deaktiviert';\r\n                statusItem.command = {\r\n                    command: enabled ? 'comitto.disableAutoCommit' : 'comitto.enableAutoCommit',\r\n                    title: enabled ? 'Deaktivieren' : 'Aktivieren'\r\n                };\r\n                items.push(statusItem);\r\n\r\n                // Einfache Benutzeroberfläche öffnen\r\n                const simpleUIItem = new vscode.TreeItem(\r\n                    'Einfache Benutzeroberfläche',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                simpleUIItem.iconPath = new vscode.ThemeIcon('rocket');\r\n                simpleUIItem.tooltip = 'Öffnet eine übersichtliche Oberfläche für einfache Einstellungen';\r\n                simpleUIItem.command = {\r\n                    command: 'comitto.showSimpleUI',\r\n                    title: 'Einfache Benutzeroberfläche öffnen'\r\n                };\r\n                items.push(simpleUIItem);\r\n\r\n                // Dashboard öffnen\r\n                const dashboardItem = new vscode.TreeItem(\r\n                    'Dashboard anzeigen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                dashboardItem.iconPath = new vscode.ThemeIcon('dashboard');\r\n                dashboardItem.tooltip = 'Zeigt das vollständige Comitto-Dashboard an';\r\n                dashboardItem.command = {\r\n                    command: 'comitto.showDashboard',\r\n                    title: 'Dashboard anzeigen'\r\n                };\r\n                items.push(dashboardItem);\r\n                break;\r\n\r\n            case 'config-group':\r\n                // AI Provider mit mehr Details und exklusiver Auswahl\r\n                const provider = config.get('aiProvider');\r\n                const providerItem = new vscode.TreeItem(\r\n                    `KI-Provider: ${getProviderDisplayName(provider)}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                providerItem.iconPath = getProviderIcon(provider);\r\n                providerItem.tooltip = `Aktueller KI-Provider für Commit-Nachrichten: ${getProviderDisplayName(provider)}`;\r\n                providerItem.command = {\r\n                    command: 'comitto.configureAIProvider',\r\n                    title: 'KI-Provider konfigurieren'\r\n                };\r\n                items.push(providerItem);\r\n\r\n                // Git-Einstellungen anzeigen\r\n                const gitSettings = config.get('gitSettings');\r\n                const commitLanguage = gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch';\r\n                const autoPushStatus = gitSettings.autoPush ? 'Mit Auto-Push' : 'Ohne Auto-Push';\r\n                const stageMode = gitSettings.stageMode === 'all' ? 'Alle Dateien stagen' : \r\n                                gitSettings.stageMode === 'specific' ? 'Spezifische Dateien stagen' :\r\n                                'Nachfragen';\r\n                \r\n                const gitItem = new vscode.TreeItem(\r\n                    `Git: ${commitLanguage}, ${autoPushStatus}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                gitItem.iconPath = new vscode.ThemeIcon('git-merge');\r\n                gitItem.tooltip = `Branch: ${gitSettings.branch || 'Aktuell'}, Sprache: ${gitSettings.commitMessageLanguage}, Stil: ${gitSettings.commitMessageStyle}, Stage-Modus: ${stageMode}`;\r\n                gitItem.command = {\r\n                    command: 'comitto.openSettings',\r\n                    title: 'Git-Einstellungen bearbeiten'\r\n                };\r\n                items.push(gitItem);\r\n\r\n                // Trigger-Regeln mit mehr Details\r\n                const rules = config.get('triggerRules');\r\n                let triggerDescription = `${rules.fileCountThreshold} Dateien / ${rules.minChangeCount} Änderungen`;\r\n                \r\n                // Aktivierte Trigger anzeigen\r\n                const activeTriggers = [];\r\n                if (rules.onSave) activeTriggers.push('Bei Speichern');\r\n                if (rules.onInterval) activeTriggers.push(`Alle ${rules.intervalMinutes}min`);\r\n                if (rules.onBranchSwitch) activeTriggers.push('Bei Branch-Wechsel');\r\n                \r\n                if (activeTriggers.length > 0) {\r\n                    triggerDescription += ` (${activeTriggers.join(', ')})`;\r\n                }\r\n                \r\n                const rulesItem = new vscode.TreeItem(\r\n                    `Trigger: ${triggerDescription}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                rulesItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n                rulesItem.tooltip = `Commit bei ${rules.fileCountThreshold} Dateien, ${rules.minChangeCount} Änderungen oder nach ${rules.timeThresholdMinutes} Minuten\\nAktive Trigger: ${activeTriggers.join(', ')}`;\r\n                rulesItem.command = {\r\n                    command: 'comitto.configureTriggers',\r\n                    title: 'Trigger konfigurieren'\r\n                };\r\n                items.push(rulesItem);\r\n                break;\r\n\r\n            case 'action-group':\r\n                // Manuellen Commit-Button hinzufügen\r\n                const manualCommitItem = new vscode.TreeItem(\r\n                    'Manuellen Commit ausführen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                manualCommitItem.iconPath = new vscode.ThemeIcon('git-commit');\r\n                manualCommitItem.tooltip = 'Führt einen manuellen Commit mit KI-generierter Nachricht aus';\r\n                manualCommitItem.command = {\r\n                    command: 'comitto.performManualCommit',\r\n                    title: 'Manuellen Commit ausführen'\r\n                };\r\n                items.push(manualCommitItem);\r\n\r\n                // Staging-Buttons hinzufügen\r\n                const stageAllItem = new vscode.TreeItem(\r\n                    'Alle Änderungen stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageAllItem.iconPath = new vscode.ThemeIcon('add');\r\n                stageAllItem.tooltip = 'Stagt alle geänderten Dateien für den nächsten Commit';\r\n                stageAllItem.command = {\r\n                    command: 'comitto.stageAll',\r\n                    title: 'Alle Änderungen stagen'\r\n                };\r\n                items.push(stageAllItem);\r\n\r\n                const stageSelectedItem = new vscode.TreeItem(\r\n                    'Ausgewählte Dateien stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageSelectedItem.iconPath = new vscode.ThemeIcon('checklist');\r\n                stageSelectedItem.tooltip = 'Erlaubt die Auswahl bestimmter Dateien zum Stagen';\r\n                stageSelectedItem.command = {\r\n                    command: 'comitto.stageSelected',\r\n                    title: 'Ausgewählte Dateien stagen'\r\n                };\r\n                items.push(stageSelectedItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Einstellungen in der Seitenleiste\r\n * Verbesserte Implementierung mit visuellen Verbesserungen und logischer Gruppierung\r\n */\r\nclass SettingsViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            return this._getSubSettings(element);\r\n        }\r\n\r\n        // Hauptkategorien für Einstellungen mit verbesserten Icons und Beschreibungen\r\n        const items = [];\r\n\r\n        // KI-Provider-Einstellungen\r\n        const aiItem = new vscode.TreeItem(\r\n            'KI-Provider-Einstellungen',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        aiItem.contextValue = 'ai-provider';\r\n        aiItem.iconPath = new vscode.ThemeIcon('symbol-enum');\r\n        aiItem.tooltip = 'Konfiguration der KI-Provider für die Generierung von Commit-Nachrichten';\r\n        items.push(aiItem);\r\n\r\n        // Trigger-Einstellungen\r\n        const triggerItem = new vscode.TreeItem(\r\n            'Trigger-Regeln',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        triggerItem.contextValue = 'trigger-rules';\r\n        triggerItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n        triggerItem.tooltip = 'Konfiguration der Auslöser für automatische Commits';\r\n        items.push(triggerItem);\r\n\r\n        // Git-Einstellungen\r\n        const gitItem = new vscode.TreeItem(\r\n            'Git-Einstellungen',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        gitItem.contextValue = 'git-settings';\r\n        gitItem.iconPath = new vscode.ThemeIcon('git-merge');\r\n        gitItem.tooltip = 'Konfiguration von Git-bezogenen Einstellungen für Commits';\r\n        items.push(gitItem);\r\n\r\n        // Prompt-Vorlage\r\n        const promptItem = new vscode.TreeItem(\r\n            'Prompt-Vorlage',\r\n            vscode.TreeItemCollapsibleState.None\r\n        );\r\n        promptItem.contextValue = 'prompt-template';\r\n        promptItem.iconPath = new vscode.ThemeIcon('edit');\r\n        promptItem.tooltip = 'Anpassung der Vorlage für die Generierung von Commit-Nachrichten';\r\n        promptItem.command = {\r\n            command: 'comitto.editPromptTemplate',\r\n            title: 'Prompt-Vorlage bearbeiten'\r\n        };\r\n        items.push(promptItem);\r\n\r\n        // UI-Einstellungen\r\n        const uiItem = new vscode.TreeItem(\r\n            'Benutzeroberfläche',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        uiItem.contextValue = 'ui-settings';\r\n        uiItem.iconPath = new vscode.ThemeIcon('layout');\r\n        uiItem.tooltip = 'Einstellungen für die Benutzeroberfläche und Benachrichtigungen';\r\n        items.push(uiItem);\r\n\r\n        // Benachrichtigungs-Einstellungen\r\n        const notificationItem = new vscode.TreeItem(\r\n            'Benachrichtigungen',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        notificationItem.contextValue = 'notification-settings';\r\n        notificationItem.iconPath = new vscode.ThemeIcon('bell');\r\n        notificationItem.tooltip = 'Konfiguration von Benachrichtigungen und Meldungen';\r\n        items.push(notificationItem);\r\n\r\n        return items;\r\n    }\r\n\r\n    async _getSubSettings(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'ai-provider':\r\n                // KI-Provider auswählen\r\n                const aiProvider = config.get('aiProvider');\r\n                const providerItem = new vscode.TreeItem(`Aktiver Provider: ${getProviderDisplayName(aiProvider)}`);\r\n                providerItem.iconPath = getProviderIcon(aiProvider);\r\n                providerItem.tooltip = 'Wählt den KI-Provider für die Generierung von Commit-Nachrichten aus';\r\n                providerItem.command = {\r\n                    command: 'comitto.selectAiProvider',\r\n                    title: 'KI-Provider auswählen'\r\n                };\r\n                items.push(providerItem);\r\n\r\n                // Provider-spezifische Einstellungen basierend auf dem ausgewählten Provider\r\n                if (aiProvider === 'ollama') {\r\n                    const ollamaEndpoint = config.get('ollama.endpoint');\r\n                    const ollamaEndpointItem = new vscode.TreeItem(`Ollama-Endpunkt: ${ollamaEndpoint}`);\r\n                    ollamaEndpointItem.iconPath = new vscode.ThemeIcon('link');\r\n                    ollamaEndpointItem.tooltip = 'Konfiguriert den API-Endpunkt für den Ollama-Dienst';\r\n                    ollamaEndpointItem.command = {\r\n                        command: 'comitto.configureOllamaSettings',\r\n                        title: 'Ollama-Einstellungen konfigurieren'\r\n                    };\r\n                    items.push(ollamaEndpointItem);\r\n\r\n                    const ollamaModel = config.get('ollama.model');\r\n                    const ollamaModelItem = new vscode.TreeItem(`Ollama-Modell: ${ollamaModel}`);\r\n                    ollamaModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    ollamaModelItem.tooltip = 'Wählt das zu verwendende Ollama-Modell aus';\r\n                    ollamaModelItem.command = {\r\n                        command: 'comitto.configureOllamaSettings',\r\n                        title: 'Ollama-Einstellungen konfigurieren'\r\n                    };\r\n                    items.push(ollamaModelItem);\r\n                } else if (aiProvider === 'openai') {\r\n                    const openaiModel = config.get('openai.model');\r\n                    const openaiModelItem = new vscode.TreeItem(`OpenAI-Modell: ${openaiModel}`);\r\n                    openaiModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    openaiModelItem.tooltip = 'Wählt das zu verwendende OpenAI-Modell aus';\r\n                    openaiModelItem.command = {\r\n                        command: 'comitto.selectOpenAIModel',\r\n                        title: 'OpenAI-Modell auswählen'\r\n                    };\r\n                    items.push(openaiModelItem);\r\n\r\n                    const hasKey = config.get('openai.apiKey') !== '';\r\n                    const openaiKeyItem = new vscode.TreeItem(`API-Schlüssel: ${hasKey ? 'Gesetzt' : 'Nicht gesetzt'}`);\r\n                    openaiKeyItem.iconPath = new vscode.ThemeIcon(hasKey ? 'key' : 'warning');\r\n                    openaiKeyItem.tooltip = 'Konfiguriert den API-Schlüssel für OpenAI';\r\n                    openaiKeyItem.command = {\r\n                        command: 'comitto.editOpenAIKey',\r\n                        title: 'OpenAI-API-Schlüssel bearbeiten'\r\n                    };\r\n                    items.push(openaiKeyItem);\r\n                } else if (aiProvider === 'anthropic') {\r\n                    const anthropicModel = config.get('anthropic.model');\r\n                    const anthropicModelItem = new vscode.TreeItem(`Anthropic-Modell: ${anthropicModel}`);\r\n                    anthropicModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    anthropicModelItem.tooltip = 'Wählt das zu verwendende Anthropic-Modell aus';\r\n                    anthropicModelItem.command = {\r\n                        command: 'comitto.selectAnthropicModel',\r\n                        title: 'Anthropic-Modell auswählen'\r\n                    };\r\n                    items.push(anthropicModelItem);\r\n\r\n                    const hasKey = config.get('anthropic.apiKey') !== '';\r\n                    const anthropicKeyItem = new vscode.TreeItem(`API-Schlüssel: ${hasKey ? 'Gesetzt' : 'Nicht gesetzt'}`);\r\n                    anthropicKeyItem.iconPath = new vscode.ThemeIcon(hasKey ? 'key' : 'warning');\r\n                    anthropicKeyItem.tooltip = 'Konfiguriert den API-Schlüssel für Anthropic';\r\n                    anthropicKeyItem.command = {\r\n                        command: 'comitto.editAnthropicKey',\r\n                        title: 'Anthropic-API-Schlüssel bearbeiten'\r\n                    };\r\n                    items.push(anthropicKeyItem);\r\n                }\r\n                break;\r\n\r\n            case 'trigger-rules':\r\n                const rules = config.get('triggerRules');\r\n                \r\n                // File Count Threshold\r\n                const fileCountItem = new vscode.TreeItem(\r\n                    `Dateianzahl-Schwellenwert: ${rules.fileCountThreshold}`\r\n                );\r\n                fileCountItem.iconPath = new vscode.ThemeIcon('files');\r\n                fileCountItem.tooltip = 'Die Anzahl an Dateien, die für einen automatischen Commit geändert sein müssen';\r\n                fileCountItem.command = {\r\n                    command: 'comitto.editFileCountThreshold',\r\n                    title: 'Dateianzahl-Schwellenwert bearbeiten'\r\n                };\r\n                items.push(fileCountItem);\r\n\r\n                // Min Change Count\r\n                const changeCountItem = new vscode.TreeItem(\r\n                    `Änderungsanzahl-Schwellenwert: ${rules.minChangeCount}`\r\n                );\r\n                changeCountItem.iconPath = new vscode.ThemeIcon('edit');\r\n                changeCountItem.tooltip = 'Die minimale Anzahl an Änderungen für einen automatischen Commit';\r\n                changeCountItem.command = {\r\n                    command: 'comitto.editMinChangeCount',\r\n                    title: 'Änderungsanzahl-Schwellenwert bearbeiten'\r\n                };\r\n                items.push(changeCountItem);\r\n\r\n                // Time Threshold\r\n                const timeItem = new vscode.TreeItem(\r\n                    `Zeit-Schwellenwert: ${rules.timeThresholdMinutes} Minuten`\r\n                );\r\n                timeItem.iconPath = new vscode.ThemeIcon('watch');\r\n                timeItem.tooltip = 'Die Zeitspanne in Minuten, nach der ein Commit ausgelöst wird';\r\n                timeItem.command = {\r\n                    command: 'comitto.editTimeThreshold',\r\n                    title: 'Zeit-Schwellenwert bearbeiten'\r\n                };\r\n                items.push(timeItem);\r\n\r\n                // Trigger Options\r\n                const triggerOptionsItem = new vscode.TreeItem('Trigger-Optionen');\r\n                triggerOptionsItem.iconPath = new vscode.ThemeIcon('settings');\r\n                \r\n                // On Save Trigger\r\n                const onSaveItem = new vscode.TreeItem(\r\n                    `Bei Speichern: ${rules.onSave ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onSaveItem.iconPath = new vscode.ThemeIcon(rules.onSave ? 'check' : 'x');\r\n                onSaveItem.command = {\r\n                    command: 'comitto.toggleOnSave',\r\n                    title: 'Speichern-Trigger umschalten'\r\n                };\r\n                items.push(onSaveItem);\r\n\r\n                // On Interval Trigger\r\n                const onIntervalItem = new vscode.TreeItem(\r\n                    `Bei Intervall: ${rules.onInterval ? `Aktiviert (${rules.intervalMinutes}min)` : 'Deaktiviert'}`\r\n                );\r\n                onIntervalItem.iconPath = new vscode.ThemeIcon(rules.onInterval ? 'check' : 'x');\r\n                onIntervalItem.command = {\r\n                    command: 'comitto.toggleOnInterval',\r\n                    title: 'Intervall-Trigger umschalten'\r\n                };\r\n                items.push(onIntervalItem);\r\n\r\n                // On Branch Switch\r\n                const onBranchItem = new vscode.TreeItem(\r\n                    `Bei Branch-Wechsel: ${rules.onBranchSwitch ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onBranchItem.iconPath = new vscode.ThemeIcon(rules.onBranchSwitch ? 'check' : 'x');\r\n                onBranchItem.command = {\r\n                    command: 'comitto.toggleOnBranchSwitch',\r\n                    title: 'Branch-Wechsel-Trigger umschalten'\r\n                };\r\n                items.push(onBranchItem);\r\n                \r\n                // File Patterns\r\n                const filePatternsText = rules.filePatterns.length > 0 \r\n                    ? rules.filePatterns.join(', ')\r\n                    : '(Keine)';\r\n                const filePatternsItem = new vscode.TreeItem(\r\n                    `Dateimuster: ${filePatternsText.length > 30 ? filePatternsText.substring(0, 30) + '...' : filePatternsText}`\r\n                );\r\n                filePatternsItem.iconPath = new vscode.ThemeIcon('filter');\r\n                filePatternsItem.tooltip = `Aktuell überwachte Dateimuster: ${rules.filePatterns.join(', ')}`;\r\n                filePatternsItem.command = {\r\n                    command: 'comitto.editFilePatterns',\r\n                    title: 'Dateimuster bearbeiten'\r\n                };\r\n                items.push(filePatternsItem);\r\n                break;\r\n\r\n            case 'git-settings':\r\n                const gitSettings = config.get('gitSettings');\r\n                \r\n                // Commit Message Language\r\n                const languageItem = new vscode.TreeItem(\r\n                    `Commit-Sprache: ${gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch'}`\r\n                );\r\n                languageItem.iconPath = new vscode.ThemeIcon('globe');\r\n                languageItem.tooltip = 'Die Sprache, in der die Commit-Nachrichten generiert werden';\r\n                languageItem.command = {\r\n                    command: 'comitto.selectCommitLanguage',\r\n                    title: 'Commit-Sprache auswählen'\r\n                };\r\n                items.push(languageItem);\r\n                \r\n                // Auto Push\r\n                const autoPushItem = new vscode.TreeItem(\r\n                    `Auto-Push: ${gitSettings.autoPush ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                autoPushItem.iconPath = new vscode.ThemeIcon(gitSettings.autoPush ? 'cloud-upload' : 'x');\r\n                autoPushItem.tooltip = 'Ob nach einem Commit automatisch gepusht werden soll';\r\n                autoPushItem.command = {\r\n                    command: 'comitto.toggleAutoPush',\r\n                    title: 'Auto-Push umschalten'\r\n                };\r\n                items.push(autoPushItem);\r\n                \r\n                // Branch\r\n                const branchItem = new vscode.TreeItem(\r\n                    `Branch: ${gitSettings.branch || 'Aktuell'}`\r\n                );\r\n                branchItem.iconPath = new vscode.ThemeIcon('git-branch');\r\n                branchItem.tooltip = 'Der für Commits zu verwendende Branch (leer für aktuellen Branch)';\r\n                branchItem.command = {\r\n                    command: 'comitto.editBranch',\r\n                    title: 'Branch bearbeiten'\r\n                };\r\n                items.push(branchItem);\r\n                \r\n                // Commit Message Style\r\n                const styleItem = new vscode.TreeItem(\r\n                    `Commit-Stil: ${gitSettings.commitMessageStyle === 'conventional' ? 'Conventional' : 'Gitmoji'}`\r\n                );\r\n                styleItem.iconPath = new vscode.ThemeIcon('symbol-string');\r\n                styleItem.tooltip = 'Der Stil der generierten Commit-Nachrichten';\r\n                styleItem.command = {\r\n                    command: 'comitto.selectCommitStyle',\r\n                    title: 'Commit-Stil auswählen'\r\n                };\r\n                items.push(styleItem);\r\n                \r\n                // Stage Mode\r\n                const stageMode = gitSettings.stageMode === 'all' ? 'Alle Dateien' : \r\n                                gitSettings.stageMode === 'specific' ? 'Spezifische Dateien' :\r\n                                'Nachfragen';\r\n                const stageModeItem = new vscode.TreeItem(\r\n                    `Stage-Modus: ${stageMode}`\r\n                );\r\n                stageModeItem.iconPath = new vscode.ThemeIcon('staged');\r\n                stageModeItem.tooltip = 'Wie Dateien für Commits gestaged werden sollen';\r\n                stageModeItem.command = {\r\n                    command: 'comitto.selectStageMode',\r\n                    title: 'Stage-Modus auswählen'\r\n                };\r\n                items.push(stageModeItem);\r\n                \r\n                // Staging Patterns (if mode is 'specific')\r\n                if (gitSettings.stageMode === 'specific') {\r\n                    const patternsText = gitSettings.specificStagingPatterns.length > 0 \r\n                        ? gitSettings.specificStagingPatterns.join(', ')\r\n                        : '(Keine)';\r\n                    const stagingPatternsItem = new vscode.TreeItem(\r\n                        `Staging-Muster: ${patternsText.length > 30 ? patternsText.substring(0, 30) + '...' : patternsText}`\r\n                    );\r\n                    stagingPatternsItem.iconPath = new vscode.ThemeIcon('filter');\r\n                    stagingPatternsItem.tooltip = `Dateimuster für spezifisches Staging: ${gitSettings.specificStagingPatterns.join(', ')}`;\r\n                    stagingPatternsItem.command = {\r\n                        command: 'comitto.editStagingPatterns',\r\n                        title: 'Staging-Muster bearbeiten'\r\n                    };\r\n                    items.push(stagingPatternsItem);\r\n                }\r\n                \r\n                // Use Gitignore\r\n                const useGitignore = gitSettings.useGitignore !== undefined ? gitSettings.useGitignore : true;\r\n                const gitignoreItem = new vscode.TreeItem(\r\n                    `Gitignore beachten: ${useGitignore ? 'Ja' : 'Nein'}`\r\n                );\r\n                gitignoreItem.iconPath = new vscode.ThemeIcon(useGitignore ? 'check' : 'x');\r\n                gitignoreItem.tooltip = 'Ob die .gitignore-Datei bei der Überwachung beachtet werden soll';\r\n                gitignoreItem.command = {\r\n                    command: 'comitto.toggleUseGitignore',\r\n                    title: 'Gitignore-Verwendung umschalten'\r\n                };\r\n                items.push(gitignoreItem);\r\n                break;\r\n\r\n            case 'ui-settings':\r\n                const uiSettings = config.get('uiSettings');\r\n                \r\n                // Simple Mode\r\n                const simpleModeItem = new vscode.TreeItem(\r\n                    `Einfacher Modus: ${uiSettings.simpleMode ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                simpleModeItem.iconPath = new vscode.ThemeIcon(uiSettings.simpleMode ? 'check' : 'x');\r\n                simpleModeItem.tooltip = 'Ob die vereinfachte Benutzeroberfläche verwendet werden soll';\r\n                simpleModeItem.command = {\r\n                    command: 'comitto.toggleSimpleMode',\r\n                    title: 'Einfachen Modus umschalten'\r\n                };\r\n                items.push(simpleModeItem);\r\n                \r\n                // Confirm Before Commit\r\n                const confirmItem = new vscode.TreeItem(\r\n                    `Bestätigung vor Commit: ${uiSettings.confirmBeforeCommit ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                confirmItem.iconPath = new vscode.ThemeIcon(uiSettings.confirmBeforeCommit ? 'check' : 'x');\r\n                confirmItem.tooltip = 'Ob vor einem Commit eine Bestätigung angefordert werden soll';\r\n                confirmItem.command = {\r\n                    command: 'comitto.toggleConfirmBeforeCommit',\r\n                    title: 'Commit-Bestätigung umschalten'\r\n                };\r\n                items.push(confirmItem);\r\n                \r\n                // Show Notifications\r\n                const notifyItem = new vscode.TreeItem(\r\n                    `Benachrichtigungen anzeigen: ${uiSettings.showNotifications ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                notifyItem.iconPath = new vscode.ThemeIcon(uiSettings.showNotifications ? 'check' : 'x');\r\n                notifyItem.tooltip = 'Ob Benachrichtigungen angezeigt werden sollen';\r\n                notifyItem.command = {\r\n                    command: 'comitto.toggleShowNotifications',\r\n                    title: 'Benachrichtigungen umschalten'\r\n                };\r\n                items.push(notifyItem);\r\n                \r\n                // Theme\r\n                const themeItem = new vscode.TreeItem(\r\n                    `Farbschema: ${getThemeLabel(uiSettings.theme)}`\r\n                );\r\n                themeItem.iconPath = new vscode.ThemeIcon('symbol-color');\r\n                themeItem.tooltip = 'Das zu verwendende Farbschema';\r\n                themeItem.command = {\r\n                    command: 'comitto.selectTheme',\r\n                    title: 'Farbschema auswählen'\r\n                };\r\n                items.push(themeItem);\r\n                break;\r\n\r\n            case 'notification-settings':\r\n                const notifications = config.get('notifications');\r\n                \r\n                // On Commit\r\n                const onCommitItem = new vscode.TreeItem(\r\n                    `Bei Commit: ${notifications.onCommit ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onCommitItem.iconPath = new vscode.ThemeIcon(notifications.onCommit ? 'check' : 'x');\r\n                onCommitItem.tooltip = 'Ob Benachrichtigungen bei erfolgreichen Commits angezeigt werden sollen';\r\n                onCommitItem.command = {\r\n                    command: 'comitto.toggleNotificationOnCommit',\r\n                    title: 'Commit-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onCommitItem);\r\n                \r\n                // On Push\r\n                const onPushItem = new vscode.TreeItem(\r\n                    `Bei Push: ${notifications.onPush ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onPushItem.iconPath = new vscode.ThemeIcon(notifications.onPush ? 'check' : 'x');\r\n                onPushItem.tooltip = 'Ob Benachrichtigungen bei erfolgreichen Pushes angezeigt werden sollen';\r\n                onPushItem.command = {\r\n                    command: 'comitto.toggleNotificationOnPush',\r\n                    title: 'Push-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onPushItem);\r\n                \r\n                // On Error\r\n                const onErrorItem = new vscode.TreeItem(\r\n                    `Bei Fehler: ${notifications.onError ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onErrorItem.iconPath = new vscode.ThemeIcon(notifications.onError ? 'check' : 'x');\r\n                onErrorItem.tooltip = 'Ob Benachrichtigungen bei Fehlern angezeigt werden sollen';\r\n                onErrorItem.command = {\r\n                    command: 'comitto.toggleNotificationOnError',\r\n                    title: 'Fehler-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onErrorItem);\r\n                \r\n                // On Trigger Fired\r\n                const onTriggerItem = new vscode.TreeItem(\r\n                    `Bei Trigger-Auslösung: ${notifications.onTriggerFired ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onTriggerItem.iconPath = new vscode.ThemeIcon(notifications.onTriggerFired ? 'check' : 'x');\r\n                onTriggerItem.tooltip = 'Ob Benachrichtigungen bei Trigger-Auslösungen angezeigt werden sollen';\r\n                onTriggerItem.command = {\r\n                    command: 'comitto.toggleNotificationOnTriggerFired',\r\n                    title: 'Trigger-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onTriggerItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Schnellaktionen in der Seitenleiste\r\n * Verbesserte Implementierung mit visuellen Verbesserungen und logischer Gruppierung\r\n */\r\nclass QuickActionsViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            return this._getSubActions(element);\r\n        }\r\n\r\n        // Hauptgruppen für Schnellaktionen\r\n        const items = [];\r\n\r\n        // Commit-Aktionen\r\n        const commitGroup = new vscode.TreeItem(\r\n            'Commit-Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        commitGroup.contextValue = 'commit-actions';\r\n        commitGroup.iconPath = new vscode.ThemeIcon('git-commit');\r\n        items.push(commitGroup);\r\n\r\n        // Git-Aktionen\r\n        const gitGroup = new vscode.TreeItem(\r\n            'Git-Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        gitGroup.contextValue = 'git-actions';\r\n        gitGroup.iconPath = new vscode.ThemeIcon('source-control');\r\n        items.push(gitGroup);\r\n\r\n        // Einstellungs-Aktionen\r\n        const configGroup = new vscode.TreeItem(\r\n            'Einstellungs-Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        configGroup.contextValue = 'config-actions';\r\n        configGroup.iconPath = new vscode.ThemeIcon('gear');\r\n        items.push(configGroup);\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Liefert Unterelemente für gruppierte Aktionen\r\n     * @param {vscode.TreeItem} element Das Übergeordnete Element\r\n     * @returns {Promise<vscode.TreeItem[]>} Liste der Unterelemente\r\n     */\r\n    async _getSubActions(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'commit-actions':\r\n                // Comitto aktivieren/deaktivieren\r\n                const toggleItem = new vscode.TreeItem(\r\n                    `Comitto ${enabled ? 'deaktivieren' : 'aktivieren'}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                toggleItem.iconPath = new vscode.ThemeIcon(enabled ? 'circle-slash' : 'check');\r\n                toggleItem.tooltip = enabled ? 'Deaktiviert die automatischen Commits' : 'Aktiviert die automatischen Commits';\r\n                toggleItem.command = {\r\n                    command: 'comitto.toggleAutoCommit',\r\n                    title: `Comitto ${enabled ? 'deaktivieren' : 'aktivieren'}`\r\n                };\r\n                items.push(toggleItem);\r\n\r\n                // Manueller Commit\r\n                const manualCommitItem = new vscode.TreeItem(\r\n                    'Manuellen Commit ausführen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                manualCommitItem.iconPath = new vscode.ThemeIcon('git-commit');\r\n                manualCommitItem.tooltip = 'Führt einen manuellen Commit mit KI-generierter Nachricht aus';\r\n                manualCommitItem.command = {\r\n                    command: 'comitto.performManualCommit',\r\n                    title: 'Manuellen Commit ausführen'\r\n                };\r\n                items.push(manualCommitItem);\r\n                break;\r\n\r\n            case 'git-actions':\r\n                // Alle Änderungen stagen\r\n                const stageAllItem = new vscode.TreeItem(\r\n                    'Alle Änderungen stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageAllItem.iconPath = new vscode.ThemeIcon('add');\r\n                stageAllItem.tooltip = 'Stagt alle geänderten Dateien für den nächsten Commit';\r\n                stageAllItem.command = {\r\n                    command: 'comitto.stageAll',\r\n                    title: 'Alle Änderungen stagen'\r\n                };\r\n                items.push(stageAllItem);\r\n\r\n                // Ausgewählte Dateien stagen\r\n                const stageSelectedItem = new vscode.TreeItem(\r\n                    'Ausgewählte Dateien stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageSelectedItem.iconPath = new vscode.ThemeIcon('checklist');\r\n                stageSelectedItem.tooltip = 'Erlaubt die Auswahl bestimmter Dateien zum Stagen';\r\n                stageSelectedItem.command = {\r\n                    command: 'comitto.stageSelected',\r\n                    title: 'Ausgewählte Dateien stagen'\r\n                };\r\n                items.push(stageSelectedItem);\r\n\r\n                // Git-Einstellungen bearbeiten\r\n                const gitSettingsItem = new vscode.TreeItem(\r\n                    'Git-Einstellungen bearbeiten',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                gitSettingsItem.iconPath = new vscode.ThemeIcon('gear');\r\n                gitSettingsItem.tooltip = 'Öffnet die Git-Einstellungen zur Bearbeitung';\r\n                gitSettingsItem.command = {\r\n                    command: 'comitto.openSettings',\r\n                    title: 'Git-Einstellungen bearbeiten'\r\n                };\r\n                items.push(gitSettingsItem);\r\n                break;\r\n\r\n            case 'config-actions':\r\n                // KI-Provider konfigurieren\r\n                const configAIItem = new vscode.TreeItem(\r\n                    'KI-Provider konfigurieren',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                configAIItem.iconPath = new vscode.ThemeIcon('symbol-misc');\r\n                configAIItem.tooltip = 'Öffnet die KI-Provider-Konfiguration';\r\n                configAIItem.command = {\r\n                    command: 'comitto.configureAIProvider',\r\n                    title: 'KI-Provider konfigurieren'\r\n                };\r\n                items.push(configAIItem);\r\n\r\n                // Trigger konfigurieren\r\n                const configTriggersItem = new vscode.TreeItem(\r\n                    'Trigger konfigurieren',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                configTriggersItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n                configTriggersItem.tooltip = 'Öffnet die Trigger-Konfiguration';\r\n                configTriggersItem.command = {\r\n                    command: 'comitto.configureTriggers',\r\n                    title: 'Trigger konfigurieren'\r\n                };\r\n                items.push(configTriggersItem);\r\n\r\n                // Einfache UI anzeigen\r\n                const simpleUIItem = new vscode.TreeItem(\r\n                    'Einfache Benutzeroberfläche öffnen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                simpleUIItem.iconPath = new vscode.ThemeIcon('rocket');\r\n                simpleUIItem.tooltip = 'Öffnet die vereinfachte Benutzeroberfläche';\r\n                simpleUIItem.command = {\r\n                    command: 'comitto.showSimpleUI',\r\n                    title: 'Einfache Benutzeroberfläche öffnen'\r\n                };\r\n                items.push(simpleUIItem);\r\n\r\n                // Dashboard anzeigen\r\n                const dashboardItem = new vscode.TreeItem(\r\n                    'Dashboard anzeigen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                dashboardItem.iconPath = new vscode.ThemeIcon('dashboard');\r\n                dashboardItem.tooltip = 'Öffnet das Comitto-Dashboard';\r\n                dashboardItem.command = {\r\n                    command: 'comitto.showDashboard',\r\n                    title: 'Dashboard anzeigen'\r\n                };\r\n                items.push(dashboardItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * UI-Hilfsfunktionen\r\n */\r\n\r\n/**\r\n * Gibt einen anzeigbaren Namen für den KI-Provider zurück\r\n * @param {string} provider Provider-ID\r\n * @returns {string} Anzeigename\r\n */\r\nfunction getProviderDisplayName(provider) {\r\n    switch (provider) {\r\n        case 'ollama': return 'Ollama (lokal)';\r\n        case 'openai': return 'OpenAI';\r\n        case 'anthropic': return 'Anthropic Claude';\r\n        default: return provider;\r\n    }\r\n}\r\n\r\n/**\r\n * Gibt ein Icon für den Provider zurück\r\n * @param {string} provider Provider-ID\r\n * @returns {vscode.ThemeIcon} Icon für den Provider\r\n */\r\nfunction getProviderIcon(provider) {\r\n    switch (provider) {\r\n        case 'ollama': return new vscode.ThemeIcon('server');\r\n        case 'openai': return new vscode.ThemeIcon('rocket');\r\n        case 'anthropic': return new vscode.ThemeIcon('beaker');\r\n        default: return new vscode.ThemeIcon('symbol-misc');\r\n    }\r\n}\r\n\r\nfunction getOpenAIModelOptions() {\r\n    return [\r\n        { label: 'GPT-4o', value: 'gpt-4o' },\r\n        { label: 'GPT-4o Mini', value: 'gpt-4o-mini' },\r\n        { label: 'GPT-4', value: 'gpt-4' },\r\n        { label: 'GPT-4 Turbo', value: 'gpt-4-turbo' },\r\n        { label: 'GPT-4 (Januar 2025)', value: 'gpt-4-0125-preview' },\r\n        { label: 'GPT-4 (November 2023)', value: 'gpt-4-1106-preview' },\r\n        { label: 'GPT-4 Vision Preview', value: 'gpt-4-vision-preview' },\r\n        { label: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' },\r\n        { label: 'GPT-3.5 Turbo (Januar 2024)', value: 'gpt-3.5-turbo-0125' },\r\n        { label: 'GPT-3.5 Turbo (November 2023)', value: 'gpt-3.5-turbo-1106' }\r\n    ];\r\n}\r\n\r\n/**\r\n * Gibt ein lesbares Label für den Staging-Modus zurück\r\n * @param {string} mode Der Staging-Modus\r\n * @returns {string} Lesbares Label\r\n */\r\nfunction getStageModeLabel(mode) {\r\n    switch (mode) {\r\n        case 'all': return 'Alle Dateien stagen';\r\n        case 'specific': return 'Spezifische Dateien stagen';\r\n        case 'prompt': return 'Nachfragen';\r\n        default: return mode;\r\n    }\r\n}\r\n\r\n/**\r\n * Gibt ein lesbares Label für das Theme zurück\r\n * @param {string} theme Das Theme\r\n * @returns {string} Lesbares Label\r\n */\r\nfunction getThemeLabel(theme) {\r\n    switch (theme) {\r\n        case 'light': return 'Hell';\r\n        case 'dark': return 'Dunkel';\r\n        case 'auto': return 'Automatisch';\r\n        default: return theme;\r\n    }\r\n}\r\n\r\n/**\r\n * Gibt eine lesbare Beschreibung für den Git-Status-Code zurück\r\n * @param {string} statusCode Der Git-Status-Code\r\n * @returns {string} Lesbare Beschreibung des Status\r\n */\r\nfunction getStatusDescription(statusCode) {\r\n    const firstChar = statusCode.charAt(0);\r\n    const secondChar = statusCode.charAt(1);\r\n    \r\n    let description = '';\r\n    \r\n    // Index-Status (erster Buchstabe)\r\n    if (firstChar === 'M') description = 'Modifiziert im Index';\r\n    else if (firstChar === 'A') description = 'Zum Index hinzugefügt';\r\n    else if (firstChar === 'D') description = 'Aus Index gelöscht';\r\n    else if (firstChar === 'R') description = 'Im Index umbenannt';\r\n    else if (firstChar === 'C') description = 'Im Index kopiert';\r\n    else if (firstChar === 'U') description = 'Ungemerged im Index';\r\n    \r\n    // Working Directory Status (zweiter Buchstabe)\r\n    if (secondChar === 'M') {\r\n        if (description) description += ', modifiziert im Arbeitsverzeichnis';\r\n        else description = 'Modifiziert im Arbeitsverzeichnis';\r\n    } else if (secondChar === 'D') {\r\n        if (description) description += ', gelöscht im Arbeitsverzeichnis';\r\n        else description = 'Gelöscht im Arbeitsverzeichnis';\r\n    }\r\n    \r\n    // Untracked files\r\n    if (statusCode === '??') description = 'Nicht verfolgte Datei';\r\n    \r\n    return description || statusCode;\r\n}\r\n\r\n/**\r\n * Registriert alle UI-Komponenten\r\n * @param {vscode.ExtensionContext} context \r\n * @returns {Object} Die Provider-Instanzen\r\n */\r\nfunction registerUI(context) {\r\n    // Status-Ansicht\r\n    const statusProvider = new StatusViewProvider(context);\r\n    const statusTreeView = vscode.window.createTreeView('comitto-status', {\r\n        treeDataProvider: statusProvider,\r\n        showCollapseAll: false\r\n    });\r\n    context.subscriptions.push(statusTreeView);\r\n\r\n    // Schnellaktionen-Ansicht\r\n    const quickActionsProvider = new QuickActionsViewProvider(context);\r\n    const quickActionsTreeView = vscode.window.createTreeView('comitto-quick-actions', {\r\n        treeDataProvider: quickActionsProvider,\r\n        showCollapseAll: false\r\n    });\r\n    context.subscriptions.push(quickActionsTreeView);\r\n\r\n    // Einstellungs-Ansicht\r\n    const settingsProvider = new SettingsViewProvider(context);\r\n    const settingsTreeView = vscode.window.createTreeView('comitto-settings', {\r\n        treeDataProvider: settingsProvider,\r\n        showCollapseAll: true\r\n    });\r\n    context.subscriptions.push(settingsTreeView);\r\n\r\n    // Nach kurzer Verzögerung Refresh ausführen, um sicherzustellen, dass die UI aktualisiert wird\r\n    setTimeout(() => {\r\n        statusProvider.refresh();\r\n        quickActionsProvider.refresh();\r\n        settingsProvider.refresh();\r\n    }, 500);\r\n\r\n    // Registriere einen Event-Handler, der die Seitenleiste sichtbar macht\r\n    context.subscriptions.push(vscode.extensions.onDidChange(() => {\r\n        // Setze den Kontext, dass ein Git-Repository vorhanden ist\r\n        vscode.commands.executeCommand('setContext', 'workspaceHasGit', true);\r\n    }));\r\n\r\n    return {\r\n        statusProvider,\r\n        quickActionsProvider,\r\n        settingsProvider,\r\n        statusTreeView,\r\n        settingsTreeView,\r\n        quickActionsTreeView\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    registerUI,\r\n    StatusViewProvider,\r\n    QuickActionsViewProvider,\r\n    SettingsViewProvider,\r\n    getProviderDisplayName,\r\n    getProviderIcon,\r\n    getOpenAIModelOptions,\r\n    getStageModeLabel,\r\n    getThemeLabel,\r\n    getStatusDescription\r\n}; ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(9829);\n"],"names":["module","exports","require","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","toPrimitive","String","_toPrimitive","vscode","StatusViewProvider","context","this","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","_context","fire","element","_getChildren","_callee","items","statusGroup","configGroup","actionGroup","_getSubItems","workspace","getConfiguration","get","TreeItem","TreeItemCollapsibleState","Expanded","contextValue","iconPath","ThemeIcon","collapsibleState","_x","_getSubItems2","_callee2","config","enabled","statusItem","simpleUIItem","dashboardItem","provider","providerItem","gitSettings","commitLanguage","autoPushStatus","stageMode","gitItem","rules","triggerDescription","activeTriggers","rulesItem","manualCommitItem","stageAllItem","stageSelectedItem","_context2","t0","concat","None","tooltip","command","title","getProviderDisplayName","getProviderIcon","commitMessageLanguage","autoPush","branch","commitMessageStyle","fileCountThreshold","minChangeCount","onSave","onInterval","intervalMinutes","onBranchSwitch","join","timeThresholdMinutes","_x2","SettingsViewProvider","_getChildren2","_callee3","aiItem","triggerItem","promptItem","uiItem","notificationItem","_context3","_getSubSettings","Collapsed","_x3","_getSubSettings2","_callee4","aiProvider","ollamaEndpoint","ollamaEndpointItem","ollamaModel","ollamaModelItem","openaiModel","openaiModelItem","hasKey","openaiKeyItem","anthropicModel","anthropicModelItem","_hasKey","anthropicKeyItem","fileCountItem","changeCountItem","timeItem","onSaveItem","onIntervalItem","onBranchItem","filePatternsText","filePatternsItem","languageItem","autoPushItem","branchItem","styleItem","stageModeItem","patternsText","stagingPatternsItem","useGitignore","gitignoreItem","uiSettings","simpleModeItem","confirmItem","notifyItem","themeItem","notifications","onCommitItem","onPushItem","onErrorItem","onTriggerItem","_context4","filePatterns","substring","specificStagingPatterns","undefined","simpleMode","confirmBeforeCommit","showNotifications","getThemeLabel","theme","onCommit","onPush","onError","onTriggerFired","_x4","QuickActionsViewProvider","_getChildren3","_callee5","commitGroup","gitGroup","_context5","_getSubActions","_x5","_getSubActions2","_callee6","toggleItem","gitSettingsItem","configAIItem","configTriggersItem","_context6","_x6","registerUI","statusProvider","statusTreeView","window","createTreeView","treeDataProvider","showCollapseAll","subscriptions","quickActionsProvider","quickActionsTreeView","settingsProvider","settingsTreeView","setTimeout","refresh","extensions","onDidChange","commands","executeCommand","getOpenAIModelOptions","label","getStageModeLabel","mode","getStatusDescription","statusCode","firstChar","secondChar","description","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}