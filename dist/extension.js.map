{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://comitto/webpack/runtime/chunk loaded","webpack://comitto/webpack/runtime/startup chunk dependencies","webpack://comitto/webpack/runtime/require chunk loading","webpack://comitto/./extension.js","webpack://comitto/external node-commonjs \"os\"","webpack://comitto/external commonjs \"vscode\"","webpack://comitto/./commands.js","webpack://comitto/external node-commonjs \"tty\"","webpack://comitto/external node-commonjs \"stream\"","webpack://comitto/external node-commonjs \"assert\"","webpack://comitto/external node-commonjs \"zlib\"","webpack://comitto/external node-commonjs \"events\"","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/external node-commonjs \"https\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/external node-commonjs \"crypto\"","webpack://comitto/external node-commonjs \"url\"","webpack://comitto/external node-commonjs \"http\"","webpack://comitto/external node-commonjs \"util\"","webpack://comitto/external node-commonjs \"fs\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/runtime/ensure chunk","webpack://comitto/webpack/runtime/get javascript chunk filename","webpack://comitto/webpack/runtime/hasOwnProperty shorthand","webpack://comitto/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t__webpack_require__.e(121);\n\t__webpack_require__.e(730);\n\treturn next();\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t217: 1,\n\t606: 1\n};\n\n__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\t__webpack_require__.O();\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","const vscode = require('vscode');\nconst axios = require('axios');\nconst { exec } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst ignore = require('ignore');\nconst ui = require('./ui');\nconst commands = require('./commands');\nconst { executeGitCommand, getStatusText, ComittoError, ErrorTypes, logError, getErrorLogs, withRetry, getDiagnosticInfo, updateStatusBarProgress } = require('./utils');\nconst os = require('os');\nconst { WebviewPanel } = require('vscode');\n\n/**\n * @type {vscode.OutputChannel}\n */\nlet outputChannel;\n\n/**\n * @type {vscode.StatusBarItem}\n */\nlet statusBarItem;\n\n/**\n * @type {vscode.FileSystemWatcher}\n */\nlet fileWatcher;\n\n/**\n * @type {Set<string>}\n */\nlet changedFiles = new Set();\n\n/**\n * @type {boolean}\n */\nlet isCommitInProgress = false;\n\n/**\n * @type {Date|null}\n */\nlet lastCommitTime = null;\n\n/**\n * @type {Object}\n */\nlet gitignoreObj = null;\n\n/**\n * @type {Object}\n */\nlet uiProviders = null;\n\n/**\n * @type {NodeJS.Timeout}\n */\nlet intervalTimer = null;\n\n// Globale Variable für Debug-Logs\nlet debugLogs = [];\nconst MAX_DEBUG_LOGS = 100;\n\n/**\n * Fügt einen Eintrag zum Debug-Log hinzu\n * @param {string} message Die Nachricht\n * @param {string} type Der Typ des Logs (info, warning, error)\n */\nfunction addDebugLog(message, type = 'info') {\n    const timestamp = new Date().toISOString();\n    const logEntry = { timestamp, message, type };\n    \n    debugLogs.unshift(logEntry); // Am Anfang einfügen\n    \n    // Maximale Größe einhalten\n    if (debugLogs.length > MAX_DEBUG_LOGS) {\n        debugLogs = debugLogs.slice(0, MAX_DEBUG_LOGS);\n    }\n    \n    // In die Konsole schreiben\n    const consoleMethod = type === 'error' ? console.error : \n                         type === 'warning' ? console.warn : \n                         console.log;\n    consoleMethod(`[Comitto Debug] ${message}`);\n    \n    // Auf Webview-Updates verzichten, da dies Fehler verursacht\n    // Stattdessen werden wir die Debug-Logs beim Öffnen des Dashboards aktualisieren\n}\n\n/**\n * Verbesserte Debug-Protokollierungsfunktion\n */\nfunction debugLog(message, category = 'allgemein', level = 'info') {\n    const config = vscode.workspace.getConfiguration('comitto');\n    if (!config.get('debug')) return;\n    \n    const timestamp = new Date().toISOString();\n    const formattedMessage = `[${timestamp}] [${category}] [${level}] ${message}`;\n    \n    console.log(formattedMessage);\n    \n    // Debug-Ausgabe in Ausgabekanal\n    if (!outputChannel) {\n        outputChannel = vscode.window.createOutputChannel('Comitto Debug');\n    }\n    \n    outputChannel.appendLine(formattedMessage);\n    \n    // Bei Fehlern das Debug-Panel anzeigen\n    if (level === 'error') {\n        outputChannel.show(true);\n    }\n    \n    // Optional: In Datei protokollieren\n    try {\n        const logDir = path.join(process.env.HOME || process.env.USERPROFILE, '.comitto', 'logs');\n        if (!fs.existsSync(logDir)) {\n            fs.mkdirSync(logDir, { recursive: true });\n        }\n        \n        const logFile = path.join(logDir, `debug_${new Date().toISOString().split('T')[0]}.log`);\n        fs.appendFileSync(logFile, formattedMessage + '\\n');\n    } catch (e) {\n        console.error('Fehler beim Schreiben des Debug-Protokolls:', e);\n    }\n}\n\n/**\n * Fehlerbehandlungsfunktion für die Erweiterung\n * @param {Error|ComittoError} error - Der aufgetretene Fehler\n * @param {string} contextMessage - Kontextbezogene Nachricht\n * @param {boolean} showToUser - Ob der Fehler dem Benutzer angezeigt werden soll\n */\nasync function handleError(error, contextMessage = '', showToUser = true) {\n    // Sicherstellen, dass wir mit einem ComittoError arbeiten\n    const comittoError = error instanceof ComittoError ? error : \n        new ComittoError(\n            error.message || 'Unbekannter Fehler',\n            ErrorTypes.UNKNOWN,\n            error,\n            { context: contextMessage }\n        );\n    \n    // Fehler protokollieren\n    logError(comittoError);\n    \n    // Debug-Ausgabe\n    debugLog(\n        `Fehler: ${comittoError.message}${contextMessage ? ' - ' + contextMessage : ''}`,\n        'fehler',\n        'error'\n    );\n    \n    // Detaillierte Informationen in die Konsole schreiben\n    console.error('Detaillierter Fehler:', comittoError.toJSON());\n    \n    // Benutzerbenachrichtigung, falls erforderlich\n    if (showToUser) {\n        const viewDetailsButton = 'Details anzeigen';\n        const reportButton = 'Problem melden';\n        \n        const messagePrefix = contextMessage ? `${contextMessage}: ` : '';\n        const userMessage = await vscode.window.showErrorMessage(\n            `${messagePrefix}${comittoError.message}`, \n            viewDetailsButton,\n            reportButton\n        );\n        \n        if (userMessage === viewDetailsButton) {\n            // Details in neuem Fenster anzeigen\n            showErrorDetails(comittoError);\n        } else if (userMessage === reportButton) {\n            // Öffne GitHub Issues oder sende Fehlerbericht\n            const issueBody = encodeURIComponent(\n                `## Fehlerbeschreibung\\n${comittoError.message}\\n\\n` +\n                `## Kontext\\n${contextMessage || 'Nicht angegeben'}\\n\\n` +\n                `## Fehlerdetails\\n\\`\\`\\`json\\n${JSON.stringify(comittoError.toJSON(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                `## Diagnostische Informationen\\n\\`\\`\\`json\\n${JSON.stringify(getDiagnosticInfo(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                `## Schritte zur Reproduktion\\n\\n` +\n                `## Erwartetes Verhalten\\n\\n` +\n                `## VSCode-Version\\n${vscode.version}\\n\\n` +\n                `## Comitto-Version\\n${vscode.extensions.getExtension('publisher.comitto').packageJSON.version || 'Unbekannt'}`\n            );\n            \n            vscode.env.openExternal(\n                vscode.Uri.parse(`https://github.com/publisher/comitto/issues/new?body=${issueBody}&title=Fehler: ${encodeURIComponent(comittoError.message)}`)\n            );\n        }\n    }\n}\n\n/**\n * Zeigt detaillierte Fehlerinformationen in einem Webview-Panel an\n * @param {ComittoError} error - Der anzuzeigende Fehler\n */\nfunction showErrorDetails(error) {\n    const panel = vscode.window.createWebviewPanel(\n        'comittoErrorDetails',\n        'Comitto Fehlerdetails',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true\n        }\n    );\n    \n    const diagnosticInfo = getDiagnosticInfo();\n    \n    panel.webview.html = `\n        <!DOCTYPE html>\n        <html lang=\"de\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Comitto Fehlerdetails</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                h2 {\n                    margin-top: 20px;\n                    margin-bottom: 10px;\n                    border-bottom: 1px solid var(--vscode-editor-lineHighlightBorder);\n                    padding-bottom: 5px;\n                }\n                pre {\n                    background-color: var(--vscode-editor-background);\n                    padding: 15px;\n                    border-radius: 4px;\n                    overflow: auto;\n                }\n                .error-section {\n                    margin-bottom: 20px;\n                }\n                .label {\n                    font-weight: bold;\n                    margin-right: 10px;\n                }\n                .actions {\n                    margin-top: 20px;\n                }\n                button {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    margin-right: 10px;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n            </style>\n        </head>\n        <body>\n            <h1>Fehlerdetails</h1>\n            \n            <div class=\"error-section\">\n                <h2>Fehlerinformationen</h2>\n                <div><span class=\"label\">Typ:</span> ${error.type}</div>\n                <div><span class=\"label\">Nachricht:</span> ${error.message}</div>\n                <div><span class=\"label\">Zeitstempel:</span> ${error.timestamp.toISOString()}</div>\n            </div>\n            \n            <div class=\"error-section\">\n                <h2>Fehlerkontext</h2>\n                <pre>${JSON.stringify(error.context, null, 2)}</pre>\n            </div>\n            \n            ${error.originalError ? `\n                <div class=\"error-section\">\n                    <h2>Ursprünglicher Fehler</h2>\n                    <div><span class=\"label\">Typ:</span> ${error.originalError.name}</div>\n                    <div><span class=\"label\">Nachricht:</span> ${error.originalError.message}</div>\n                </div>\n            ` : ''}\n            \n            <div class=\"error-section\">\n                <h2>Stack-Trace</h2>\n                <pre>${error.stack}</pre>\n            </div>\n            \n            <div class=\"error-section\">\n                <h2>Diagnostische Informationen</h2>\n                <pre>${JSON.stringify(diagnosticInfo, null, 2)}</pre>\n            </div>\n            \n            <div class=\"actions\">\n                <button id=\"copyDetails\">Details kopieren</button>\n                <button id=\"reportIssue\">Problem melden</button>\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                document.getElementById('copyDetails').addEventListener('click', () => {\n                    const errorDetails = ${JSON.stringify(JSON.stringify({\n                        error: error.toJSON(),\n                        diagnosticInfo\n                    }, null, 2))};\n                    vscode.postMessage({\n                        command: 'copyToClipboard',\n                        text: errorDetails\n                    });\n                });\n                \n                document.getElementById('reportIssue').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'reportIssue',\n                        error: ${JSON.stringify(error.toJSON())}\n                    });\n                });\n            </script>\n        </body>\n        </html>\n    `;\n    \n    panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.command) {\n                case 'copyToClipboard':\n                    vscode.env.clipboard.writeText(message.text);\n                    vscode.window.showInformationMessage('Fehlerdetails wurden in die Zwischenablage kopiert');\n                    break;\n                case 'reportIssue':\n                    const issueBody = encodeURIComponent(\n                        `## Fehlerbeschreibung\\n${error.message}\\n\\n` +\n                        `## Fehlerdetails\\n\\`\\`\\`json\\n${JSON.stringify(error.toJSON(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                        `## Diagnostische Informationen\\n\\`\\`\\`json\\n${JSON.stringify(diagnosticInfo, null, 2)}\\n\\`\\`\\`\\n\\n` +\n                        `## Schritte zur Reproduktion\\n\\n` +\n                        `## Erwartetes Verhalten\\n\\n` +\n                        `## VSCode-Version\\n${vscode.version}\\n\\n` +\n                        `## Comitto-Version\\n${vscode.extensions.getExtension('publisher.comitto').packageJSON.version || 'Unbekannt'}`\n                    );\n                    \n                    vscode.env.openExternal(\n                        vscode.Uri.parse(`https://github.com/publisher/comitto/issues/new?body=${issueBody}&title=Fehler: ${encodeURIComponent(error.message)}`)\n                    );\n                    break;\n            }\n        },\n        undefined,\n        undefined\n    );\n}\n\n/**\n * Zeigt eine Liste der neuesten Fehlerprotokolle an\n */\nfunction showErrorLogs() {\n    const logs = getErrorLogs();\n    \n    const panel = vscode.window.createWebviewPanel(\n        'comittoErrorLogs',\n        'Comitto Fehlerprotokolle',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true\n        }\n    );\n    \n    panel.webview.html = `\n        <!DOCTYPE html>\n        <html lang=\"de\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Comitto Fehlerprotokolle</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                h1 {\n                    margin-bottom: 20px;\n                }\n                .log-entry {\n                    margin-bottom: 20px;\n                    padding: 15px;\n                    background-color: var(--vscode-editor-background);\n                    border-radius: 4px;\n                    border-left: 4px solid #e74c3c;\n                }\n                .log-entry-header {\n                    display: flex;\n                    justify-content: space-between;\n                    margin-bottom: 10px;\n                }\n                .log-type {\n                    font-weight: bold;\n                    color: #e74c3c;\n                }\n                .log-timestamp {\n                    color: var(--vscode-descriptionForeground);\n                }\n                .log-message {\n                    margin-bottom: 10px;\n                }\n                .log-details-button {\n                    background: none;\n                    border: 1px solid var(--vscode-button-background);\n                    color: var(--vscode-button-background);\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                }\n                .log-details {\n                    display: none;\n                    margin-top: 10px;\n                    padding: 10px;\n                    background-color: var(--vscode-editor-inactiveSelectionBackground);\n                    border-radius: 4px;\n                }\n                .log-details pre {\n                    white-space: pre-wrap;\n                    word-break: break-all;\n                }\n                .actions {\n                    margin-top: 20px;\n                }\n                button {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    margin-right: 10px;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n                .no-logs {\n                    margin: 30px 0;\n                    text-align: center;\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n            </style>\n        </head>\n        <body>\n            <h1>Fehlerprotokolle</h1>\n            \n            ${logs.length === 0 ? \n                '<div class=\"no-logs\">Keine Fehlerprotokolle vorhanden</div>' : \n                logs.map((log, index) => `\n                    <div class=\"log-entry\">\n                        <div class=\"log-entry-header\">\n                            <span class=\"log-type\">${log.type}</span>\n                            <span class=\"log-timestamp\">${log.timestamp}</span>\n                        </div>\n                        <div class=\"log-message\">${log.message}</div>\n                        <button class=\"log-details-button\" onclick=\"toggleDetails(${index})\">Details anzeigen</button>\n                        <div id=\"details-${index}\" class=\"log-details\">\n                            <pre>${JSON.stringify(log, null, 2)}</pre>\n                        </div>\n                    </div>\n                `).join('')\n            }\n            \n            <div class=\"actions\">\n                <button id=\"clearLogs\">Protokolle löschen</button>\n                <button id=\"exportLogs\">Protokolle exportieren</button>\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                function toggleDetails(index) {\n                    const details = document.getElementById('details-' + index);\n                    const button = details.previousElementSibling;\n                    \n                    if (details.style.display === 'block') {\n                        details.style.display = 'none';\n                        button.textContent = 'Details anzeigen';\n                    } else {\n                        details.style.display = 'block';\n                        button.textContent = 'Details ausblenden';\n                    }\n                }\n                \n                document.getElementById('clearLogs').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'clearLogs'\n                    });\n                });\n                \n                document.getElementById('exportLogs').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'exportLogs',\n                        logs: ${JSON.stringify(logs)}\n                    });\n                });\n            </script>\n        </body>\n        </html>\n    `;\n    \n    panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.command) {\n                case 'clearLogs':\n                    clearErrorLogs();\n                    vscode.window.showInformationMessage('Fehlerprotokolle wurden gelöscht');\n                    panel.dispose();\n                    break;\n                case 'exportLogs':\n                    vscode.window.showSaveDialog({\n                        defaultUri: vscode.Uri.file(path.join(os.homedir(), 'comitto_error_logs.json')),\n                        filters: {\n                            'JSON-Dateien': ['json']\n                        }\n                    }).then(fileUri => {\n                        if (fileUri) {\n                            fs.writeFileSync(fileUri.fsPath, JSON.stringify(message.logs, null, 2));\n                            vscode.window.showInformationMessage(`Fehlerprotokolle wurden nach ${fileUri.fsPath} exportiert`);\n                        }\n                    });\n                    break;\n            }\n        },\n        undefined,\n        undefined\n    );\n}\n\n/**\n * Hauptaktivierungsfunktion der Erweiterung.\n * @param {vscode.ExtensionContext} context\n */\nasync function activate(context) {\n    try {\n        debugLog('Comitto-Erweiterung wird aktiviert', 'aktivierung', 'info');\n        \n        addDebugLog('Die Erweiterung \"comitto\" wird aktiviert.', 'info');\n\n        // Sicherstellen, dass das Ressourcenverzeichnis existiert\n        ensureResourceDirs(context);\n\n        // UI-Komponenten registrieren\n        uiProviders = ui.registerUI(context);\n\n        // Statusleistenelement erstellen\n        statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n        statusBarItem.text = \"$(git-commit) Comitto: Initialisiere...\";\n        statusBarItem.tooltip = \"Comitto: Klicke zum Aktivieren/Deaktivieren oder manuellen Commit\";\n        statusBarItem.command = \"comitto.toggleAutoCommit\"; // Standardaktion\n        context.subscriptions.push(statusBarItem);\n        statusBarItem.show();\n\n        // Git-Status prüfen und Kontext setzen\n        const hasGit = await checkGitRepository(context);\n        vscode.commands.executeCommand('setContext', 'workspaceHasGit', hasGit);\n        \n        if (hasGit) {\n            addDebugLog('Git-Repository gefunden.', 'info');\n        } else {\n            addDebugLog('Kein Git-Repository gefunden. Einige Funktionen sind deaktiviert.', 'warning');\n        }\n\n        // Befehle zentral registrieren und Abhängigkeiten übergeben\n        commands.registerCommands(\n            context,\n            uiProviders,\n            statusBarItem,\n            setupFileWatcher,       // Funktion übergeben\n            disableFileWatcher,     // Funktion übergeben\n            performAutoCommit,      // Funktion übergeben\n            showNotification        // Funktion übergeben\n        );\n        \n        // .gitignore einlesen, wenn vorhanden und konfiguriert\n        loadGitignore();\n\n        // Initialen Status setzen und FileSystemWatcher/Timer ggf. starten\n        const config = vscode.workspace.getConfiguration('comitto');\n        if (config.get('autoCommitEnabled') && hasGit) {\n            setupFileWatcher(context);\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n            addDebugLog('Comitto wurde automatisch aktiviert.', 'info');\n        } else if (!hasGit) {\n            statusBarItem.text = \"$(warning) Comitto: Kein Git-Repo\";\n            statusBarItem.tooltip = \"Kein Git-Repository im aktuellen Workspace gefunden\";\n            statusBarItem.command = undefined; // Keine Aktion bei Klick\n        } else {\n            statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        }\n\n        // Debugging-Befehle registrieren\n        context.subscriptions.push(\n            vscode.commands.registerCommand('comitto.showErrorLogs', showErrorLogs),\n            vscode.commands.registerCommand('comitto.openDebugConsole', () => {\n                if (!outputChannel) {\n                    outputChannel = vscode.window.createOutputChannel('Comitto Debug');\n                }\n                outputChannel.show();\n            }),\n            vscode.commands.registerCommand('comitto.diagnosticInfo', async () => {\n                const info = getDiagnosticInfo();\n                const panel = vscode.window.createWebviewPanel(\n                    'comittoDiagnostics',\n                    'Comitto Diagnose',\n                    vscode.ViewColumn.One,\n                    { enableScripts: true }\n                );\n                \n                panel.webview.html = `\n                    <!DOCTYPE html>\n                    <html lang=\"de\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <title>Comitto Diagnose</title>\n                        <style>\n                            body { padding: 20px; font-family: var(--vscode-font-family); }\n                            pre { background-color: var(--vscode-editor-background); padding: 15px; }\n                            button {\n                                background-color: var(--vscode-button-background);\n                                color: var(--vscode-button-foreground);\n                                border: none;\n                                padding: 8px 16px;\n                                border-radius: 4px;\n                                cursor: pointer;\n                                margin-right: 10px;\n                            }\n                        </style>\n                    </head>\n                    <body>\n                        <h1>Comitto Diagnose</h1>\n                        <pre>${JSON.stringify(info, null, 2)}</pre>\n                        <button id=\"copyBtn\">In Zwischenablage kopieren</button>\n                        \n                        <script>\n                            const vscode = acquireVsCodeApi();\n                            document.getElementById('copyBtn').addEventListener('click', () => {\n                                vscode.postMessage({ command: 'copy', data: ${JSON.stringify(JSON.stringify(info, null, 2))} });\n                            });\n                        </script>\n                    </body>\n                    </html>\n                `;\n                \n                panel.webview.onDidReceiveMessage(message => {\n                    if (message.command === 'copy') {\n                        vscode.env.clipboard.writeText(message.data);\n                        vscode.window.showInformationMessage('Diagnostische Informationen in die Zwischenablage kopiert');\n                    }\n                });\n            })\n        );\n        \n        // Automatische Hintergrundüberwachung einrichten\n        setupAutoBackgroundMonitoring(context);\n        \n        // Eventuell kurze Verzögerung für initiale UI-Aktualisierung\n        setTimeout(() => {\n            if (uiProviders) {\n                uiProviders.statusProvider.refresh();\n                uiProviders.settingsProvider.refresh();\n                uiProviders.quickActionsProvider.refresh();\n            }\n        }, 1500);\n\n        // Willkommensnachricht anzeigen (einmalig)\n        showWelcomeNotification(context);\n\n        debugLog('Comitto-Erweiterung erfolgreich aktiviert', 'aktivierung', 'info');\n    } catch (error) {\n        handleError(error, 'Fehler beim Aktivieren der Erweiterung', true);\n    }\n}\n\n/**\n * Prüft, ob im Workspace ein Git-Repository vorhanden ist.\n * @param {vscode.ExtensionContext} context\n * @returns {Promise<boolean>}\n */\nasync function checkGitRepository(context) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders || workspaceFolders.length === 0) {\n        return false;\n    }\n    const repoPath = workspaceFolders[0].uri.fsPath;\n    try {\n        await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\n        console.log('Git-Repository gefunden.');\n        return true;\n    } catch (error) {\n        console.log('Kein Git-Repository gefunden oder Git nicht verfügbar.');\n        return false;\n    }\n}\n\n/**\n * Stellt sicher, dass die notwendigen Ressourcenverzeichnisse existieren.\n * @param {vscode.ExtensionContext} context \n */\nfunction ensureResourceDirs(context) {\n    const dirsToEnsure = ['resources', 'resources/ui'];\n    dirsToEnsure.forEach(dir => {\n        const dirPath = vscode.Uri.joinPath(context.extensionUri, dir).fsPath;\n        if (!fs.existsSync(dirPath)) {\n            try {\n                fs.mkdirSync(dirPath, { recursive: true });\n                console.log(`Verzeichnis erstellt: ${dirPath}`);\n            } catch (error) {\n                console.error(`Fehler beim Erstellen des Verzeichnisses ${dirPath}:`, error);\n            }\n        }\n    });\n}\n\n/**\n * Zeigt eine Willkommensnachricht beim ersten Start nach einer Installation/Update.\n * @param {vscode.ExtensionContext} context\n */\nfunction showWelcomeNotification(context) {\n    const currentVersion = context.extension.packageJSON.version;\n    const previousVersion = context.globalState.get('comitto.version');\n\n    if (previousVersion !== currentVersion) {\n        // Nach erstem Start oder Update anzeigen\n        vscode.window.showInformationMessage(\n            `Comitto v${currentVersion} wurde aktiviert! Konfigurieren Sie es über die Seitenleiste.`,\n            'Seitenleiste öffnen', 'Changelog anzeigen'\n        ).then(selection => {\n            if (selection === 'Seitenleiste öffnen') {\n                vscode.commands.executeCommand('workbench.view.extension.comitto-sidebar');\n            } else if (selection === 'Changelog anzeigen') {\n                // Prüfen, ob die Nachricht bereits angezeigt wurde\n                const hasShownWelcome = context.globalState.get('comitto.hasShownWelcome', false);\n                if (!hasShownWelcome) {\n                    vscode.window.showInformationMessage(\n                        'Comitto wurde aktiviert! Öffnen Sie die Comitto-Seitenleiste über das Icon in der Activity Bar.',\n                        'Öffnen', 'Nicht mehr anzeigen'\n                    ).then(selection => {\n                        if (selection === 'Öffnen') {\n                            vscode.commands.executeCommand('comitto-sidebar.focus');\n                        } else if (selection === 'Nicht mehr anzeigen') {\n                            context.globalState.update('comitto.hasShownWelcome', true);\n                        }\n                    });\n                }\n            }\n        });\n        // Version speichern\n        context.globalState.update('comitto.version', currentVersion);\n    }\n\n    // Status der UI anzeigen\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = config.get('uiSettings');\n    \n    if (uiSettings.showNotifications) {\n        setTimeout(() => {\n            if (vscode.window.activeTextEditor) {\n                vscode.window.showInformationMessage(\n                    'Comitto ist bereit! Verwenden Sie die Seitenleiste oder das $(git-commit) Symbol in der Statusleiste.',\n                    'Einstellungen öffnen', 'Dashboard anzeigen'\n                ).then(selection => {\n                    if (selection === 'Einstellungen öffnen') {\n                        vscode.commands.executeCommand('comitto.openSettings');\n                    } else if (selection === 'Dashboard anzeigen') {\n                        vscode.commands.executeCommand('comitto.showDashboard');\n                    }\n                });\n            }\n        }, 2000);\n    }\n}\n\n/**\n * .gitignore-Datei laden und Parser erstellen\n */\nfunction loadGitignore() {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) return;\n\n    const gitSettings = vscode.workspace.getConfiguration('comitto').get('gitSettings');\n    if (!gitSettings.useGitignore) {\n        gitignoreObj = null;\n        return;\n    }\n\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n    const gitignorePath = path.join(repoPath, '.gitignore');\n    \n    try {\n        if (fs.existsSync(gitignorePath)) {\n            const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');\n            gitignoreObj = ignore().add(gitignoreContent);\n        } else {\n            gitignoreObj = null;\n        }\n    } catch (error) {\n        console.error('Fehler beim Laden der .gitignore-Datei:', error);\n        gitignoreObj = null;\n    }\n}\n\n/**\n * FileSystemWatcher konfigurieren\n * @param {vscode.ExtensionContext} context\n */\nfunction setupFileWatcher(context) {\n    // Vorhandenen Watcher deaktivieren\n    disableFileWatcher();\n\n    // Neuen Watcher erstellen\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        vscode.window.showErrorMessage('Comitto: Kein Workspace gefunden.');\n        return;\n    }\n\n    const config = vscode.workspace.getConfiguration('comitto');\n    const triggerRules = config.get('triggerRules');\n    const filePatterns = triggerRules.filePatterns || ['**/*'];\n\n    fileWatcher = vscode.workspace.createFileSystemWatcher(filePatterns.length === 1 ? filePatterns[0] : '{' + filePatterns.join(',') + '}');\n    \n    // Auf Dateiereignisse reagieren\n    fileWatcher.onDidChange(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n    \n    fileWatcher.onDidCreate(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n    \n    fileWatcher.onDidDelete(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n\n    context.subscriptions.push(fileWatcher);\n\n    // Interval-Timer einrichten, falls aktiviert\n    if (triggerRules.onInterval) {\n        setupIntervalTrigger(triggerRules.intervalMinutes);\n    }\n}\n\n/**\n * Richtet einen Interval-Trigger für automatische Commits ein\n * @param {number} minutes Intervall in Minuten\n */\nfunction setupIntervalTrigger(minutes) {\n    // Bestehenden Timer löschen\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n        intervalTimer = null;\n    }\n    \n    // Neuen Timer einrichten\n    if (minutes > 0) {\n        const intervalMs = minutes * 60 * 1000;\n        intervalTimer = setInterval(() => {\n            if (vscode.workspace.getConfiguration('comitto').get('autoCommitEnabled') && changedFiles.size > 0) {\n                const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\n                if (notificationSettings.onTriggerFired) {\n                    showNotification('Intervall-Trigger aktiviert. Prüfe auf ausstehende Commits...', 'info');\n                }\n                checkCommitTrigger();\n            }\n        }, intervalMs);\n    }\n}\n\n/**\n * FileSystemWatcher deaktivieren\n */\nfunction disableFileWatcher() {\n    if (fileWatcher) {\n        fileWatcher.dispose();\n        fileWatcher = null;\n    }\n    \n    // Interval-Timer deaktivieren\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n        intervalTimer = null;\n    }\n    \n    changedFiles.clear();\n}\n\n/**\n * Überprüft, ob eine Datei ignoriert werden soll\n * @param {string} filePath Dateipfad\n * @returns {boolean}\n */\nfunction isFileIgnored(filePath) {\n    // Standardmäßig node_modules und .git ausschließen\n    if (filePath.includes('node_modules') || filePath.includes('.git')) {\n        return true;\n    }\n\n    // .gitignore-Regeln prüfen, wenn verfügbar\n    if (gitignoreObj) {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (workspaceFolders) {\n            const relativePath = path.relative(workspaceFolders[0].uri.fsPath, filePath)\n                .replace(/\\\\/g, '/');  // Pfadtrennzeichen normalisieren\n            \n            return gitignoreObj.ignores(relativePath);\n        }\n    }\n\n    return false;\n}\n\n/**\n * Prüft, ob die Bedingungen für ein Auto-Commit erfüllt sind\n */\nfunction checkCommitTrigger() {\n    // Wenn bereits ein Commit-Vorgang läuft, abbrechen\n    if (isCommitInProgress) {\n        return;\n    }\n\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = config.get('triggerRules');\n\n    // Prüfen, ob bestimmte Dateien geändert wurden\n    const specificFiles = rules.specificFiles || [];\n    const hasSpecificFileChanged = specificFiles.length > 0 && \n        specificFiles.some(file => [...changedFiles].some(changed => changed.includes(file)));\n\n    // Prüfen, ob die Mindestanzahl an Änderungen erreicht wurde\n    const hasMinChanges = changedFiles.size >= (rules.minChangeCount || 10);\n\n    // Prüfen, ob die Anzahl der geänderten Dateien den Schwellwert überschreitet\n    const hasFileThreshold = changedFiles.size >= (rules.fileCountThreshold || 3);\n\n    // Prüfen, ob genug Zeit seit dem letzten Commit vergangen ist\n    const timeThresholdMinutes = rules.timeThresholdMinutes || 30;\n    const timeThresholdMs = timeThresholdMinutes * 60 * 1000;\n    const hasTimeThresholdPassed = !lastCommitTime || \n        (Date.now() - lastCommitTime.getTime() >= timeThresholdMs);\n\n    // Commit auslösen, wenn die Bedingungen erfüllt sind\n    if (hasTimeThresholdPassed && (hasSpecificFileChanged || hasMinChanges || hasFileThreshold)) {\n        performAutoCommit();\n    }\n}\n\n/**\n * Führt den automatischen Commit-Prozess durch\n * @param {boolean} isManualTrigger Gibt an, ob der Commit manuell ausgelöst wurde\n * @param {number} retryCount Anzahl der bisherigen Versuche (für Retry-Logik)\n */\nasync function performAutoCommit(isManualTrigger = false, retryCount = 0) {\n    // Maximale Anzahl an Wiederholungsversuchen\n    const MAX_RETRIES = 3;\n    \n    try {\n        isCommitInProgress = true;\n        updateStatusBarProgress(statusBarItem, 'Commit vorbereiten', 5, 'Starte Prozess');\n\n        // Git-Repository-Pfad bestimmen\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders) {\n            throw new Error('Kein Workspace gefunden.');\n        }\n\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings');\n        const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n        \n        try {\n            // Prüfen, ob Git initialisiert ist\n            try {\n                await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\n                updateStatusBarProgress(statusBarItem, 'Commit vorbereiten', 10, 'Git-Repo geprüft');\n            } catch (error) {\n                throw new Error('Kein Git-Repository gefunden. Bitte initialisieren Sie zuerst ein Git-Repository.');\n            }\n            \n            // Dateien zum Staging hinzufügen\n            try {\n                updateStatusBarProgress(statusBarItem, 'Änderungen stagen', 20, gitSettings.stageMode);\n                await stageChanges(gitSettings.stageMode);\n                updateStatusBarProgress(statusBarItem, 'Staging abgeschlossen', 30);\n            } catch (stageError) {\n                console.error('Fehler beim Stagen der Änderungen:', stageError);\n                showNotification(`Fehler beim Stagen: ${stageError.message}. Versuche Fallback-Methode...`, 'warning');\n                \n                // Fallback: Alle Änderungen stagen\n                await executeGitCommand('git add .', repoPath);\n                updateStatusBarProgress(statusBarItem, 'Staging (Fallback)', 30);\n            }\n            \n            // git status ausführen, um Änderungen zu erhalten\n            let gitStatus = '';\n            try {\n                updateStatusBarProgress(statusBarItem, 'Status abrufen', 35);\n                gitStatus = await executeGitCommand('git status --porcelain', repoPath);\n            } catch (statusError) {\n                // Wenn git status fehlschlägt, versuchen wir es trotzdem weiter\n                console.warn('Fehler bei git status, versuche trotzdem fortzufahren:', statusError);\n                gitStatus = \"Fehler beim Abrufen des Status. Commit wird trotzdem versucht.\";\n            }\n            \n            if (!gitStatus.trim() && !isManualTrigger) {\n                isCommitInProgress = false;\n                updateStatusBarProgress(statusBarItem, 'Keine Änderungen', 100);\n                changedFiles.clear();\n                return;\n            } else if (!gitStatus.trim() && isManualTrigger) {\n                throw new Error('Keine Änderungen zum Committen gefunden.');\n            }\n\n            // Änderungen abrufen für KI-Commit-Nachricht\n            let diffOutput = '';\n            try {\n                updateStatusBarProgress(statusBarItem, 'Diff berechnen', 40);\n                diffOutput = await executeGitCommand('git diff --cached', repoPath);\n                updateStatusBarProgress(statusBarItem, 'Diff berechnet', 50);\n            } catch (diffError) {\n                // Bei Pufferüberlauf oder anderen Diff-Fehlern trotzdem weitermachen\n                console.warn('Fehler beim Abrufen des Diffs, versuche alternative Methode:', diffError);\n                \n                try {\n                    // Nur Liste der geänderten Dateien abrufen\n                    updateStatusBarProgress(statusBarItem, 'Diff (Alternative)', 45);\n                    const fileList = await executeGitCommand('git diff --cached --name-status', repoPath);\n                    diffOutput = 'Diff konnte nicht vollständig abgerufen werden.\\nGeänderte Dateien:\\n' + fileList;\n                    updateStatusBarProgress(statusBarItem, 'Diff (Alternativ) berechnet', 50);\n                } catch (fileListError) {\n                    console.error('Auch die Dateiliste konnte nicht abgerufen werden:', fileListError);\n                    diffOutput = 'Diff-Inhalt konnte nicht abgerufen werden. Commit wird trotzdem versucht.';\n                }\n            }\n            \n            // Commit-Nachricht generieren\n            let commitMessage = '';\n            updateStatusBarProgress(statusBarItem, 'Generiere Commit-Nachricht', 50);\n            \n            try {\n                // KI-Funktionen übergeben\n                commitMessage = await commands.generateCommitMessage(gitStatus, diffOutput, \n                    generateWithOllama, generateWithOpenAI, generateWithAnthropic);\n                updateStatusBarProgress(statusBarItem, 'Commit-Nachricht generiert', 75);\n            } catch (messageError) {\n                console.error('Fehler bei der Commit-Nachricht-Generierung:', messageError);\n                updateStatusBarProgress(statusBarItem, 'Fallback-Nachricht', 70);\n                \n                // Fallback-Nachricht mit Datum\n                const now = new Date();\n                const dateStr = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;\n                const timeStr = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n                \n                const gitSettings = config.get('gitSettings');\n                const language = gitSettings.commitMessageLanguage || 'en';\n                const style = gitSettings.commitMessageStyle || 'conventional';\n                \n                if (language === 'de') {\n                    commitMessage = style === 'conventional' ? \n                        `chore: Automatischer Commit vom ${dateStr} ${timeStr}` : \n                        `💾 Automatischer Commit vom ${dateStr} ${timeStr}`;\n                } else {\n                    commitMessage = style === 'conventional' ? \n                        `chore: automatic commit ${dateStr} ${timeStr}` : \n                        `💾 Automatic commit ${dateStr} ${timeStr}`;\n                }\n            }\n            \n            if (!commitMessage || commitMessage.trim().length === 0) {\n                commitMessage = \"chore: auto commit\";\n            }\n            \n            // Branch-Handling\n            try {\n                if (gitSettings.branch) {\n                    updateStatusBarProgress(statusBarItem, 'Branch prüfen', 80);\n                    \n                    // Aktuelle Branch bestimmen\n                    const currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\n                    \n                    // Nur wechseln, wenn nicht bereits auf dem Ziel-Branch\n                    if (currentBranch !== gitSettings.branch) {\n                        // Prüfen, ob der Branch existiert\n                        const branches = await executeGitCommand('git branch', repoPath);\n                        const branchExists = branches.includes(gitSettings.branch);\n                        \n                        if (branchExists) {\n                            // Zu existierendem Branch wechseln\n                            try {\n                                updateStatusBarProgress(statusBarItem, `Wechsle zu ${gitSettings.branch}`, 82);\n                                await executeGitCommand(`git checkout ${gitSettings.branch}`, repoPath);\n                                showNotification(`Zu Branch '${gitSettings.branch}' gewechselt.`, 'info');\n                            } catch (checkoutError) {\n                                // Fehler beim Checkout - möglicherweise ungespeicherte Änderungen\n                                updateStatusBarProgress(statusBarItem, 'Branch-Wechsel fehlgeschlagen', -1);\n                                showNotification(`Fehler beim Wechseln zu Branch '${gitSettings.branch}': ${checkoutError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n                            }\n                        } else {\n                            // Neuen Branch erstellen und wechseln\n                            try {\n                                updateStatusBarProgress(statusBarItem, `Erstelle Branch ${gitSettings.branch}`, 82);\n                                await executeGitCommand(`git checkout -b ${gitSettings.branch}`, repoPath);\n                                showNotification(`Branch '${gitSettings.branch}' erstellt und ausgecheckt.`, 'info');\n                            } catch (createBranchError) {\n                                updateStatusBarProgress(statusBarItem, 'Branch-Erstellung fehlgeschlagen', -1);\n                                showNotification(`Fehler beim Erstellen des Branches '${gitSettings.branch}': ${createBranchError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n                            }\n                        }\n                    }\n                }\n            } catch (branchError) {\n                console.error('Fehler beim Branch-Handling:', branchError);\n                showNotification(`Fehler bei der Branch-Verwaltung: ${branchError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n            }\n            \n            // Git Commit durchführen\n            updateStatusBarProgress(statusBarItem, 'Führe Commit aus', 90);\n            \n            try {\n                // Escapte Anführungszeichen für Shell\n                const escapedMessage = commitMessage.replace(/\"/g, '\\\\\"').replace(/`/g, \"'\");\n                await executeGitCommand(`git commit -m \"${escapedMessage}\"`, repoPath);\n                updateStatusBarProgress(statusBarItem, 'Commit abgeschlossen', 95);\n                \n                // Benachrichtigungen anzeigen basierend auf den Einstellungen\n                const notificationSettings = config.get('notifications');\n                \n                if (!isManualTrigger && notificationSettings.onCommit) {\n                    showNotification(`Automatischer Commit durchgeführt: ${commitMessage}`, 'info');\n                } else if (isManualTrigger) {\n                    showNotification(`Manueller Commit durchgeführt: ${commitMessage}`, 'info');\n                }\n                \n                // Reset der Änderungsverfolgung\n                lastCommitTime = new Date();\n                changedFiles.clear();\n            } catch (commitError) {\n                console.error('Commit fehlgeschlagen:', commitError);\n                \n                // Wenn nichts zum Committen da ist, ist das kein echter Fehler\n                if (commitError.message.includes('nothing to commit')) {\n                    updateStatusBarProgress(statusBarItem, 'Keine Änderungen', 100);\n                    showNotification('Keine Änderungen zum Committen gefunden.', 'info');\n                    isCommitInProgress = false;\n                    changedFiles.clear();\n                    return;\n                }\n                \n                // Bei anderen Fehlern versuchen, es noch einmal\n                if (retryCount < MAX_RETRIES) {\n                    updateStatusBarProgress(statusBarItem, 'Commit fehlgeschlagen, neuer Versuch', 85);\n                    showNotification(`Commit fehlgeschlagen: ${commitError.message}. Versuche es erneut...`, 'warning');\n                    setTimeout(() => {\n                        performAutoCommit(isManualTrigger, retryCount + 1);\n                    }, 2000); // 2 Sekunden Verzögerung vor dem Retry\n                    return;\n                } else {\n                    updateStatusBarProgress(statusBarItem, 'Commit endgültig fehlgeschlagen', -1);\n                    throw new Error(`Commit fehlgeschlagen nach ${MAX_RETRIES} Versuchen: ${commitError.message}`);\n                }\n            }\n            \n            // Automatischen Push ausführen, wenn konfiguriert\n            if (gitSettings.autoPush) {\n                try {\n                    updateStatusBarProgress(statusBarItem, 'Push ausführen', 97);\n                    await performAutoPush(repoPath);\n                    updateStatusBarProgress(statusBarItem, 'Push abgeschlossen', 100);\n                } catch (pushError) {\n                    console.error('Push fehlgeschlagen:', pushError);\n                    updateStatusBarProgress(statusBarItem, 'Push fehlgeschlagen', -1);\n                    showNotification(`Push fehlgeschlagen: ${pushError.message}`, 'error');\n                }\n            } else {\n                updateStatusBarProgress(statusBarItem, 'Vorgang abgeschlossen', 100);\n            }\n        } catch (error) {\n            console.error('Git-Befehl fehlgeschlagen:', error);\n            updateStatusBarProgress(statusBarItem, 'Git-Fehler', -1);\n            \n            // Fehlerbehandlung verbessern\n            let errorMessage = error.message;\n            if (errorMessage.includes('fatal: not a git repository')) {\n                errorMessage = 'Dieses Verzeichnis ist kein Git-Repository. Bitte initialisieren Sie zuerst ein Git-Repository.';\n            } else if (errorMessage.includes('fatal: unable to access')) {\n                errorMessage = 'Fehler beim Zugriff auf das Remote-Repository. Bitte prüfen Sie Ihre Netzwerkverbindung und Zugangsrechte.';\n            } else if (errorMessage.includes('maxBuffer') || errorMessage.includes('zu groß')) {\n                errorMessage = 'Zu viele oder zu große Änderungen für die automatische Verarbeitung. Bitte führen Sie einen manuellen Commit durch oder reduzieren Sie die Anzahl der Änderungen.';\n            }\n            \n            // Benachrichtigung anzeigen\n            const notificationSettings = config.get('notifications');\n            if (notificationSettings.onError) {\n                showNotification(`Git-Befehl fehlgeschlagen: ${errorMessage}`, 'error');\n            }\n            \n            throw error;\n        }\n    } catch (error) {\n        console.error('Comitto Fehler:', error);\n        updateStatusBarProgress(statusBarItem, 'Fehler', -1);\n        \n        // Benachrichtigung anzeigen\n        const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\n        if (notificationSettings.onError) {\n            showNotification(`Comitto Fehler: ${error.message}`, 'error');\n        }\n    } finally {\n        isCommitInProgress = false;\n    }\n}\n\n/**\n * Führt einen automatischen Push durch\n * @param {string} repoPath Der Pfad zum Git-Repository\n */\nasync function performAutoPush(repoPath) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const notificationSettings = config.get('notifications');\n    const MAX_PUSH_RETRIES = 2;\n    \n    statusBarItem.text = \"$(sync~spin) Comitto: Pushe Änderungen...\";\n    \n    // Aktuelle Branch bestimmen\n    let currentBranch;\n    try {\n        currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\n    } catch (error) {\n        throw new Error(`Fehler beim Ermitteln des aktuellen Branches: ${error.message}`);\n    }\n    \n    // Push-Optionen basierend auf Einstellungen\n    const gitSettings = config.get('gitSettings');\n    const pushOptions = gitSettings.pushOptions || '';\n    const pushCommand = `git push origin ${currentBranch} ${pushOptions}`.trim();\n    \n    let pushSuccess = false;\n    let pushError = null;\n    \n    // Versuche es mehrfach mit Push\n    for (let i = 0; i <= MAX_PUSH_RETRIES; i++) {\n        try {\n            await executeGitCommand(pushCommand, repoPath);\n            pushSuccess = true;\n            break;\n        } catch (error) {\n            pushError = error;\n            console.warn(`Push-Versuch ${i+1} fehlgeschlagen:`, error);\n            \n            // Bei bestimmten Fehlern erneut versuchen\n            if (error.message.includes('Connection timed out') || \n                error.message.includes('Could not resolve host') ||\n                error.message.includes('failed to push some refs')) {\n                \n                // Kurze Pause vor dem nächsten Versuch\n                if (i < MAX_PUSH_RETRIES) {\n                    await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1)));\n                    continue;\n                }\n            }\n            \n            // Bei anderen Fehlern oder nach allen Versuchen abbrechen\n            break;\n        }\n    }\n    \n    // Ergebnis verarbeiten\n    if (pushSuccess) {\n        if (notificationSettings.onPush) {\n            showNotification(`Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\n        }\n    } else if (pushError) {\n        // Versuche ein Pull bei bestimmten Fehlern\n        if (pushError.message.includes('failed to push some refs') || \n            pushError.message.includes('rejected') ||\n            pushError.message.includes('non-fast-forward')) {\n            \n            try {\n                showNotification('Push fehlgeschlagen. Versuche Pull...', 'warning');\n                await executeGitCommand(`git pull origin ${currentBranch}`, repoPath);\n                \n                // Erneut versuchen zu pushen\n                await executeGitCommand(pushCommand, repoPath);\n                \n                if (notificationSettings.onPush) {\n                    showNotification(`Pull & Push erfolgreich: Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\n                }\n            } catch (pullError) {\n                throw new Error(`Push fehlgeschlagen und Pull konnte nicht ausgeführt werden: ${pullError.message}`);\n            }\n        } else {\n            throw pushError;\n        }\n    }\n}\n\n/**\n * Führt das Staging von Dateien basierend auf dem konfigurieren Modus aus\n * @param {string} mode Der Staging-Modus ('all', 'specific', 'prompt')\n * @returns {Promise<void>}\n */\nasync function stageChanges(mode) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        throw new Error('Kein Workspace gefunden.');\n    }\n    \n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = config.get('gitSettings');\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n    \n    // Bei manuellem Modus Benutzer nach Dateien fragen\n    if (mode === 'prompt') {\n        // Git Status abrufen\n        const gitStatusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!gitStatusOutput.trim()) {\n            throw new Error('Keine Änderungen zum Stagen gefunden.');\n        }\n        \n        // Dateien parsen\n        const changedFilesList = gitStatusOutput.split('\\n')\n            .filter(line => line.trim().length > 0)\n            .map(line => {\n                const status = line.substring(0, 2).trim();\n                const filePath = line.substring(3).trim();\n                return { status, filePath };\n            });\n        \n        // Dateien zur Auswahl anbieten\n        const selectedFiles = await vscode.window.showQuickPick(\n            changedFilesList.map(file => ({\n                label: file.filePath,\n                description: ui.getStatusDescription(file.status),\n                picked: true // Standardmäßig alle auswählen\n            })),\n            {\n                canPickMany: true,\n                placeHolder: 'Dateien zum Stagen auswählen'\n            }\n        );\n        \n        if (!selectedFiles || selectedFiles.length === 0) {\n            throw new Error('Keine Dateien ausgewählt.');\n        }\n        \n        // Ausgewählte Dateien stagen\n        for (const file of selectedFiles) {\n            await executeGitCommand(`git add \"${file.label}\"`, repoPath);\n        }\n        \n        return;\n    }\n    \n    // Spezifische Dateien basierend auf Mustern stagen\n    if (mode === 'specific') {\n        const patterns = gitSettings.specificStagingPatterns || ['**/*.js', '**/*.ts', '**/*.json'];\n        \n        for (const pattern of patterns) {\n            try {\n                // Bei Windows können wir Probleme mit den Pfadtrennzeichen haben,\n                // daher verwenden wir ein sicheres Muster für die Ausführung\n                const safePattern = pattern.replace(/\\\\/g, '/');\n                await executeGitCommand(`git add \"${safePattern}\"`, repoPath);\n            } catch (error) {\n                console.error(`Fehler beim Stagen von Muster ${pattern}:`, error);\n                // Wir werfen den Fehler nicht weiter, sondern versuchen andere Muster\n            }\n        }\n        \n        return;\n    }\n    \n    // Standardmäßig alle Änderungen stagen\n    await executeGitCommand('git add .', repoPath);\n}\n\n/**\n * Zeigt eine Benachrichtigung an, wenn entsprechend konfiguriert,\n * und fügt sie immer zum Debug-Log hinzu\n * @param {string} message Die anzuzeigende Nachricht\n * @param {string} type Der Typ der Nachricht (info, warning, error)\n */\nfunction showNotification(message, type = 'info') {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = config.get('uiSettings');\n    const debug = config.get('debug');\n    \n    // Zum Debug-Log hinzufügen\n    addDebugLog(message, type);\n    \n    // Benachrichtigung anzeigen, wenn aktiviert\n    if (uiSettings && uiSettings.showNotifications) {\n        switch (type) {\n            case 'info':\n                vscode.window.showInformationMessage(message);\n                break;\n            case 'warning':\n                vscode.window.showWarningMessage(message);\n                break;\n            case 'error':\n                vscode.window.showErrorMessage(message);\n                break;\n            default:\n                vscode.window.showInformationMessage(message);\n        }\n    }\n    \n    // Status in der Statusleiste aktualisieren\n    if (type === 'error' && statusBarItem) {\n        const originalText = statusBarItem.text;\n        statusBarItem.text = \"$(error) Comitto: Fehler\";\n        \n        // Nach 3 Sekunden zurücksetzen\n        setTimeout(() => {\n            if (statusBarItem) {\n                statusBarItem.text = originalText;\n            }\n        }, 3000);\n    }\n}\n\n/**\n * @param {string} gitStatus Die Ausgabe von git status\n * @param {string} diffOutput Die Ausgabe von git diff\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateCommitMessage(gitStatus, diffOutput) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const aiProvider = config.get('aiProvider');\n    const gitSettings = config.get('gitSettings');\n    \n    // Änderungen in ein lesbares Format bringen\n    const changes = gitStatus.split('\\n')\n        .filter(line => line.trim().length > 0)\n        .map(line => {\n            const status = line.substring(0, 2).trim();\n            const filePath = line.substring(3).trim();\n            return `${getStatusText(status)} ${filePath}`;\n        })\n        .join('\\n');\n    \n    // Prompt-Vorlage mit Änderungen füllen\n    let promptTemplate = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht für diese Änderungen: {changes}';\n    promptTemplate = promptTemplate.replace('{changes}', changes);\n    \n    // Sprache für die Commit-Nachricht einfügen\n    const language = gitSettings.commitMessageLanguage || 'de';\n    if (!promptTemplate.includes(language)) {\n        promptTemplate += `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\n    }\n    \n    // Commit-Stil einfügen\n    const style = gitSettings.commitMessageStyle || 'conventional';\n    if (style === 'conventional' && !promptTemplate.includes('conventional')) {\n        promptTemplate += `\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).`;\n    }\n    \n    // Diff-Informationen für komplexere Abrechnungen hinzufügen\n    if (diffOutput && diffOutput.length > 0) {\n        // Eine aggressiv gekürzte Version des Diffs anhängen, um den Kontext zu verbessern,\n        // aber nicht zu viel Token zu verwenden\n        const maxDiffLength = 2000; // Maximale Anzahl der Zeichen des Diffs reduziert auf 2000\n        \n        // Sehr große Diffs erkennen und Warnung ausgeben\n        if (diffOutput.length > 100000) {\n            console.warn(`Extrem großer Diff (${diffOutput.length} Zeichen) wird stark gekürzt.`);\n        }\n        \n        // Intelligente Kürzung: Nur die ersten Änderungen jeder Datei\n        let shortenedDiff = '';\n        \n        try {\n            // Aufteilen nach Dateiänderungen (beginnen mit 'diff --git')\n            const fileChanges = diffOutput.split('diff --git');\n            \n            // Die ersten Änderungen für jede Datei extrahieren (maximal 5 Dateien)\n            const maxFiles = 5;\n            const filesToInclude = fileChanges.slice(0, maxFiles);\n            \n            filesToInclude.forEach((fileChange, index) => {\n                if (index === 0 && !fileChange.trim()) return; // Erstes Element kann leer sein\n                \n                // Jede Dateiänderung auf maximal 400 Zeichen beschränken\n                const maxPerFile = 400;\n                const truncatedChange = fileChange.length > maxPerFile \n                    ? fileChange.substring(0, maxPerFile) + '...' \n                    : fileChange;\n                \n                shortenedDiff += (index > 0 ? 'diff --git' : '') + truncatedChange + '\\n';\n            });\n            \n            // Kürzen, wenn insgesamt zu lang\n            if (shortenedDiff.length > maxDiffLength) {\n                shortenedDiff = shortenedDiff.substring(0, maxDiffLength);\n            }\n            \n            shortenedDiff += `\\n[Diff wurde gekürzt, insgesamt ${diffOutput.length} Zeichen in ${fileChanges.length} Dateien]`;\n        } catch (error) {\n            console.error('Fehler beim Kürzen des Diffs:', error);\n            shortenedDiff = diffOutput.substring(0, maxDiffLength) + \n                `...\\n[Diff wurde einfach gekürzt, insgesamt ${diffOutput.length} Zeichen]`;\n        }\n        \n        promptTemplate += `\\n\\nHier ist ein Ausschnitt der konkreten Änderungen:\\n\\n${shortenedDiff}`;\n    }\n    \n    // Verschiedene KI-Provider unterstützen\n    let generatedMessage = '';\n    try {\n        switch (aiProvider) {\n            case 'ollama':\n                generatedMessage = await generateWithOllama(promptTemplate);\n                break;\n            case 'openai':\n                generatedMessage = await generateWithOpenAI(promptTemplate);\n                break;\n            case 'anthropic':\n                generatedMessage = await generateWithAnthropic(promptTemplate);\n                break;\n            default:\n                throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\n        }\n        \n        // Nachricht verarbeiten und zurückgeben\n        if (typeof generatedMessage === 'string') {\n            // Nachricht bereinigen\n            generatedMessage = generatedMessage.trim();\n            // Anführungszeichen entfernen, falls vorhanden\n            generatedMessage = generatedMessage.replace(/^[\"']|[\"']$/g, '');\n            // Auf die erste Zeile beschränken, wenn sinnvoll\n            const firstLine = generatedMessage.split('\\n')[0];\n            if (firstLine && firstLine.length > 5) {\n                generatedMessage = firstLine;\n            }\n            // Auf 72 Zeichen beschränken (Git-Konvention)\n            if (generatedMessage.length > 72) {\n                generatedMessage = generatedMessage.substring(0, 72);\n            }\n            \n            return generatedMessage;\n        } else {\n            throw new Error('Commit-Nachricht konnte nicht generiert werden: Ungültiges Format');\n        }\n    } catch (error) {\n        console.error('Fehler beim Generieren der Commit-Nachricht:', error);\n        throw new Error(`Fehler beim Generieren der Commit-Nachricht: ${error.message}`);\n    }\n}\n\n/**\n * Richtet eine automatische Hintergrundüberwachung ein\n * @param {vscode.ExtensionContext} context \n */\nfunction setupAutoBackgroundMonitoring(context) {\n    // Überwachung für Git-Status (alle 10 Minuten)\n    setInterval(async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            if (!config.get('autoCommitEnabled')) return;\n            \n            const debugSettings = config.get('debug') || {};\n            \n            // Git-Repository-Status prüfen\n            const hasGit = await checkGitRepository(context);\n            if (!hasGit) {\n                addDebugLog('Hintergrundprüfung: Kein aktives Git-Repository gefunden.', 'warning');\n                return;\n            }\n            \n            // Prüfen, ob ungespeicherte Änderungen vorliegen, die noch nicht committed wurden\n            const workspaceFolders = vscode.workspace.workspaceFolders;\n            if (!workspaceFolders) return;\n            \n            const repoPath = workspaceFolders[0].uri.fsPath;\n            const gitStatus = await executeGitCommand('git status --porcelain', repoPath);\n            \n            if (gitStatus.trim() && changedFiles.size === 0) {\n                // Es gibt Änderungen, die nicht in changedFiles erfasst wurden\n                addDebugLog('Hintergrundprüfung: Nicht erfasste Änderungen gefunden.', 'info');\n                \n                // Dateien dem Tracking hinzufügen\n                gitStatus.split('\\n')\n                    .filter(line => line.trim().length > 0)\n                    .forEach(line => {\n                        const filePath = line.substring(3).trim();\n                        if (filePath && !isFileIgnored(filePath)) {\n                            // Relativen Pfad erstellen, sicherstellen dass dieser valide ist\n                            const absolutePath = path.resolve(repoPath, filePath);\n                            changedFiles.add(absolutePath);\n                        }\n                    });\n                \n                if (debugSettings.extendedLogging) {\n                    addDebugLog(`Hintergrund-Synchronisierung: ${changedFiles.size} Dateien werden nun überwacht.`, 'info');\n                }\n                \n                // Trigger-Check ausführen\n                if (config.get('autoCommitEnabled')) {\n                    checkCommitTrigger();\n                }\n            }\n        } catch (error) {\n            console.error('Fehler bei der Hintergrundüberwachung:', error);\n            addDebugLog(`Fehler bei der Hintergrundüberwachung: ${error.message}`, 'error');\n        }\n    }, 10 * 60 * 1000); // 10 Minuten\n    \n    // Regelmäßiger Gesundheitscheck\n    setInterval(() => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            if (!config.get('autoCommitEnabled')) return;\n            \n            const debugSettings = config.get('debug') || {};\n            \n            // Prüfen, ob der Watcher noch aktiv ist\n            if (!fileWatcher && config.get('autoCommitEnabled')) {\n                addDebugLog('Gesundheitscheck: FileWatcher ist nicht aktiv. Starte neu...', 'warning');\n                setupFileWatcher(context);\n            }\n            \n            // Prüfen, ob der Interval-Timer noch aktiv ist\n            const triggerRules = config.get('triggerRules');\n            if (triggerRules.onInterval && !intervalTimer && config.get('autoCommitEnabled')) {\n                addDebugLog('Gesundheitscheck: Interval-Timer ist nicht aktiv. Starte neu...', 'warning');\n                setupIntervalTrigger(triggerRules.intervalMinutes);\n            }\n            \n            if (debugSettings.extendedLogging) {\n                addDebugLog('Gesundheitscheck durchgeführt.', 'info');\n            }\n        } catch (error) {\n            console.error('Fehler beim Gesundheitscheck:', error);\n            addDebugLog(`Fehler beim Gesundheitscheck: ${error.message}`, 'error');\n        }\n    }, 30 * 60 * 1000); // 30 Minuten\n}\n\nfunction deactivate() {\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n    }\n    \n    // Alle Ressourcen löschen\n    if (statusBarItem) {\n        statusBarItem.dispose();\n    }\n    \n    if (fileWatcher) {\n        fileWatcher.dispose();\n    }\n    \n    if (outputChannel) {\n        outputChannel.dispose();\n    }\n    \n    return undefined;\n}\n\n/**\n * Generiert eine Commit-Nachricht mit Ollama\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithOllama(prompt) {\n    // Implementierung bleibt unverändert\n    const config = vscode.workspace.getConfiguration('comitto');\n    const endpoint = config.get('ollama').endpoint || 'http://localhost:11434/api/generate';\n    \n    // Backward-Kompatibilität für ollama-model Konfiguration\n    let ollamaConfig = config.get('ollama') || {};\n    let model = ollamaConfig.model;\n    const ollamaModelOld = config.get('ollama-model');\n    \n    if (!model && ollamaModelOld) {\n        model = ollamaModelOld;\n        ollamaConfig.model = ollamaModelOld;\n        await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n        await config.update('ollama-model', undefined, vscode.ConfigurationTarget.Global);\n        \n        showNotification('Korrektur der Ollama-Modell-Konfiguration durchgeführt.', 'info');\n    }\n    \n    // Fallback, falls kein Modell konfiguriert ist\n    model = model || 'granite3.3:2b';\n    \n    try {\n        // Statusleiste aktualisieren\n        updateStatusBarProgress(statusBarItem, 'Ollama generiert', 0, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit Ollama (${model}) generiert...`, 'info', false);\n        \n        console.log(`Verwende Ollama-Modell: ${model} auf ${endpoint}`);\n        \n        // HTTP-Anfrage vorbereiten und Startzeit messen\n        const requestStart = Date.now();\n        \n        // Prüfen, ob der Endpunkt /api/generate enthält - verschiedene API-Pfade\n        const apiEndpoint = endpoint.endsWith('/api/generate') ? endpoint : \n                         (endpoint.endsWith('/') ? `${endpoint}api/generate` : `${endpoint}/api/generate`);\n        \n        const response = await axios.post(apiEndpoint, {\n            model: model,\n            prompt: prompt,\n            stream: false,\n            options: {\n                temperature: 0.3,\n                num_predict: 100\n            }\n        });\n        \n        const requestDuration = ((Date.now() - requestStart) / 1000).toFixed(2);\n        updateStatusBarProgress(statusBarItem, 'Ollama generiert', 100, `Fertig in ${requestDuration}s`);\n        \n        if (response.data && typeof response.data.response === 'string') {\n            let commitMessage = response.data.response.trim();\n            \n            // Debugging-Informationen\n            const evalDuration = response.data.eval_duration ? \n                (response.data.eval_duration / 1000000000).toFixed(2) + 's' : 'n/a';\n            const totalDuration = response.data.total_duration ? \n                (response.data.total_duration / 1000000000).toFixed(2) + 's' : requestDuration + 's';\n            \n            console.log(`Ollama-Antwort erhalten. Eval-Zeit: ${evalDuration}, Gesamt-Zeit: ${totalDuration}`);\n            showNotification(`Commit-Nachricht mit Ollama generiert (${totalDuration}).`, 'info', false);\n            \n            return commitMessage;\n        } else {\n            throw new Error('Unerwartetes Antwortformat von Ollama');\n        }\n    } catch (error) {\n        console.error('Ollama API-Fehler:', error.response?.data || error.message);\n        \n        // Statusleiste aktualisieren\n        updateStatusBarProgress(statusBarItem, 'Ollama-Fehler', -1);\n        \n        // Detaillierte Fehlermeldung\n        let errorMessage = 'Fehler bei der Kommunikation mit Ollama';\n        \n        if (error.code === 'ECONNREFUSED') {\n            errorMessage = 'Verbindung zu Ollama fehlgeschlagen. Bitte stellen Sie sicher, dass Ollama läuft und erreichbar ist.';\n        } else if (error.code === 'ETIMEDOUT' || error.code === 'TIMEOUT') {\n            errorMessage = 'Zeitüberschreitung bei der Anfrage an Ollama. Bitte prüfen Sie die Verbindung oder versuchen Sie ein kleineres Modell.';\n        } else if (error.response?.status === 404) {\n            errorMessage = `Das Ollama-Modell \"${model}\" wurde nicht gefunden. Bitte stellen Sie sicher, dass das Modell installiert ist.`;\n            \n            // Zusätzliche Hilfe zur Installation anbieten\n            showNotification(`Modell \"${model}\" nicht gefunden. Installieren Sie es mit: ollama pull ${model}`, 'warning');\n        } else if (error.response?.data) {\n            errorMessage = `Ollama-Fehler: ${error.response.data.error || JSON.stringify(error.response.data)}`;\n        } else {\n            errorMessage = `Ollama-Fehler: ${error.message}`;\n        }\n        \n        showNotification(errorMessage, 'error');\n        \n        // Fallback: Einfache, generische Commit-Nachricht\n        return \"chore: Änderungen commited\";\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit OpenAI\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithOpenAI(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const apiKey = config.get('openai.apiKey');\n    const model = config.get('openai.model') || 'gpt-3.5-turbo';\n    \n    if (!apiKey) {\n        throw new Error('OpenAI API-Schlüssel nicht konfiguriert');\n    }\n    \n    try {\n        updateStatusBarProgress(statusBarItem, 'OpenAI generiert', 20, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit OpenAI (${model}) generiert...`, 'info', false);\n        \n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n            model: model,\n            messages: [\n                { role: 'system', content: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.' },\n                { role: 'user', content: prompt }\n            ],\n            temperature: 0.3,\n            max_tokens: 100\n        }, {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        updateStatusBarProgress(statusBarItem, 'OpenAI generiert', 100, 'Fertig');\n        \n        if (response.data && response.data.choices && response.data.choices[0]) {\n            return response.data.choices[0].message.content.trim()\n                .replace(/^[\"']|[\"']$/g, '')\n                .replace(/\\n/g, ' ');\n        } else {\n            throw new Error('Unerwartetes Antwortformat von OpenAI');\n        }\n    } catch (error) {\n        updateStatusBarProgress(statusBarItem, 'OpenAI-Fehler', -1);\n        console.error('OpenAI API-Fehler:', error.response?.data || error.message);\n        throw new Error(`Fehler bei der Kommunikation mit OpenAI: ${error.message}`);\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit Anthropic \n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithAnthropic(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const apiKey = config.get('anthropic.apiKey');\n    const model = config.get('anthropic.model') || 'claude-2';\n    \n    if (!apiKey) {\n        throw new Error('Anthropic API-Schlüssel nicht konfiguriert');\n    }\n    \n    try {\n        updateStatusBarProgress(statusBarItem, 'Anthropic generiert', 20, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit Anthropic (${model}) generiert...`, 'info', false);\n        \n        const response = await axios.post('https://api.anthropic.com/v1/messages', {\n            model: model,\n            max_tokens: 100,\n            temperature: 0.3,\n            system: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.',\n            messages: [\n                { role: 'user', content: prompt }\n            ]\n        }, {\n            headers: {\n                'x-api-key': apiKey,\n                'anthropic-version': '2023-06-01',\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        updateStatusBarProgress(statusBarItem, 'Anthropic generiert', 100, 'Fertig');\n        \n        if (response.data && response.data.content && response.data.content[0]) {\n            return response.data.content[0].text.trim()\n                .replace(/^[\"']|[\"']$/g, '')\n                .replace(/\\n/g, ' ');\n        } else {\n            throw new Error('Unerwartetes Antwortformat von Anthropic');\n        }\n    } catch (error) {\n        updateStatusBarProgress(statusBarItem, 'Anthropic-Fehler', -1);\n        console.error('Anthropic API-Fehler:', error.response?.data || error.message);\n        throw new Error(`Fehler bei der Kommunikation mit Anthropic: ${error.message}`);\n    }\n}\n\n// Export der Funktionen der Erweiterung\nmodule.exports = {\n    activate,\n    deactivate,\n    generateWithOllama,\n    generateWithOpenAI,\n    generateWithAnthropic\n}; ","module.exports = require(\"os\");","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst ui = require('./ui'); // Importiere UI-Modul für Hilfsfunktionen\nconst { executeGitCommand, getStatusText, updateStatusBarProgress } = require('./utils');\nconst axios = require('axios');\n\n// Closure statt globaler Variable für die Statusleiste\nlet statusBarItemRef = null;\n\n/**\n * Registriert Befehle für die Erweiterung\n * @param {vscode.ExtensionContext} context VSCode-Erweiterungskontext\n * @param {Object} providers UI-Provider-Instanzen\n * @param {vscode.StatusBarItem} statusBarItem Statusleistenelement\n * @param {Function} setupFileWatcher Funktion zum Einrichten des FileWatchers\n * @param {Function} disableFileWatcher Funktion zum Deaktivieren des FileWatchers\n * @param {Function} performAutoCommit Funktion zum Ausführen eines Auto-Commits\n * @param {Function} showNotification Funktion zum Anzeigen von Benachrichtigungen\n */\nfunction registerCommands(context, providers, statusBarItem, setupFileWatcher, disableFileWatcher, performAutoCommit, showNotification) {\n    // Statusleiste in Closure speichern statt global\n    statusBarItemRef = statusBarItem;\n    \n    // Auto-Commit ein-/ausschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.enableAutoCommit', async () => {\n            try {\n                // Konfiguration abrufen und ändern\n                const config = vscode.workspace.getConfiguration('comitto');\n                await config.update('autoCommitEnabled', true, vscode.ConfigurationTarget.Global);\n                \n                // FileWatcher einrichten\n                setupFileWatcher(context);\n                \n                // Statusleiste aktualisieren\n                updateStatusBarProgress(statusBarItem, 'Aktiv', 100, 'Automatische Commits aktiviert');\n                showNotification('Automatische Commits aktiviert', 'info');\n                // Logge den Status der automatischen Commits in der Konsole\n                console.log('Automatische Commits wurden aktiviert');\n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Aktivieren des Auto-Commits\", true);\n            }\n        })\n    );\n    \n    // Auto-Commit deaktivieren\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.disableAutoCommit', async () => {\n            try {\n                // Konfiguration abrufen und ändern\n                const config = vscode.workspace.getConfiguration('comitto');\n                await config.update('autoCommitEnabled', false, vscode.ConfigurationTarget.Global);\n                \n                // FileWatcher deaktivieren\n                disableFileWatcher();\n                \n                // Statusleiste aktualisieren\n                updateStatusBarProgress(statusBarItem, 'Inaktiv', 0, 'Automatische Commits deaktiviert');\n                showNotification('Automatische Commits deaktiviert', 'info');\n                \n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Deaktivieren des Auto-Commits\", true);\n            }\n        })\n    );\n    \n    // Auto-Commit umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleAutoCommit', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const isEnabled = config.get('autoCommitEnabled');\n                \n                if (isEnabled) {\n                    await vscode.commands.executeCommand('comitto.disableAutoCommit');\n                } else {\n                    await vscode.commands.executeCommand('comitto.enableAutoCommit');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des Auto-Commits\", true);\n            }\n        })\n    );\n    \n    // Manuellen Commit ausführen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.manualCommit', async () => {\n            try {\n                await performAutoCommit(true); // true = manueller Trigger\n            } catch (error) {\n                handleError(error, \"Fehler beim manuellen Commit\", true);\n            }\n        })\n    );\n    \n    // Dashboard anzeigen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.showDashboard', async () => {\n            try {\n                if (providers && providers.dashboardProvider) {\n                    providers.dashboardProvider.show();\n                } else {\n                    showNotification('Dashboard konnte nicht geöffnet werden.', 'error');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Öffnen des Dashboards\", true);\n            }\n        })\n    );\n    \n    // Einfache UI anzeigen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.showSimpleUI', async () => {\n            try {\n                if (providers && providers.simpleUIProvider) {\n                    providers.simpleUIProvider.show();\n                } else {\n                    showNotification('Einfache UI konnte nicht geöffnet werden.', 'error');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Öffnen der einfachen UI\", true);\n            }\n        })\n    );\n    \n    // AI-Provider auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectAiProvider', async () => {\n            try {\n                const providers = ['ollama', 'openai', 'anthropic'];\n                const selection = await vscode.window.showQuickPick(providers, {\n                    placeHolder: 'Wähle einen KI-Provider für die Commit-Nachrichtengenerierung'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    await config.update('aiProvider', selection, vscode.ConfigurationTarget.Global);\n                    showNotification(`KI-Provider wurde auf ${selection} gesetzt.`, 'info');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des KI-Providers\", true);\n            }\n        })\n    );\n    \n    // Einfachen Modus umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleSimpleMode', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const uiSettings = config.get('uiSettings');\n                const newValue = !uiSettings.simpleMode;\n                \n                await config.update('uiSettings', { ...uiSettings, simpleMode: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Einfacher Modus wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des einfachen Modus\", true);\n            }\n        })\n    );\n    \n    // Theme auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectTheme', async () => {\n            try {\n                const themes = ['auto', 'hell', 'dunkel'];\n                const selection = await vscode.window.showQuickPick(themes, {\n                    placeHolder: 'Wähle ein Theme für Comitto'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const uiSettings = config.get('uiSettings');\n                    await config.update('uiSettings', { ...uiSettings, theme: selection }, vscode.ConfigurationTarget.Global);\n                    showNotification(`Theme wurde auf '${selection}' gesetzt.`, 'info');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des Themes\", true);\n            }\n        })\n    );\n    \n    // onSave-Trigger umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleOnSave', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const newValue = !triggerRules.onSave;\n                \n                await config.update('triggerRules', { ...triggerRules, onSave: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Auto-Commit beim Speichern wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des onSave-Triggers\", true);\n            }\n        })\n    );\n    \n    // onInterval-Trigger umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleOnInterval', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const newValue = !triggerRules.onInterval;\n                \n                await config.update('triggerRules', { ...triggerRules, onInterval: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Auto-Commit im Intervall wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des onInterval-Triggers\", true);\n            }\n        })\n    );\n    \n    // onBranchSwitch-Trigger umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleOnBranchSwitch', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const newValue = !triggerRules.onBranchSwitch;\n                \n                await config.update('triggerRules', { ...triggerRules, onBranchSwitch: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Auto-Commit beim Branch-Wechsel wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des onBranchSwitch-Triggers\", true);\n            }\n        })\n    );\n    \n    // Dateimuster bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editFilePatterns', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentPatterns = triggerRules.filePatterns.join(', ');\n                \n                const newPatterns = await vscode.window.showInputBox({\n                    prompt: \"Dateimuster (durch Komma getrennt)\",\n                    value: currentPatterns,\n                    placeHolder: \"z.B. **/*.js, **/*.ts\"\n                });\n                \n                if (newPatterns !== undefined) {\n                    const patternsArray = newPatterns.split(',').map(p => p.trim()).filter(p => p.length > 0);\n                    await config.update('triggerRules', { ...triggerRules, filePatterns: patternsArray }, vscode.ConfigurationTarget.Global);\n                    showNotification('Dateimuster wurden aktualisiert.', 'info');\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten der Dateimuster\", true);\n            }\n        })\n    );\n    \n    // Minimale Änderungsanzahl bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editMinChangeCount', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentValue = triggerRules.minChangeCount.toString();\n                \n                const newValue = await vscode.window.showInputBox({\n                    prompt: \"Minimale Anzahl an Änderungen für Auto-Commit\",\n                    value: currentValue,\n                    placeHolder: \"z.B. 10\"\n                });\n                \n                if (newValue !== undefined) {\n                    const numValue = parseInt(newValue);\n                    if (!isNaN(numValue) && numValue >= 0) {\n                        await config.update('triggerRules', { ...triggerRules, minChangeCount: numValue }, vscode.ConfigurationTarget.Global);\n                        showNotification(`Minimale Änderungsanzahl auf ${numValue} gesetzt.`, 'info');\n                        \n                        // UI aktualisieren\n                        if (providers) {\n                            providers.settingsProvider.refresh();\n                        }\n                    } else {\n                        showNotification('Bitte geben Sie eine gültige Zahl ein.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten der minimalen Änderungsanzahl\", true);\n            }\n        })\n    );\n    \n    // Zeitschwellwert bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editTimeThreshold', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentValue = triggerRules.timeThresholdMinutes.toString();\n                \n                const newValue = await vscode.window.showInputBox({\n                    prompt: \"Zeitschwellwert in Minuten (Zeit seit letztem Commit)\",\n                    value: currentValue,\n                    placeHolder: \"z.B. 30\"\n                });\n                \n                if (newValue !== undefined) {\n                    const numValue = parseInt(newValue);\n                    if (!isNaN(numValue) && numValue >= 0) {\n                        await config.update('triggerRules', { ...triggerRules, timeThresholdMinutes: numValue }, vscode.ConfigurationTarget.Global);\n                        showNotification(`Zeitschwellwert auf ${numValue} Minuten gesetzt.`, 'info');\n                        \n                        // UI aktualisieren\n                        if (providers) {\n                            providers.settingsProvider.refresh();\n                        }\n                    } else {\n                        showNotification('Bitte geben Sie eine gültige Zahl ein.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Zeitschwellwerts\", true);\n            }\n        })\n    );\n    \n    // Dateien-Schwellwert bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editFileCountThreshold', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentValue = triggerRules.fileCountThreshold.toString();\n                \n                const newValue = await vscode.window.showInputBox({\n                    prompt: \"Dateien-Schwellwert (Anzahl der geänderten Dateien)\",\n                    value: currentValue,\n                    placeHolder: \"z.B. 3\"\n                });\n                \n                if (newValue !== undefined) {\n                    const numValue = parseInt(newValue);\n                    if (!isNaN(numValue) && numValue >= 0) {\n                        await config.update('triggerRules', { ...triggerRules, fileCountThreshold: numValue }, vscode.ConfigurationTarget.Global);\n                        showNotification(`Dateien-Schwellwert auf ${numValue} gesetzt.`, 'info');\n                        \n                        // UI aktualisieren\n                        if (providers) {\n                            providers.settingsProvider.refresh();\n                        }\n                    } else {\n                        showNotification('Bitte geben Sie eine gültige Zahl ein.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Dateien-Schwellwerts\", true);\n            }\n        })\n    );\n    \n    // Einstellungen aktualisieren\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.refreshSettings', async () => {\n            try {\n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n                showNotification('Einstellungen wurden aktualisiert.', 'info');\n            } catch (error) {\n                handleError(error, \"Fehler beim Aktualisieren der Einstellungen\", true);\n            }\n        })\n    );\n    \n    // Einstellungen öffnen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.openSettings', async () => {\n            try {\n                await vscode.commands.executeCommand('workbench.action.openSettings', 'comitto');\n            } catch (error) {\n                handleError(error, \"Fehler beim Öffnen der Einstellungen\", true);\n            }\n        })\n    );\n    \n    // Manuellen Commit ausführen (Alias für manualCommit)\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.performManualCommit', async () => {\n            try {\n                await performAutoCommit(true); // true = manueller Trigger\n            } catch (error) {\n                handleError(error, \"Fehler beim manuellen Commit\", true);\n            }\n        })\n    );\n    \n    // OpenAI-Modell auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectOpenAIModel', async () => {\n            try {\n                const models = [\n                    { label: 'GPT-4o', value: 'gpt-4o' },\n                    { label: 'GPT-4o Mini', value: 'gpt-4o-mini' },\n                    { label: 'GPT-4', value: 'gpt-4' },\n                    { label: 'GPT-4 Turbo', value: 'gpt-4-turbo' },\n                    { label: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' }\n                ];\n                \n                const selection = await vscode.window.showQuickPick(models, {\n                    placeHolder: 'Wähle ein OpenAI-Modell',\n                    title: 'OpenAI-Modell auswählen'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const openaiConfig = config.get('openai') || {};\n                    \n                    // Aktualisiere das Modell in den Einstellungen\n                    openaiConfig.model = selection.value;\n                    await config.update('openai', openaiConfig, vscode.ConfigurationTarget.Global);\n                    \n                    showNotification(`OpenAI-Modell wurde auf ${selection.label} (${selection.value}) gesetzt.`, 'info');\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des OpenAI-Modells\", true);\n            }\n        })\n    );\n    \n    // OpenAI API-Schlüssel bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editOpenAIKey', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const openaiConfig = config.get('openai') || {};\n                const currentKey = openaiConfig.apiKey || '';\n                \n                // Maske für den Schlüssel erstellen, falls einer existiert\n                const maskedKey = currentKey ? '********' + currentKey.slice(-4) : '';\n                \n                const input = await vscode.window.showInputBox({\n                    prompt: 'OpenAI API-Schlüssel eingeben',\n                    placeHolder: 'sk-...',\n                    value: maskedKey,\n                    password: true // Eingabe als Passwort maskieren\n                });\n                \n                if (input !== undefined) {\n                    // Wenn der Benutzer nicht die maskierte Version gelassen hat\n                    if (input !== maskedKey) {\n                        // Schlüssel aktualisieren\n                        openaiConfig.apiKey = input;\n                        await config.update('openai', openaiConfig, vscode.ConfigurationTarget.Global);\n                        showNotification('OpenAI API-Schlüssel wurde aktualisiert.', 'info');\n                    }\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des OpenAI API-Schlüssels\", true);\n            }\n        })\n    );\n    \n    // Anthropic-Modell auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectAnthropicModel', async () => {\n            try {\n                const models = [\n                    { label: 'Claude 3 Opus', value: 'claude-3-opus-20240229' },\n                    { label: 'Claude 3 Sonnet', value: 'claude-3-sonnet-20240229' },\n                    { label: 'Claude 3 Haiku', value: 'claude-3-haiku-20240307' },\n                    { label: 'Claude 2', value: 'claude-2' },\n                    { label: 'Claude 2.1', value: 'claude-2.1' },\n                    { label: 'Claude Instant', value: 'claude-instant-1' }\n                ];\n                \n                const selection = await vscode.window.showQuickPick(models, {\n                    placeHolder: 'Wähle ein Anthropic-Modell',\n                    title: 'Anthropic-Modell auswählen'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const anthropicConfig = config.get('anthropic') || {};\n                    \n                    // Aktualisiere das Modell in den Einstellungen\n                    anthropicConfig.model = selection.value;\n                    await config.update('anthropic', anthropicConfig, vscode.ConfigurationTarget.Global);\n                    \n                    showNotification(`Anthropic-Modell wurde auf ${selection.label} (${selection.value}) gesetzt.`, 'info');\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des Anthropic-Modells\", true);\n            }\n        })\n    );\n    \n    // Und auch einen Befehl für Anthropic, da dieser ebenfalls in der UI referenziert wird\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editAnthropicKey', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const anthropicConfig = config.get('anthropic') || {};\n                const currentKey = anthropicConfig.apiKey || '';\n                \n                // Maske für den Schlüssel erstellen, falls einer existiert\n                const maskedKey = currentKey ? '********' + currentKey.slice(-4) : '';\n                \n                const input = await vscode.window.showInputBox({\n                    prompt: 'Anthropic API-Schlüssel eingeben',\n                    placeHolder: 'sk-...',\n                    value: maskedKey,\n                    password: true // Eingabe als Passwort maskieren\n                });\n                \n                if (input !== undefined) {\n                    // Wenn der Benutzer nicht die maskierte Version gelassen hat\n                    if (input !== maskedKey) {\n                        // Schlüssel aktualisieren\n                        anthropicConfig.apiKey = input;\n                        await config.update('anthropic', anthropicConfig, vscode.ConfigurationTarget.Global);\n                        showNotification('Anthropic API-Schlüssel wurde aktualisiert.', 'info');\n                    }\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Anthropic API-Schlüssels\", true);\n            }\n        })\n    );\n    \n    // Und auch einen Befehl für die Bearbeitung der Prompt-Vorlage\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editPromptTemplate', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const currentTemplate = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht für diese Änderungen: {changes}';\n                \n                // Multi-line Text Editor verwenden, um die Vorlage zu bearbeiten\n                const document = await vscode.workspace.openTextDocument({\n                    content: currentTemplate,\n                    language: 'markdown'\n                });\n                \n                const editor = await vscode.window.showTextDocument(document);\n                \n                // Event-Listener für das Speichern registrieren\n                const disposable = vscode.workspace.onDidSaveTextDocument(async (doc) => {\n                    if (doc === document) {\n                        const newTemplate = doc.getText();\n                        await config.update('promptTemplate', newTemplate, vscode.ConfigurationTarget.Global);\n                        showNotification('Prompt-Vorlage wurde aktualisiert.', 'info');\n                        \n                        // Event-Listener und temporäres Dokument entfernen\n                        disposable.dispose();\n                        setTimeout(() => {\n                            vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n                        }, 500);\n                    }\n                });\n                \n                // Info-Meldung anzeigen\n                vscode.window.showInformationMessage('Bearbeiten Sie die Prompt-Vorlage und speichern Sie die Datei (STRG+S), um die Änderungen zu übernehmen.');\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten der Prompt-Vorlage\", true);\n            }\n        })\n    );\n    \n    // Alle Änderungen stagen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.stageAll', async () => {\n            try {\n                const gitExtension = vscode.extensions.getExtension('vscode.git')?.exports;\n                if (gitExtension) {\n                    const git = gitExtension.getAPI(1);\n                    if (git.repositories && git.repositories.length > 0) {\n                        await git.repositories[0].add([]);\n                        showNotification('Alle Änderungen wurden gestagt.', 'info');\n                    } else {\n                        showNotification('Kein Git-Repository gefunden.', 'error');\n                    }\n                } else {\n                    // Fallback auf git add -A\n                    const workspaceFolders = vscode.workspace.workspaceFolders;\n                    if (workspaceFolders && workspaceFolders.length > 0) {\n                        const path = workspaceFolders[0].uri.fsPath;\n                        await executeGitCommand(path, ['add', '-A']);\n                        showNotification('Alle Änderungen wurden gestagt.', 'info');\n                    } else {\n                        showNotification('Kein Arbeitsbereich geöffnet.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Stagen aller Änderungen\", true);\n            }\n        })\n    );\n}\n\n/**\n * Generiert eine Commit-Nachricht basierend auf Git-Status und Diff\n * @param {string} gitStatus Git-Status-Ausgabe\n * @param {string} diffOutput Git-Diff-Ausgabe\n * @param {Function} generateWithOllama Funktion zur Generierung einer Commit-Nachricht mit Ollama\n * @param {Function} generateWithOpenAI Funktion zur Generierung einer Commit-Nachricht mit OpenAI\n * @param {Function} generateWithAnthropic Funktion zur Generierung einer Commit-Nachricht mit Anthropic\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateCommitMessage(gitStatus, diffOutput, generateWithOllama, generateWithOpenAI, generateWithAnthropic) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const aiProvider = config.get('aiProvider');\n        const gitSettings = config.get('gitSettings');\n        \n        // Änderungen in ein lesbares Format bringen\n        const changes = gitStatus.split('\\n')\n            .filter(line => line.trim().length > 0)\n            .map(line => {\n                const status = line.substring(0, 2).trim();\n                const filePath = line.substring(3).trim();\n                return `${getStatusText(status)} ${filePath}`;\n            })\n            .join('\\n');\n        \n        // Prompt-Vorlage mit Änderungen füllen\n        let promptTemplate = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht basierend auf folgenden Änderungen:';\n        promptTemplate = promptTemplate.replace('{changes}', changes);\n        \n        // Sprache für die Commit-Nachricht einfügen\n        const language = gitSettings.commitMessageLanguage || 'de';\n        if (!promptTemplate.includes(language)) {\n            promptTemplate += `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\n        }\n        \n        // Commit-Stil einfügen\n        const style = gitSettings.commitMessageStyle || 'conventional';\n        if (style === 'conventional' && !promptTemplate.includes('conventional')) {\n            promptTemplate += `\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).`;\n        }\n        \n        // Verschiedene KI-Provider unterstützen\n        switch (aiProvider) {\n            case 'ollama':\n                if (typeof generateWithOllama !== 'function') {\n                    throw new Error('generateWithOllama ist nicht definiert');\n                }\n                return await generateWithOllama(promptTemplate);\n            case 'openai':\n                if (typeof generateWithOpenAI !== 'function') {\n                    throw new Error('generateWithOpenAI ist nicht definiert');\n                }\n                return await generateWithOpenAI(promptTemplate);\n            case 'anthropic':\n                if (typeof generateWithAnthropic !== 'function') {\n                    throw new Error('generateWithAnthropic ist nicht definiert');\n                }\n                return await generateWithAnthropic(promptTemplate);\n            default:\n                throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\n        }\n    } catch (error) {\n        handleError(error, \"Fehler bei der Generierung der Commit-Nachricht\");\n        // Fallback-Nachricht bei Fehler zurückgeben\n        return \"chore: auto commit (Fehler bei der Nachrichtengenerierung)\";\n    }\n}\n\n/**\n * Bereitet eine Prompt-Vorlage mit Git-Status- und Diff-Informationen vor\n * @param {string} gitStatus Git-Status-Ausgabe\n * @param {string} diffOutput Git-Diff-Ausgabe\n * @returns {string} Vorbereiteter Prompt\n */\nfunction preparePromptTemplate(gitStatus, diffOutput) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        let template = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht basierend auf folgenden Änderungen:';\n        \n        // Status-Informationen hinzufügen\n        template = template.replace('{changes}', gitStatus || 'Keine Status-Informationen verfügbar.');\n        \n        // Gekürzte Diff-Informationen hinzufügen, wenn verfügbar\n        if (diffOutput && diffOutput.length > 0) {\n            // Diff auf sinnvolle Größe beschränken (max. 2000 Zeichen)\n            const maxLength = 2000;\n            const truncatedDiff = diffOutput.length > maxLength\n                ? diffOutput.substring(0, maxLength) + '...(gekürzt)'\n                : diffOutput;\n                \n            template += `\\n\\nHier sind einige der Änderungen im Detail:\\n${truncatedDiff}`;\n        }\n        \n        return template;\n    } catch (error) {\n        handleError(error, \"Fehler bei der Vorbereitung des Prompts\");\n        return 'Generiere eine Commit-Nachricht basierend auf den letzten Änderungen.';\n    }\n}\n\n/**\n * Verarbeitet die Daten aus dem Git-Diff für den Prompt\n * @param {string} diffOutput Git-Diff-Ausgabe\n * @returns {string} Verarbeitete Diff-Daten\n */\nfunction processDiffForPrompt(diffOutput) {\n    try {\n        if (!diffOutput || diffOutput.trim().length === 0) {\n            return '';\n        }\n        \n        // Sehr große Diffs kürzen\n        const maxDiffLength = 2000;\n        if (diffOutput.length > maxDiffLength) {\n            // Nur die wichtigsten Teile behalten\n            const lines = diffOutput.split('\\n');\n            const fileHeaderLines = lines.filter(line => line.startsWith('diff --git') || line.startsWith('+++') || line.startsWith('---'));\n            const changedLines = lines.filter(line => line.startsWith('+') || line.startsWith('-'));\n            \n            // Kombination aus Header und einigen geänderten Zeilen\n            let result = fileHeaderLines.join('\\n') + '\\n';\n            result += '...\\n';\n            result += changedLines.slice(0, 30).join('\\n'); // Begrenzen auf 30 Zeilen\n            \n            if (changedLines.length > 30) {\n                result += '\\n...(weitere Änderungen gekürzt)';\n            }\n            \n            return result;\n        }\n        \n        return diffOutput;\n    } catch (error) {\n        handleError(error, \"Fehler bei der Verarbeitung der Diff-Daten\");\n        return diffOutput || '';\n    }\n}\n\n/**\n * Verarbeitet eine rohe Commit-Nachricht zur besseren Darstellung\n * @param {string} rawMessage Rohe Commit-Nachricht\n * @returns {string} Verarbeitete Commit-Nachricht\n */\nfunction processCommitMessage(rawMessage) {\n    try {\n        if (!rawMessage) {\n            return \"chore: auto commit\";\n        }\n        \n        let processedMessage = rawMessage.trim();\n        \n        // Entferne Markdown-Formatierung, wenn vorhanden\n        processedMessage = processedMessage.replace(/^#\\s+/gm, '');\n        \n        // Auf mehrere Zeilen prüfen und ggf. auf eine Zeile reduzieren\n        const lines = processedMessage.split('\\n').filter(line => line.trim().length > 0);\n        if (lines.length > 1) {\n            // Erste Zeile als Hauptnachricht, Rest als Beschreibung\n            const config = vscode.workspace.getConfiguration('comitto');\n            const gitSettings = config.get('gitSettings');\n            \n            // Prüfen, ob mehrzeilige Nachrichten erlaubt sind\n            if (gitSettings.allowMultilineMessages) {\n                // Formatiere mehrzeilige Nachricht entsprechend\n                return processedMessage;\n            } else {\n                // Nur die erste Zeile zurückgeben\n                return lines[0];\n            }\n        }\n        \n        return processedMessage;\n    } catch (error) {\n        handleError(error, \"Fehler bei der Verarbeitung der Commit-Nachricht\");\n        return rawMessage ? rawMessage.trim() : \"chore: auto commit\";\n    }\n}\n\n/**\n * Fehlerbehandlung für Commands\n * @param {Error} error Der aufgetretene Fehler\n * @param {string} context Kontext, in dem der Fehler aufgetreten ist\n * @param {boolean} showNotification Ob eine Benachrichtigung angezeigt werden soll\n */\nfunction handleError(error, context = 'Allgemeiner Fehler', showNotification = true) {\n    console.error(`Fehler in commands.js (${context}):`, error);\n    \n    if (showNotification) {\n        vscode.window.showErrorMessage(`Comitto Fehler: ${error.message}`);\n    }\n    \n    // Statusleiste aktualisieren\n    if (statusBarItemRef) {\n        updateStatusBarProgress(statusBarItemRef, 'Fehler', -1);\n        \n        // Nach 3 Sekunden auf normalen Status zurücksetzen\n        setTimeout(() => {\n            const config = vscode.workspace.getConfiguration('comitto');\n            const isEnabled = config.get('autoCommitEnabled');\n            updateStatusBarProgress(\n                statusBarItemRef, \n                isEnabled ? 'Aktiv' : 'Inaktiv',\n                isEnabled ? 100 : 0\n            );\n        }, 3000);\n    }\n    \n    // Fehler für die aufrufende Funktion weitergeben\n    throw error;\n}\n\n// Notwendige Exporte für externe Module\nmodule.exports = {\n    registerCommands,\n    generateCommitMessage,\n    handleError,\n    preparePromptTemplate,\n    processDiffForPrompt,\n    processCommitMessage\n}; ","module.exports = require(\"tty\");","module.exports = require(\"stream\");","module.exports = require(\"assert\");","module.exports = require(\"zlib\");","module.exports = require(\"events\");","module.exports = require(\"child_process\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"crypto\");","module.exports = require(\"url\");","module.exports = require(\"http\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [121,730], () => (__webpack_require__(286)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 121 ? \"vendor\" : chunkId) + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","installedChunks","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_unsupportedIterableToArray","_arrayLikeToArray","toString","Array","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","outputChannel","statusBarItem","fileWatcher","vscode","require","axios","path","exec","fs","ignore","ui","commands","_require2","executeGitCommand","ComittoError","getStatusText","ErrorTypes","logError","getErrorLogs","getDiagnosticInfo","withRetry","updateStatusBarProgress","os","changedFiles","WebviewPanel","Set","isCommitInProgress","lastCommitTime","gitignoreObj","uiProviders","intervalTimer","debugLogs","addDebugLog","message","undefined","logEntry","timestamp","Date","toISOString","unshift","console","error","warn","log","concat","debugLog","category","level","workspace","getConfiguration","get","formattedMessage","window","createOutputChannel","appendLine","show","logDir","join","process","env","HOME","USERPROFILE","existsSync","mkdirSync","recursive","logFile","split","appendFileSync","handleError","_x","_handleError","_callee2","contextMessage","showToUser","comittoError","viewDetailsButton","reportButton","messagePrefix","userMessage","issueBody","_args2","_context2","UNKNOWN","context","toJSON","showErrorMessage","showErrorDetails","encodeURIComponent","JSON","stringify","version","extensions","getExtension","packageJSON","openExternal","Uri","parse","panel","createWebviewPanel","ViewColumn","One","enableScripts","diagnosticInfo","webview","html","originalError","stack","onDidReceiveMessage","command","clipboard","writeText","text","showInformationMessage","showErrorLogs","logs","map","index","clearErrorLogs","dispose","showSaveDialog","defaultUri","file","homedir","filters","fileUri","writeFileSync","fsPath","_activate","_callee4","hasGit","_context4","ensureResourceDirs","registerUI","createStatusBarItem","StatusBarAlignment","Left","tooltip","subscriptions","checkGitRepository","executeCommand","registerCommands","setupFileWatcher","disableFileWatcher","performAutoCommit","showNotification","loadGitignore","registerCommand","_callee3","info","_context3","data","setupAutoBackgroundMonitoring","setTimeout","statusProvider","refresh","settingsProvider","quickActionsProvider","showWelcomeNotification","t0","_x3","_checkGitRepository","_callee5","workspaceFolders","repoPath","_context5","uri","dir","dirPath","joinPath","extensionUri","currentVersion","extension","globalState","selection","update","showNotifications","activeTextEditor","gitSettings","useGitignore","repositoryPath","gitignorePath","gitignoreContent","readFileSync","add","triggerRules","filePatterns","createFileSystemWatcher","onDidChange","isFileIgnored","checkCommitTrigger","onDidCreate","onDidDelete","onInterval","setupIntervalTrigger","intervalMinutes","minutes","clearInterval","setInterval","size","onTriggerFired","clear","filePath","includes","relativePath","relative","replace","ignores","rules","specificFiles","hasSpecificFileChanged","some","isArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","changed","hasMinChanges","minChangeCount","hasFileThreshold","fileCountThreshold","timeThresholdMs","timeThresholdMinutes","now","getTime","_performAutoCommit","_callee6","isManualTrigger","retryCount","MAX_RETRIES","config","gitStatus","diffOutput","fileList","commitMessage","dateStr","timeStr","_gitSettings","language","style","escapedMessage","notificationSettings","errorMessage","_args6","_context6","stageMode","stageChanges","t1","t2","trim","t3","t4","generateCommitMessage","generateWithOllama","generateWithOpenAI","generateWithAnthropic","t5","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","commitMessageLanguage","commitMessageStyle","branch","t6","t7","t8","onCommit","t9","autoPush","performAutoPush","t10","t11","onError","t12","_x4","_performAutoPush","_callee7","MAX_PUSH_RETRIES","currentBranch","pushOptions","pushCommand","pushSuccess","pushError","_loop","_ret","_context8","_context7","onPush","_x5","_stageChanges","_callee8","mode","gitStatusOutput","changedFilesList","selectedFiles","_iterator","_step","patterns","_iterator2","_step2","pattern","safePattern","_context9","filter","line","status","substring","showQuickPick","label","description","getStatusDescription","picked","canPickMany","placeHolder","_createForOfIteratorHelper","specificStagingPatterns","uiSettings","showWarningMessage","originalText","_callee","debugSettings","_context","absolutePath","extendedLogging","_x8","_generateWithOllama","_callee10","prompt","endpoint","ollamaConfig","model","ollamaModelOld","requestStart","apiEndpoint","response","requestDuration","evalDuration","totalDuration","_error$response","_error$response2","_error$response3","_context11","ConfigurationTarget","Global","endsWith","post","stream","options","temperature","num_predict","toFixed","eval_duration","total_duration","code","_x9","_generateWithOpenAI","_callee11","apiKey","_error$response4","_context12","messages","role","content","max_tokens","headers","choices","_x10","_generateWithAnthropic","_callee12","_error$response5","_context13","system","module","exports","activate","_x2","deactivate","_require","statusBarItemRef","_generateCommitMessage","_callee27","aiProvider","changes","promptTemplate","_context27","toUpperCase","isEnabled","providers","dashboardProvider","simpleUIProvider","_providers","newValue","simpleMode","_objectSpread","_callee9","themes","theme","_context10","onSave","onBranchSwitch","_callee13","currentPatterns","newPatterns","patternsArray","showInputBox","_callee14","currentValue","numValue","_context14","parseInt","_callee15","_context15","_callee16","_context16","_callee17","_context17","_callee18","_context18","_callee19","_context19","_callee20","models","openaiConfig","_context20","title","_callee21","currentKey","maskedKey","input","_context21","password","_callee22","anthropicConfig","_context22","_callee23","_context23","_callee25","currentTemplate","document","disposable","_context25","openTextDocument","showTextDocument","onDidSaveTextDocument","_ref25","_callee24","doc","newTemplate","_context24","getText","_callee26","_vscode$extensions$ge","gitExtension","git","_context26","getAPI","repositories","_x6","preparePromptTemplate","template","truncatedDiff","processDiffForPrompt","lines","fileHeaderLines","startsWith","changedLines","result","processCommitMessage","rawMessage","processedMessage","allowMultilineMessages","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","chunkId","all","reduce","promises","obj","prop","chunk","moreModules","modules","ids","runtime","installChunk"],"sourceRoot":""}