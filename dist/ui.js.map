{"version":3,"file":"ui.js","mappings":"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","sources":["webpack://comitto/external commonjs \"vscode\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/./ui.js","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/startup"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"path\");","const vscode = require('vscode');\r\nconst path = require('path');\r\n\r\n/**\r\n * Klasse für die Statusanzeige in der Seitenleiste\r\n * Erweiterte Implementierung mit verbesserten visuellen Elementen und Gruppierung\r\n */\r\nclass StatusViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            // Unterelemente für gruppierte Ansicht\r\n            return this._getSubItems(element);\r\n        }\r\n\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        // Statusgruppe erstellen\r\n        const statusGroup = new vscode.TreeItem(\r\n            'Status and Quick Access',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        statusGroup.contextValue = 'status-group';\r\n        statusGroup.iconPath = new vscode.ThemeIcon('pulse');\r\n        statusGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(statusGroup);\r\n\r\n        // Konfigurationsgruppe erstellen\r\n        const configGroup = new vscode.TreeItem(\r\n            'Configuration',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        configGroup.contextValue = 'config-group';\r\n        configGroup.iconPath = new vscode.ThemeIcon('settings');\r\n        configGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(configGroup);\r\n\r\n        // Aktionsgruppe erstellen\r\n        const actionGroup = new vscode.TreeItem(\r\n            'Actions',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        actionGroup.contextValue = 'action-group';\r\n        actionGroup.iconPath = new vscode.ThemeIcon('run-all');\r\n        actionGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(actionGroup);\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Liefert Unterelemente für gruppierte Ansicht\r\n     * @param {vscode.TreeItem} element Das Übergeordnete Element\r\n     * @returns {Promise<vscode.TreeItem[]>} Liste der Unterelemente\r\n     */\r\n    async _getSubItems(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'status-group':\r\n                // Status-Element mit verbesserter Visualisierung\r\n                const statusItem = new vscode.TreeItem(\r\n                    `Status: ${enabled ? 'Enabled' : 'Disabled'}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                statusItem.contextValue = enabled ? 'comitto-status-enabled' : 'comitto-status-disabled';\r\n                statusItem.iconPath = new vscode.ThemeIcon(enabled ? 'check' : 'circle-slash');\r\n                statusItem.tooltip = enabled ? 'Comitto monitors changes' : 'Comitto is currently disabled';\r\n                statusItem.command = {\r\n                    command: enabled ? 'comitto.disableAutoCommit' : 'comitto.enableAutoCommit',\r\n                    title: enabled ? 'Disable' : 'Enable'\r\n                };\r\n                items.push(statusItem);\r\n\r\n                // Einfache Benutzeroberfläche öffnen\r\n                const simpleUIItem = new vscode.TreeItem(\r\n                    'Simple User Interface',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                simpleUIItem.iconPath = new vscode.ThemeIcon('rocket');\r\n                simpleUIItem.tooltip = 'Opens a simple interface for easy settings';\r\n                simpleUIItem.command = {\r\n                    command: 'comitto.showSimpleUI',\r\n                    title: 'Open Simple User Interface'\r\n                };\r\n                items.push(simpleUIItem);\r\n\r\n                // Dashboard öffnen\r\n                const dashboardItem = new vscode.TreeItem(\r\n                    'Show Dashboard',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                dashboardItem.iconPath = new vscode.ThemeIcon('dashboard');\r\n                dashboardItem.tooltip = 'Shows the complete Comitto dashboard';\r\n                dashboardItem.command = {\r\n                    command: 'comitto.showDashboard',\r\n                    title: 'Show Dashboard'\r\n                };\r\n                items.push(dashboardItem);\r\n                break;\r\n\r\n            case 'config-group':\r\n                // AI Provider mit mehr Details und exklusiver Auswahl\r\n                const provider = config.get('aiProvider');\r\n                const providerItem = new vscode.TreeItem(\r\n                    `KI-Provider: ${getProviderDisplayName(provider)}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                providerItem.iconPath = getProviderIcon(provider);\r\n                providerItem.tooltip = `Current KI-Provider for commit messages: ${getProviderDisplayName(provider)}`;\r\n                providerItem.command = {\r\n                    command: 'comitto.configureAIProvider',\r\n                    title: 'Configure KI-Provider'\r\n                };\r\n                items.push(providerItem);\r\n\r\n                // Git-Einstellungen anzeigen\r\n                const gitSettings = config.get('gitSettings');\r\n                const commitLanguage = gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch';\r\n                const autoPushStatus = gitSettings.autoPush ? 'Mit Auto-Push' : 'Ohne Auto-Push';\r\n                const stageMode = gitSettings.stageMode === 'all' ? 'Alle Dateien stagen' : \r\n                                gitSettings.stageMode === 'specific' ? 'Spezifische Dateien stagen' :\r\n                                'Nachfragen';\r\n                \r\n                const gitItem = new vscode.TreeItem(\r\n                    `Git: ${commitLanguage}, ${autoPushStatus}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                gitItem.iconPath = new vscode.ThemeIcon('git-merge');\r\n                gitItem.tooltip = `Branch: ${gitSettings.branch || 'Aktuell'}, Sprache: ${gitSettings.commitMessageLanguage}, Stil: ${gitSettings.commitMessageStyle}, Stage-Modus: ${stageMode}`;\r\n                gitItem.command = {\r\n                    command: 'comitto.openSettings',\r\n                    title: 'Edit Git Settings'\r\n                };\r\n                items.push(gitItem);\r\n\r\n                // Trigger-Regeln mit mehr Details\r\n                const rules = config.get('triggerRules');\r\n                let triggerDescription = `${rules.fileCountThreshold} Dateien / ${rules.minChangeCount} Änderungen`;\r\n                \r\n                // Aktivierte Trigger anzeigen\r\n                const activeTriggers = [];\r\n                if (rules.onSave) activeTriggers.push('Bei Speichern');\r\n                if (rules.onInterval) activeTriggers.push(`Alle ${rules.intervalMinutes}min`);\r\n                if (rules.onBranchSwitch) activeTriggers.push('Bei Branch-Wechsel');\r\n                \r\n                if (activeTriggers.length > 0) {\r\n                    triggerDescription += ` (${activeTriggers.join(', ')})`;\r\n                }\r\n                \r\n                const rulesItem = new vscode.TreeItem(\r\n                    `Trigger: ${triggerDescription}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                rulesItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n                rulesItem.tooltip = `Commit bei ${rules.fileCountThreshold} Dateien, ${rules.minChangeCount} Änderungen oder nach ${rules.timeThresholdMinutes} Minuten\\nAktive Trigger: ${activeTriggers.join(', ')}`;\r\n                rulesItem.command = {\r\n                    command: 'comitto.configureTriggers',\r\n                    title: 'Configure Triggers'\r\n                };\r\n                items.push(rulesItem);\r\n                break;\r\n\r\n            case 'action-group':\r\n                // Manuellen Commit-Button hinzufügen\r\n                const manualCommitItem = new vscode.TreeItem(\r\n                    'Perform Manual Commit',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                manualCommitItem.iconPath = new vscode.ThemeIcon('git-commit');\r\n                manualCommitItem.tooltip = 'Führt einen manuellen Commit mit KI-generierter Nachricht aus';\r\n                manualCommitItem.command = {\r\n                    command: 'comitto.performManualCommit',\r\n                    title: 'Perform Manual Commit'\r\n                };\r\n                items.push(manualCommitItem);\r\n\r\n                // Staging-Buttons hinzufügen\r\n                const stageAllItem = new vscode.TreeItem(\r\n                    'Stage All Changes',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageAllItem.iconPath = new vscode.ThemeIcon('add');\r\n                stageAllItem.tooltip = 'Stagt alle geänderten Dateien für den nächsten Commit';\r\n                stageAllItem.command = {\r\n                    command: 'comitto.stageAll',\r\n                    title: 'Stage All Changes'\r\n                };\r\n                items.push(stageAllItem);\r\n\r\n                const stageSelectedItem = new vscode.TreeItem(\r\n                    'Stage Selected Files',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageSelectedItem.iconPath = new vscode.ThemeIcon('checklist');\r\n                stageSelectedItem.tooltip = 'Erlaubt die Auswahl bestimmter Dateien zum Stagen';\r\n                stageSelectedItem.command = {\r\n                    command: 'comitto.stageSelected',\r\n                    title: 'Stage Selected Files'\r\n                };\r\n                items.push(stageSelectedItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Einstellungen in der Seitenleiste\r\n * Verbesserte Implementierung mit visuellen Verbesserungen und logischer Gruppierung\r\n */\r\nclass SettingsViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            return this._getSubSettings(element);\r\n        }\r\n\r\n        // Hauptkategorien für Einstellungen mit verbesserten Icons und Beschreibungen\r\n        const items = [];\r\n\r\n        // KI-Provider-Einstellungen\r\n        const aiItem = new vscode.TreeItem(\r\n            'KI-Provider Settings',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        aiItem.contextValue = 'ai-provider';\r\n        aiItem.iconPath = new vscode.ThemeIcon('symbol-enum');\r\n        aiItem.tooltip = 'Configuration of KI-Providers for generating commit messages';\r\n        items.push(aiItem);\r\n\r\n        // Trigger-Einstellungen\r\n        const triggerItem = new vscode.TreeItem(\r\n            'Trigger Rules',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        triggerItem.contextValue = 'trigger-rules';\r\n        triggerItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n        triggerItem.tooltip = 'Configuration of triggers for automatic commits';\r\n        items.push(triggerItem);\r\n\r\n        // Git-Einstellungen\r\n        const gitItem = new vscode.TreeItem(\r\n            'Git Settings',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        gitItem.contextValue = 'git-settings';\r\n        gitItem.iconPath = new vscode.ThemeIcon('git-merge');\r\n        gitItem.tooltip = 'Configuration of Git-related settings for commits';\r\n        items.push(gitItem);\r\n\r\n        // Prompt-Vorlage\r\n        const promptItem = new vscode.TreeItem(\r\n            'Prompt Template',\r\n            vscode.TreeItemCollapsibleState.None\r\n        );\r\n        promptItem.contextValue = 'prompt-template';\r\n        promptItem.iconPath = new vscode.ThemeIcon('edit');\r\n        promptItem.tooltip = 'Customization of the template for generating commit messages';\r\n        promptItem.command = {\r\n            command: 'comitto.editPromptTemplate',\r\n            title: 'Edit Prompt Template'\r\n        };\r\n        items.push(promptItem);\r\n\r\n        // UI-Einstellungen\r\n        const uiItem = new vscode.TreeItem(\r\n            'User Interface',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        uiItem.contextValue = 'ui-settings';\r\n        uiItem.iconPath = new vscode.ThemeIcon('layout');\r\n        uiItem.tooltip = 'Settings for the user interface and notifications';\r\n        items.push(uiItem);\r\n\r\n        // Benachrichtigungs-Einstellungen\r\n        const notificationItem = new vscode.TreeItem(\r\n            'Notifications',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        notificationItem.contextValue = 'notification-settings';\r\n        notificationItem.iconPath = new vscode.ThemeIcon('bell');\r\n        notificationItem.tooltip = 'Configuration of notifications and messages';\r\n        items.push(notificationItem);\r\n\r\n        return items;\r\n    }\r\n\r\n    async _getSubSettings(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'ai-provider':\r\n                // KI-Provider auswählen\r\n                const aiProvider = config.get('aiProvider');\r\n                const providerItem = new vscode.TreeItem(`Active Provider: ${getProviderDisplayName(aiProvider)}`);\r\n                providerItem.iconPath = getProviderIcon(aiProvider);\r\n                providerItem.tooltip = 'Select the KI-Provider for generating commit messages';\r\n                providerItem.command = {\r\n                    command: 'comitto.selectAiProvider',\r\n                    title: 'Select KI-Provider'\r\n                };\r\n                items.push(providerItem);\r\n\r\n                // Provider-spezifische Einstellungen basierend auf dem ausgewählten Provider\r\n                if (aiProvider === 'ollama') {\r\n                    const ollamaEndpoint = config.get('ollama.endpoint');\r\n                    const ollamaEndpointItem = new vscode.TreeItem(`Ollama Endpoint: ${ollamaEndpoint}`);\r\n                    ollamaEndpointItem.iconPath = new vscode.ThemeIcon('link');\r\n                    ollamaEndpointItem.tooltip = 'Configure the API endpoint for the Ollama service';\r\n                    ollamaEndpointItem.command = {\r\n                        command: 'comitto.openSettings',\r\n                        title: 'Configure Ollama Settings'\r\n                    };\r\n                    items.push(ollamaEndpointItem);\r\n\r\n                    const ollamaModel = config.get('ollama.model');\r\n                    const ollamaModelItem = new vscode.TreeItem(`Ollama Model: ${ollamaModel}`);\r\n                    ollamaModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    ollamaModelItem.tooltip = 'Select the Ollama model to use';\r\n                    ollamaModelItem.command = {\r\n                        command: 'comitto.openSettings',\r\n                        title: 'Configure Ollama Settings'\r\n                    };\r\n                    items.push(ollamaModelItem);\r\n                } else if (aiProvider === 'openai') {\r\n                    const openaiModel = config.get('openai.model');\r\n                    const openaiModelItem = new vscode.TreeItem(`OpenAI Model: ${openaiModel}`);\r\n                    openaiModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    openaiModelItem.tooltip = 'Select the OpenAI model to use';\r\n                    openaiModelItem.command = {\r\n                        command: 'comitto.selectOpenAIModel',\r\n                        title: 'Select OpenAI Model'\r\n                    };\r\n                    items.push(openaiModelItem);\r\n\r\n                    const hasKey = config.get('openai.apiKey') !== '';\r\n                    const openaiKeyItem = new vscode.TreeItem(`API Key: ${hasKey ? 'Set' : 'Not set'}`);\r\n                    openaiKeyItem.iconPath = new vscode.ThemeIcon(hasKey ? 'key' : 'warning');\r\n                    openaiKeyItem.tooltip = 'Configure the API key for OpenAI';\r\n                    openaiKeyItem.command = {\r\n                        command: 'comitto.editOpenAIKey',\r\n                        title: 'Edit OpenAI API Key'\r\n                    };\r\n                    items.push(openaiKeyItem);\r\n                } else if (aiProvider === 'anthropic') {\r\n                    const anthropicModel = config.get('anthropic.model');\r\n                    const anthropicModelItem = new vscode.TreeItem(`Anthropic Model: ${anthropicModel}`);\r\n                    anthropicModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    anthropicModelItem.tooltip = 'Select the Anthropic model to use';\r\n                    anthropicModelItem.command = {\r\n                        command: 'comitto.selectAnthropicModel',\r\n                        title: 'Select Anthropic Model'\r\n                    };\r\n                    items.push(anthropicModelItem);\r\n\r\n                    const hasKey = config.get('anthropic.apiKey') !== '';\r\n                    const anthropicKeyItem = new vscode.TreeItem(`API Key: ${hasKey ? 'Set' : 'Not set'}`);\r\n                    anthropicKeyItem.iconPath = new vscode.ThemeIcon(hasKey ? 'key' : 'warning');\r\n                    anthropicKeyItem.tooltip = 'Configure the API key for Anthropic';\r\n                    anthropicKeyItem.command = {\r\n                        command: 'comitto.editAnthropicKey',\r\n                        title: 'Edit Anthropic API Key'\r\n                    };\r\n                    items.push(anthropicKeyItem);\r\n                }\r\n                break;\r\n\r\n            case 'trigger-rules':\r\n                const rules = config.get('triggerRules');\r\n                \r\n                // File Count Threshold\r\n                const fileCountItem = new vscode.TreeItem(\r\n                    `File Count Threshold: ${rules.fileCountThreshold}`\r\n                );\r\n                fileCountItem.iconPath = new vscode.ThemeIcon('files');\r\n                fileCountItem.tooltip = 'The number of files that must be changed for an automatic commit';\r\n                fileCountItem.command = {\r\n                    command: 'comitto.editFileCountThreshold',\r\n                    title: 'Edit File Count Threshold'\r\n                };\r\n                items.push(fileCountItem);\r\n\r\n                // Min Change Count\r\n                const changeCountItem = new vscode.TreeItem(\r\n                    `Change Count Threshold: ${rules.minChangeCount}`\r\n                );\r\n                changeCountItem.iconPath = new vscode.ThemeIcon('edit');\r\n                changeCountItem.tooltip = 'The minimum number of changes for an automatic commit';\r\n                changeCountItem.command = {\r\n                    command: 'comitto.editMinChangeCount',\r\n                    title: 'Edit Change Count Threshold'\r\n                };\r\n                items.push(changeCountItem);\r\n\r\n                // Time Threshold\r\n                const timeItem = new vscode.TreeItem(\r\n                    `Time Threshold: ${rules.timeThresholdMinutes} Minutes`\r\n                );\r\n                timeItem.iconPath = new vscode.ThemeIcon('watch');\r\n                timeItem.tooltip = 'The time span in minutes before a commit is triggered';\r\n                timeItem.command = {\r\n                    command: 'comitto.editTimeThreshold',\r\n                    title: 'Edit Time Threshold'\r\n                };\r\n                items.push(timeItem);\r\n\r\n                // Trigger Options\r\n                const triggerOptionsItem = new vscode.TreeItem('Trigger Options');\r\n                triggerOptionsItem.iconPath = new vscode.ThemeIcon('settings');\r\n                \r\n                // On Save Trigger\r\n                const onSaveItem = new vscode.TreeItem(\r\n                    `On Save: ${rules.onSave ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                onSaveItem.iconPath = new vscode.ThemeIcon(rules.onSave ? 'check' : 'x');\r\n                onSaveItem.command = {\r\n                    command: 'comitto.toggleOnSave',\r\n                    title: 'Toggle On Save Trigger'\r\n                };\r\n                items.push(onSaveItem);\r\n\r\n                // On Interval Trigger\r\n                const onIntervalItem = new vscode.TreeItem(\r\n                    `On Interval: ${rules.onInterval ? `Enabled (${rules.intervalMinutes}min)` : 'Disabled'}`\r\n                );\r\n                onIntervalItem.iconPath = new vscode.ThemeIcon(rules.onInterval ? 'check' : 'x');\r\n                onIntervalItem.command = {\r\n                    command: 'comitto.toggleOnInterval',\r\n                    title: 'Toggle On Interval Trigger'\r\n                };\r\n                items.push(onIntervalItem);\r\n\r\n                // On Branch Switch\r\n                const onBranchItem = new vscode.TreeItem(\r\n                    `On Branch Switch: ${rules.onBranchSwitch ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                onBranchItem.iconPath = new vscode.ThemeIcon(rules.onBranchSwitch ? 'check' : 'x');\r\n                onBranchItem.command = {\r\n                    command: 'comitto.toggleOnBranchSwitch',\r\n                    title: 'Toggle On Branch Switch Trigger'\r\n                };\r\n                items.push(onBranchItem);\r\n                \r\n                // File Patterns\r\n                const filePatternsText = rules.filePatterns.length > 0 \r\n                    ? rules.filePatterns.join(', ')\r\n                    : '(None)';\r\n                const filePatternsItem = new vscode.TreeItem(\r\n                    `File Patterns: ${filePatternsText.length > 30 ? filePatternsText.substring(0, 30) + '...' : filePatternsText}`\r\n                );\r\n                filePatternsItem.iconPath = new vscode.ThemeIcon('filter');\r\n                filePatternsItem.tooltip = `Currently monitored file patterns: ${rules.filePatterns.join(', ')}`;\r\n                filePatternsItem.command = {\r\n                    command: 'comitto.editFilePatterns',\r\n                    title: 'Edit File Patterns'\r\n                };\r\n                items.push(filePatternsItem);\r\n                break;\r\n\r\n            case 'git-settings':\r\n                const gitSettings = config.get('gitSettings');\r\n                \r\n                // Commit Message Language\r\n                const languageItem = new vscode.TreeItem(\r\n                    `Commit Language: ${gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch'}`\r\n                );\r\n                languageItem.iconPath = new vscode.ThemeIcon('globe');\r\n                languageItem.tooltip = 'The language in which commit messages are generated';\r\n                languageItem.command = {\r\n                    command: 'comitto.selectCommitLanguage',\r\n                    title: 'Select Commit Language'\r\n                };\r\n                items.push(languageItem);\r\n                \r\n                // Auto Push\r\n                const autoPushItem = new vscode.TreeItem(\r\n                    `Auto Push: ${gitSettings.autoPush ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                autoPushItem.iconPath = new vscode.ThemeIcon(gitSettings.autoPush ? 'cloud-upload' : 'x');\r\n                autoPushItem.tooltip = 'Whether to push after a commit';\r\n                autoPushItem.command = {\r\n                    command: 'comitto.toggleAutoPush',\r\n                    title: 'Toggle Auto Push'\r\n                };\r\n                items.push(autoPushItem);\r\n                \r\n                // Branch\r\n                const branchItem = new vscode.TreeItem(\r\n                    `Branch: ${gitSettings.branch || 'Aktuell'}`\r\n                );\r\n                branchItem.iconPath = new vscode.ThemeIcon('git-branch');\r\n                branchItem.tooltip = 'The branch to use for commits (empty for current branch)';\r\n                branchItem.command = {\r\n                    command: 'comitto.editBranch',\r\n                    title: 'Edit Branch'\r\n                };\r\n                items.push(branchItem);\r\n                \r\n                // Commit Message Style\r\n                const styleItem = new vscode.TreeItem(\r\n                    `Commit Style: ${gitSettings.commitMessageStyle === 'conventional' ? 'Conventional' : 'Gitmoji'}`\r\n                );\r\n                styleItem.iconPath = new vscode.ThemeIcon('symbol-string');\r\n                styleItem.tooltip = 'The style of generated commit messages';\r\n                styleItem.command = {\r\n                    command: 'comitto.selectCommitStyle',\r\n                    title: 'Select Commit Style'\r\n                };\r\n                items.push(styleItem);\r\n                \r\n                // Stage Mode\r\n                const stageMode = gitSettings.stageMode === 'all' ? 'Alle Dateien' : \r\n                                gitSettings.stageMode === 'specific' ? 'Spezifische Dateien' :\r\n                                'Nachfragen';\r\n                const stageModeItem = new vscode.TreeItem(\r\n                    `Stage Mode: ${stageMode}`\r\n                );\r\n                stageModeItem.iconPath = new vscode.ThemeIcon('staged');\r\n                stageModeItem.tooltip = 'How files should be staged for commits';\r\n                stageModeItem.command = {\r\n                    command: 'comitto.selectStageMode',\r\n                    title: 'Select Stage Mode'\r\n                };\r\n                items.push(stageModeItem);\r\n                \r\n                // Staging Patterns (if mode is 'specific')\r\n                if (gitSettings.stageMode === 'specific') {\r\n                    const patternsText = gitSettings.specificStagingPatterns.length > 0 \r\n                        ? gitSettings.specificStagingPatterns.join(', ')\r\n                        : '(None)';\r\n                    const stagingPatternsItem = new vscode.TreeItem(\r\n                        `Staging Patterns: ${patternsText.length > 30 ? patternsText.substring(0, 30) + '...' : patternsText}`\r\n                    );\r\n                    stagingPatternsItem.iconPath = new vscode.ThemeIcon('filter');\r\n                    stagingPatternsItem.tooltip = `File patterns for specific staging: ${gitSettings.specificStagingPatterns.join(', ')}`;\r\n                    stagingPatternsItem.command = {\r\n                        command: 'comitto.editStagingPatterns',\r\n                        title: 'Edit Staging Patterns'\r\n                    };\r\n                    items.push(stagingPatternsItem);\r\n                }\r\n                \r\n                // Use Gitignore\r\n                const useGitignore = gitSettings.useGitignore !== undefined ? gitSettings.useGitignore : true;\r\n                const gitignoreItem = new vscode.TreeItem(\r\n                    `Use Gitignore: ${useGitignore ? 'Yes' : 'No'}`\r\n                );\r\n                gitignoreItem.iconPath = new vscode.ThemeIcon(useGitignore ? 'check' : 'x');\r\n                gitignoreItem.tooltip = 'Whether to consider the .gitignore file when monitoring';\r\n                gitignoreItem.command = {\r\n                    command: 'comitto.toggleUseGitignore',\r\n                    title: 'Toggle Use Gitignore'\r\n                };\r\n                items.push(gitignoreItem);\r\n                break;\r\n\r\n            case 'ui-settings':\r\n                const uiSettings = config.get('uiSettings');\r\n                \r\n                // Simple Mode\r\n                const simpleModeItem = new vscode.TreeItem(\r\n                    `Simple Mode: ${uiSettings.simpleMode ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                simpleModeItem.iconPath = new vscode.ThemeIcon(uiSettings.simpleMode ? 'check' : 'x');\r\n                simpleModeItem.tooltip = 'Whether to use the simplified user interface';\r\n                simpleModeItem.command = {\r\n                    command: 'comitto.toggleSimpleMode',\r\n                    title: 'Toggle Simple Mode'\r\n                };\r\n                items.push(simpleModeItem);\r\n                \r\n                // Confirm Before Commit\r\n                const confirmItem = new vscode.TreeItem(\r\n                    `Confirm Before Commit: ${uiSettings.confirmBeforeCommit ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                confirmItem.iconPath = new vscode.ThemeIcon(uiSettings.confirmBeforeCommit ? 'check' : 'x');\r\n                confirmItem.tooltip = 'Whether to prompt for confirmation before a commit';\r\n                confirmItem.command = {\r\n                    command: 'comitto.toggleConfirmBeforeCommit',\r\n                    title: 'Toggle Confirm Before Commit'\r\n                };\r\n                items.push(confirmItem);\r\n                \r\n                // Show Notifications\r\n                const notifyItem = new vscode.TreeItem(\r\n                    `Show Notifications: ${uiSettings.showNotifications ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                notifyItem.iconPath = new vscode.ThemeIcon(uiSettings.showNotifications ? 'check' : 'x');\r\n                notifyItem.tooltip = 'Whether to show notifications';\r\n                notifyItem.command = {\r\n                    command: 'comitto.toggleShowNotifications',\r\n                    title: 'Toggle Show Notifications'\r\n                };\r\n                items.push(notifyItem);\r\n                \r\n                // Theme\r\n                const themeItem = new vscode.TreeItem(\r\n                    `Theme: ${getThemeLabel(uiSettings.theme)}`\r\n                );\r\n                themeItem.iconPath = new vscode.ThemeIcon('symbol-color');\r\n                themeItem.tooltip = 'The theme to use';\r\n                themeItem.command = {\r\n                    command: 'comitto.selectTheme',\r\n                    title: 'Select Theme'\r\n                };\r\n                items.push(themeItem);\r\n                break;\r\n\r\n            case 'notification-settings':\r\n                const notifications = config.get('notifications');\r\n                \r\n                // On Commit\r\n                const onCommitItem = new vscode.TreeItem(\r\n                    `On Commit: ${notifications.onCommit ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                onCommitItem.iconPath = new vscode.ThemeIcon(notifications.onCommit ? 'check' : 'x');\r\n                onCommitItem.tooltip = 'Whether to show notifications for successful commits';\r\n                onCommitItem.command = {\r\n                    command: 'comitto.toggleNotificationOnCommit',\r\n                    title: 'Toggle On Commit Notification'\r\n                };\r\n                items.push(onCommitItem);\r\n                \r\n                // On Push\r\n                const onPushItem = new vscode.TreeItem(\r\n                    `On Push: ${notifications.onPush ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                onPushItem.iconPath = new vscode.ThemeIcon(notifications.onPush ? 'check' : 'x');\r\n                onPushItem.tooltip = 'Whether to show notifications for successful pushes';\r\n                onPushItem.command = {\r\n                    command: 'comitto.toggleNotificationOnPush',\r\n                    title: 'Toggle On Push Notification'\r\n                };\r\n                items.push(onPushItem);\r\n                \r\n                // On Error\r\n                const onErrorItem = new vscode.TreeItem(\r\n                    `On Error: ${notifications.onError ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                onErrorItem.iconPath = new vscode.ThemeIcon(notifications.onError ? 'check' : 'x');\r\n                onErrorItem.tooltip = 'Whether to show notifications for errors';\r\n                onErrorItem.command = {\r\n                    command: 'comitto.toggleNotificationOnError',\r\n                    title: 'Toggle On Error Notification'\r\n                };\r\n                items.push(onErrorItem);\r\n                \r\n                // On Trigger Fired\r\n                const onTriggerItem = new vscode.TreeItem(\r\n                    `On Trigger Fired: ${notifications.onTriggerFired ? 'Enabled' : 'Disabled'}`\r\n                );\r\n                onTriggerItem.iconPath = new vscode.ThemeIcon(notifications.onTriggerFired ? 'check' : 'x');\r\n                onTriggerItem.tooltip = 'Whether to show notifications for trigger firings';\r\n                onTriggerItem.command = {\r\n                    command: 'comitto.toggleNotificationOnTriggerFired',\r\n                    title: 'Toggle On Trigger Notification'\r\n                };\r\n                items.push(onTriggerItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Schnellaktionen in der Seitenleiste\r\n * Verbesserte Implementierung mit visuellen Verbesserungen und logischer Gruppierung\r\n */\r\nclass QuickActionsViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            return this._getSubActions(element);\r\n        }\r\n\r\n        // Hauptgruppen für Schnellaktionen\r\n        const items = [];\r\n\r\n        // Commit-Aktionen\r\n        const commitGroup = new vscode.TreeItem(\r\n            'Commit Actions',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        commitGroup.contextValue = 'commit-actions';\r\n        commitGroup.iconPath = new vscode.ThemeIcon('git-commit');\r\n        items.push(commitGroup);\r\n\r\n        // Git-Aktionen\r\n        const gitGroup = new vscode.TreeItem(\r\n            'Git Actions',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        gitGroup.contextValue = 'git-actions';\r\n        gitGroup.iconPath = new vscode.ThemeIcon('source-control');\r\n        items.push(gitGroup);\r\n\r\n        // Einstellungs-Aktionen\r\n        const configGroup = new vscode.TreeItem(\r\n            'Configuration Actions',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        configGroup.contextValue = 'config-actions';\r\n        configGroup.iconPath = new vscode.ThemeIcon('gear');\r\n        items.push(configGroup);\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Liefert Unterelemente für gruppierte Aktionen\r\n     * @param {vscode.TreeItem} element Das Übergeordnete Element\r\n     * @returns {Promise<vscode.TreeItem[]>} Liste der Unterelemente\r\n     */\r\n    async _getSubActions(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'commit-actions':\r\n                // Comitto aktivieren/deaktivieren\r\n                const toggleItem = new vscode.TreeItem(\r\n                    `Toggle Comitto ${enabled ? 'Disabled' : 'Enabled'}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                toggleItem.iconPath = new vscode.ThemeIcon(enabled ? 'circle-slash' : 'check');\r\n                toggleItem.tooltip = enabled ? 'Deaktiviert die automatischen Commits' : 'Aktiviert die automatischen Commits';\r\n                toggleItem.command = {\r\n                    command: 'comitto.toggleAutoCommit',\r\n                    title: `Toggle Comitto ${enabled ? 'Disabled' : 'Enabled'}`\r\n                };\r\n                items.push(toggleItem);\r\n\r\n                // Manueller Commit\r\n                const manualCommitItem = new vscode.TreeItem(\r\n                    'Perform Manual Commit',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                manualCommitItem.iconPath = new vscode.ThemeIcon('git-commit');\r\n                manualCommitItem.tooltip = 'Führt einen manuellen Commit mit KI-generierter Nachricht aus';\r\n                manualCommitItem.command = {\r\n                    command: 'comitto.performManualCommit',\r\n                    title: 'Perform Manual Commit'\r\n                };\r\n                items.push(manualCommitItem);\r\n                break;\r\n\r\n            case 'git-actions':\r\n                // Alle Änderungen stagen\r\n                const stageAllItem = new vscode.TreeItem(\r\n                    'Stage All Changes',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageAllItem.iconPath = new vscode.ThemeIcon('add');\r\n                stageAllItem.tooltip = 'Stagt alle geänderten Dateien für den nächsten Commit';\r\n                stageAllItem.command = {\r\n                    command: 'comitto.stageAll',\r\n                    title: 'Stage All Changes'\r\n                };\r\n                items.push(stageAllItem);\r\n\r\n                // Ausgewählte Dateien stagen\r\n                const stageSelectedItem = new vscode.TreeItem(\r\n                    'Stage Selected Files',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageSelectedItem.iconPath = new vscode.ThemeIcon('checklist');\r\n                stageSelectedItem.tooltip = 'Erlaubt die Auswahl bestimmter Dateien zum Stagen';\r\n                stageSelectedItem.command = {\r\n                    command: 'comitto.stageSelected',\r\n                    title: 'Stage Selected Files'\r\n                };\r\n                items.push(stageSelectedItem);\r\n\r\n                // Git-Einstellungen bearbeiten\r\n                const gitSettingsItem = new vscode.TreeItem(\r\n                    'Edit Git Settings',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                gitSettingsItem.iconPath = new vscode.ThemeIcon('gear');\r\n                gitSettingsItem.tooltip = 'Öffnet die Git-Einstellungen zur Bearbeitung';\r\n                gitSettingsItem.command = {\r\n                    command: 'comitto.openSettings',\r\n                    title: 'Edit Git Settings'\r\n                };\r\n                items.push(gitSettingsItem);\r\n                break;\r\n\r\n            case 'config-actions':\r\n                // KI-Provider konfigurieren\r\n                const configAIItem = new vscode.TreeItem(\r\n                    'Configure KI-Provider',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                configAIItem.iconPath = new vscode.ThemeIcon('symbol-misc');\r\n                configAIItem.tooltip = 'Öffnet die KI-Provider-Konfiguration';\r\n                configAIItem.command = {\r\n                    command: 'comitto.configureAIProvider',\r\n                    title: 'Configure KI-Provider'\r\n                };\r\n                items.push(configAIItem);\r\n\r\n                // Trigger konfigurieren\r\n                const configTriggersItem = new vscode.TreeItem(\r\n                    'Configure Triggers',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                configTriggersItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n                configTriggersItem.tooltip = 'Öffnet die Trigger-Konfiguration';\r\n                configTriggersItem.command = {\r\n                    command: 'comitto.configureTriggers',\r\n                    title: 'Configure Triggers'\r\n                };\r\n                items.push(configTriggersItem);\r\n\r\n                // Einfache UI anzeigen\r\n                const simpleUIItem = new vscode.TreeItem(\r\n                    'Open Simple User Interface',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                simpleUIItem.iconPath = new vscode.ThemeIcon('rocket');\r\n                simpleUIItem.tooltip = 'Öffnet die vereinfachte Benutzeroberfläche';\r\n                simpleUIItem.command = {\r\n                    command: 'comitto.showSimpleUI',\r\n                    title: 'Open Simple User Interface'\r\n                };\r\n                items.push(simpleUIItem);\r\n\r\n                // Dashboard anzeigen\r\n                const dashboardItem = new vscode.TreeItem(\r\n                    'Show Dashboard',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                dashboardItem.iconPath = new vscode.ThemeIcon('dashboard');\r\n                dashboardItem.tooltip = 'Öffnet das Comitto-Dashboard';\r\n                dashboardItem.command = {\r\n                    command: 'comitto.showDashboard',\r\n                    title: 'Show Dashboard'\r\n                };\r\n                items.push(dashboardItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Dashboard-Anzeige in einem Webview-Panel\r\n */\r\nclass DashboardProvider {\r\n    constructor(context) {\r\n        this._context = context;\r\n        this._panel = null;\r\n    }\r\n\r\n    /**\r\n     * Zeigt das Dashboard-Panel an\r\n     */\r\n    show() {\r\n        // Falls das Panel bereits geöffnet ist, dieses in den Vordergrund stellen\r\n        if (this._panel) {\r\n            this._panel.reveal();\r\n            return;\r\n        }\r\n\r\n        // Neues Panel erstellen\r\n        this._panel = vscode.window.createWebviewPanel(\r\n            'comittoDashboard',\r\n            'Comitto Dashboard',\r\n            vscode.ViewColumn.One,\r\n            {\r\n                enableScripts: true,\r\n                retainContextWhenHidden: true,\r\n                localResourceRoots: [\r\n                    vscode.Uri.file(path.join(this._context.extensionPath, 'resources'))\r\n                ]\r\n            }\r\n        );\r\n\r\n        // Basis-URI für lokale Ressourcen\r\n        const resourcesBaseUri = this._panel.webview.asWebviewUri(\r\n            vscode.Uri.file(path.join(this._context.extensionPath, 'resources'))\r\n        );\r\n\r\n        // HTML-Inhalt generieren\r\n        this._panel.webview.html = this._getHtmlContent(resourcesBaseUri);\r\n\r\n        // Event-Handler für das Schließen des Panels\r\n        this._panel.onDidDispose(() => {\r\n            this._panel = null;\r\n        }, null, this._context.subscriptions);\r\n\r\n        // Nachrichtenhandling zwischen Webview und Extension\r\n        this._panel.webview.onDidReceiveMessage(async (message) => {\r\n            try {\r\n                switch (message.command) {\r\n                    case 'refresh':\r\n                        // Dashboard-Daten aktualisieren\r\n                        await this._refreshDashboard();\r\n                        break;\r\n                    case 'executeCommand':\r\n                        // VSCode-Befehl ausführen\r\n                        if (message.args) {\r\n                            await vscode.commands.executeCommand(message.commandId, ...message.args);\r\n                        } else {\r\n                            await vscode.commands.executeCommand(message.commandId);\r\n                        }\r\n                        break;\r\n                    // Weitere Befehle hier hinzufügen\r\n                }\r\n            } catch (error) {\r\n                console.error('Fehler bei der Verarbeitung der Dashboard-Nachricht:', error);\r\n                // Fehler an das Dashboard zurücksenden\r\n                this._panel.webview.postMessage({\r\n                    command: 'error',\r\n                    message: `Fehler: ${error.message || 'Unbekannter Fehler'}`\r\n                });\r\n            }\r\n        }, null, this._context.subscriptions);\r\n\r\n        // Initialer Refresh\r\n        this._refreshDashboard();\r\n    }\r\n\r\n    /**\r\n     * Aktualisiert die Dashboard-Daten\r\n     */\r\n    async _refreshDashboard() {\r\n        if (!this._panel) return;\r\n\r\n        try {\r\n            // Konfiguration laden\r\n            const config = vscode.workspace.getConfiguration('comitto');\r\n            const isEnabled = config.get('autoCommitEnabled');\r\n            const aiProvider = config.get('aiProvider');\r\n            const triggerRules = config.get('triggerRules');\r\n            const gitSettings = config.get('gitSettings');\r\n            const uiSettings = config.get('uiSettings');\r\n\r\n            // Daten an das Dashboard senden\r\n            this._panel.webview.postMessage({\r\n                command: 'updateData',\r\n                data: {\r\n                    isEnabled,\r\n                    aiProvider,\r\n                    triggerRules,\r\n                    gitSettings,\r\n                    uiSettings\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Fehler beim Aktualisieren des Dashboards:', error);\r\n            this._panel.webview.postMessage({\r\n                command: 'error',\r\n                message: `Fehler beim Aktualisieren der Daten: ${error.message || 'Unbekannter Fehler'}`\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generiert den HTML-Inhalt für das Dashboard\r\n     * @param {vscode.Uri} resourcesBaseUri Basis-URI für lokale Ressourcen\r\n     * @returns {string} HTML-Inhalt\r\n     */\r\n    _getHtmlContent(resourcesBaseUri) {\r\n        // CSS-Pfade für dark/light Theme\r\n        const cssUri = `${resourcesBaseUri}/ui/dashboard.css`;\r\n        const scriptUri = `${resourcesBaseUri}/ui/dashboard.js`;\r\n        \r\n        return `<!DOCTYPE html>\r\n        <html lang=\"de\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Comitto Dashboard</title>\r\n            <link rel=\"stylesheet\" href=\"${cssUri}\">\r\n            <style>\r\n                body {\r\n                    font-family: var(--vscode-font-family);\r\n                    background-color: var(--vscode-editor-background);\r\n                    color: var(--vscode-foreground);\r\n                    padding: 20px;\r\n                }\r\n                button {\r\n                    background-color: var(--vscode-button-background);\r\n                    color: var(--vscode-button-foreground);\r\n                    border: none;\r\n                    padding: 8px 16px;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                    margin-right: 10px;\r\n                    margin-bottom: 10px;\r\n                }\r\n                button:hover {\r\n                    background-color: var(--vscode-button-hoverBackground);\r\n                }\r\n                .dashboard-container {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    max-width: 100%;\r\n                }\r\n                .section {\r\n                    margin-bottom: 20px;\r\n                    border-bottom: 1px solid var(--vscode-panel-border);\r\n                    padding-bottom: 15px;\r\n                }\r\n                .section-title {\r\n                    font-size: 1.2em;\r\n                    font-weight: bold;\r\n                    margin-bottom: 10px;\r\n                }\r\n                .settings-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n                    gap: 15px;\r\n                    margin-top: 15px;\r\n                }\r\n                .setting-card {\r\n                    background-color: var(--vscode-editor-inactiveSelectionBackground);\r\n                    border-radius: 4px;\r\n                    padding: 12px;\r\n                }\r\n                .setting-name {\r\n                    font-weight: bold;\r\n                    margin-bottom: 5px;\r\n                }\r\n                .setting-value {\r\n                    opacity: 0.8;\r\n                }\r\n                .actions-container {\r\n                    display: flex;\r\n                    flex-wrap: wrap;\r\n                    gap: 10px;\r\n                    margin-top: 15px;\r\n                }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div class=\"dashboard-container\">\r\n                <h1>Comitto Dashboard</h1>\r\n                \r\n                <div class=\"section\">\r\n                    <div class=\"section-title\">Status</div>\r\n                    <div id=\"status\">Wird geladen...</div>\r\n                    <div class=\"actions-container\">\r\n                        <button id=\"btn-toggle-enabled\">Status umschalten</button>\r\n                        <button id=\"btn-manual-commit\">Manuellen Commit ausführen</button>\r\n                        <button id=\"btn-stage-all\">Alle Änderungen stagen</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"section\">\r\n                    <div class=\"section-title\">Einstellungen</div>\r\n                    <div class=\"settings-grid\" id=\"settings-grid\">\r\n                        <!-- Wird dynamisch befüllt -->\r\n                    </div>\r\n                    <div class=\"actions-container\">\r\n                        <button id=\"btn-ai-provider\">KI-Provider ändern</button>\r\n                        <button id=\"btn-edit-triggerrules\">Trigger-Regeln bearbeiten</button>\r\n                        <button id=\"btn-open-settings\">Alle Einstellungen öffnen</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <script src=\"${scriptUri}\"></script>\r\n        </body>\r\n        </html>`;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für eine vereinfachte Benutzeroberfläche in einem Webview-Panel\r\n */\r\nclass SimpleUIProvider {\r\n    constructor(context) {\r\n        this._context = context;\r\n        this._panel = null;\r\n    }\r\n\r\n    /**\r\n     * Zeigt das einfache UI-Panel an\r\n     */\r\n    show() {\r\n        // Falls das Panel bereits geöffnet ist, dieses in den Vordergrund stellen\r\n        if (this._panel) {\r\n            this._panel.reveal();\r\n            return;\r\n        }\r\n\r\n        // Neues Panel erstellen\r\n        this._panel = vscode.window.createWebviewPanel(\r\n            'comittoSimpleUI',\r\n            'Comitto - Einfache Benutzeroberfläche',\r\n            vscode.ViewColumn.One,\r\n            {\r\n                enableScripts: true,\r\n                retainContextWhenHidden: true,\r\n                localResourceRoots: [\r\n                    vscode.Uri.file(path.join(this._context.extensionPath, 'resources'))\r\n                ]\r\n            }\r\n        );\r\n\r\n        // Basis-URI für lokale Ressourcen\r\n        const resourcesBaseUri = this._panel.webview.asWebviewUri(\r\n            vscode.Uri.file(path.join(this._context.extensionPath, 'resources'))\r\n        );\r\n\r\n        // HTML-Inhalt generieren\r\n        this._panel.webview.html = this._getHtmlContent(resourcesBaseUri);\r\n\r\n        // Event-Handler für das Schließen des Panels\r\n        this._panel.onDidDispose(() => {\r\n            this._panel = null;\r\n        }, null, this._context.subscriptions);\r\n\r\n        // Nachrichtenhandling zwischen Webview und Extension\r\n        this._panel.webview.onDidReceiveMessage(async (message) => {\r\n            try {\r\n                switch (message.command) {\r\n                    case 'executeCommand':\r\n                        // VSCode-Befehl ausführen\r\n                        if (message.args) {\r\n                            await vscode.commands.executeCommand(message.commandId, ...message.args);\r\n                        } else {\r\n                            await vscode.commands.executeCommand(message.commandId);\r\n                        }\r\n                        // Nach Befehlsausführung UI aktualisieren\r\n                        this._refreshSimpleUI();\r\n                        break;\r\n                    case 'refresh':\r\n                        // UI-Daten aktualisieren\r\n                        await this._refreshSimpleUI();\r\n                        break;\r\n                    // Weitere Befehle hier hinzufügen\r\n                }\r\n            } catch (error) {\r\n                console.error('Fehler bei der Verarbeitung der SimpleUI-Nachricht:', error);\r\n                // Fehler an das SimpleUI zurücksenden\r\n                this._panel.webview.postMessage({\r\n                    command: 'error',\r\n                    message: `Fehler: ${error.message || 'Unbekannter Fehler'}`\r\n                });\r\n            }\r\n        }, null, this._context.subscriptions);\r\n\r\n        // Initialer Refresh\r\n        this._refreshSimpleUI();\r\n    }\r\n\r\n    /**\r\n     * Aktualisiert die SimpleUI-Daten\r\n     */\r\n    async _refreshSimpleUI() {\r\n        if (!this._panel) return;\r\n\r\n        try {\r\n            // Konfiguration laden\r\n            const config = vscode.workspace.getConfiguration('comitto');\r\n            const isEnabled = config.get('autoCommitEnabled');\r\n            const aiProvider = config.get('aiProvider');\r\n            \r\n            // Daten an die SimpleUI senden\r\n            this._panel.webview.postMessage({\r\n                command: 'updateStatus',\r\n                data: {\r\n                    isEnabled,\r\n                    aiProvider,\r\n                    provider: getProviderDisplayName(aiProvider)\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Fehler beim Aktualisieren der SimpleUI:', error);\r\n            this._panel.webview.postMessage({\r\n                command: 'error',\r\n                message: `Fehler beim Aktualisieren der Daten: ${error.message || 'Unbekannter Fehler'}`\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generiert den HTML-Inhalt für die SimpleUI\r\n     * @param {vscode.Uri} resourcesBaseUri Basis-URI für lokale Ressourcen\r\n     * @returns {string} HTML-Inhalt\r\n     */\r\n    _getHtmlContent(resourcesBaseUri) {\r\n        // CSS-Pfade für dark/light Theme\r\n        const cssUri = `${resourcesBaseUri}/ui/simple-ui.css`;\r\n        const scriptUri = `${resourcesBaseUri}/ui/simple-ui.js`;\r\n        \r\n        return `<!DOCTYPE html>\r\n        <html lang=\"de\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Comitto - Einfache Benutzeroberfläche</title>\r\n            <link rel=\"stylesheet\" href=\"${cssUri}\">\r\n            <style>\r\n                body {\r\n                    font-family: var(--vscode-font-family);\r\n                    background-color: var(--vscode-editor-background);\r\n                    color: var(--vscode-foreground);\r\n                    padding: 20px;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    align-items: center;\r\n                }\r\n                .simple-ui-container {\r\n                    max-width: 600px;\r\n                    text-align: center;\r\n                }\r\n                .status-indicator {\r\n                    display: inline-block;\r\n                    padding: 8px 16px;\r\n                    border-radius: 20px;\r\n                    font-weight: bold;\r\n                    margin: 20px 0;\r\n                }\r\n                .status-enabled {\r\n                    background-color: var(--vscode-testing-iconPassed);\r\n                    color: white;\r\n                }\r\n                .status-disabled {\r\n                    background-color: var(--vscode-testing-iconFailed);\r\n                    color: white;\r\n                }\r\n                .button-row {\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    gap: 10px;\r\n                    margin: 20px 0;\r\n                    flex-wrap: wrap;\r\n                }\r\n                button {\r\n                    background-color: var(--vscode-button-background);\r\n                    color: var(--vscode-button-foreground);\r\n                    border: none;\r\n                    padding: 10px 20px;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                    font-size: 1em;\r\n                }\r\n                button:hover {\r\n                    background-color: var(--vscode-button-hoverBackground);\r\n                }\r\n                .provider-info {\r\n                    margin: 15px 0;\r\n                    font-style: italic;\r\n                }\r\n                .logo {\r\n                    max-width: 120px;\r\n                    margin-bottom: 20px;\r\n                }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div class=\"simple-ui-container\">\r\n                <h1>Comitto</h1>\r\n                <p>KI-gestützte Git-Commit-Automatisierung</p>\r\n                \r\n                <div id=\"status\" class=\"status-indicator\">Wird geladen...</div>\r\n                \r\n                <div class=\"provider-info\" id=\"provider-info\">Provider wird geladen...</div>\r\n                \r\n                <div class=\"button-row\">\r\n                    <button id=\"btn-toggle\">Auto-Commit umschalten</button>\r\n                    <button id=\"btn-manual-commit\">Manueller Commit</button>\r\n                </div>\r\n                \r\n                <div class=\"button-row\">\r\n                    <button id=\"btn-stage-all\">Alle Änderungen stagen</button>\r\n                    <button id=\"btn-show-dashboard\">Dashboard öffnen</button>\r\n                </div>\r\n            </div>\r\n            <script src=\"${scriptUri}\"></script>\r\n        </body>\r\n        </html>`;\r\n    }\r\n}\r\n\r\n/**\r\n * UI helper functions\r\n */\r\n\r\n/**\r\n * Returns a display name for the AI provider\r\n * @param {string} provider Provider ID\r\n * @returns {string} Display name\r\n */\r\nfunction getProviderDisplayName(provider) {\r\n    switch (provider) {\r\n        case 'ollama': return 'Ollama (local)';\r\n        case 'openai': return 'OpenAI';\r\n        case 'anthropic': return 'Anthropic Claude';\r\n        default: return provider;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns an icon for the provider\r\n * @param {string} provider Provider ID\r\n * @returns {vscode.ThemeIcon} Icon for the provider\r\n */\r\nfunction getProviderIcon(provider) {\r\n    switch (provider) {\r\n        case 'ollama': return new vscode.ThemeIcon('server');\r\n        case 'openai': return new vscode.ThemeIcon('rocket');\r\n        case 'anthropic': return new vscode.ThemeIcon('beaker');\r\n        default: return new vscode.ThemeIcon('symbol-misc');\r\n    }\r\n}\r\n\r\nfunction getOpenAIModelOptions() {\r\n    return [\r\n        { label: 'GPT-4o', value: 'gpt-4o' },\r\n        { label: 'GPT-4o Mini', value: 'gpt-4o-mini' },\r\n        { label: 'GPT-4', value: 'gpt-4' },\r\n        { label: 'GPT-4 Turbo', value: 'gpt-4-turbo' },\r\n        { label: 'GPT-4 (January 2025)', value: 'gpt-4-0125-preview' },\r\n        { label: 'GPT-4 (November 2023)', value: 'gpt-4-1106-preview' },\r\n        { label: 'GPT-4 Vision Preview', value: 'gpt-4-vision-preview' },\r\n        { label: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' },\r\n        { label: 'GPT-3.5 Turbo (January 2024)', value: 'gpt-3.5-turbo-0125' },\r\n        { label: 'GPT-3.5 Turbo (November 2023)', value: 'gpt-3.5-turbo-1106' }\r\n    ];\r\n}\r\n\r\n/**\r\n * Returns a readable label for the staging mode\r\n * @param {string} mode The staging mode\r\n * @returns {string} Readable label\r\n */\r\nfunction getStageModeLabel(mode) {\r\n    switch (mode) {\r\n        case 'all': return 'Stage all files';\r\n        case 'specific': return 'Stage specific files';\r\n        case 'prompt': return 'Ask each time';\r\n        default: return mode;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a readable label for the theme\r\n * @param {string} theme The theme\r\n * @returns {string} Readable label\r\n */\r\nfunction getThemeLabel(theme) {\r\n    switch (theme) {\r\n        case 'light': return 'Light';\r\n        case 'dark': return 'Dark';\r\n        case 'auto': return 'Automatic';\r\n        default: return theme;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a readable description for the Git status code\r\n * @param {string} statusCode The Git status code\r\n * @returns {string} Readable description of the status\r\n */\r\nfunction getStatusDescription(statusCode) {\r\n    const firstChar = statusCode.charAt(0);\r\n    const secondChar = statusCode.charAt(1);\r\n    \r\n    let description = '';\r\n    \r\n    // Index status (first character)\r\n    if (firstChar === 'M') description = 'Modified in index';\r\n    else if (firstChar === 'A') description = 'Added to index';\r\n    else if (firstChar === 'D') description = 'Deleted from index';\r\n    else if (firstChar === 'R') description = 'Renamed in index';\r\n    else if (firstChar === 'C') description = 'Copied in index';\r\n    else if (firstChar === 'U') description = 'Unmerged in index';\r\n    \r\n    // Working Directory status (second character)\r\n    if (secondChar === 'M') {\r\n        if (description) description += ', modified in working directory';\r\n        else description = 'Modified in working directory';\r\n    } else if (secondChar === 'D') {\r\n        if (description) description += ', deleted in working directory';\r\n        else description = 'Deleted in working directory';\r\n    }\r\n    \r\n    // Untracked files\r\n    if (statusCode === '??') description = 'Untracked file';\r\n    \r\n    return description || statusCode;\r\n}\r\n\r\n/**\r\n * Registriert alle UI-Komponenten\r\n * @param {vscode.ExtensionContext} context \r\n * @returns {Object} Die Provider-Instanzen\r\n */\r\nfunction registerUI(context) {\r\n    // Status-Ansicht\r\n    const statusProvider = new StatusViewProvider(context);\r\n    const statusTreeView = vscode.window.createTreeView('comitto-status', {\r\n        treeDataProvider: statusProvider,\r\n        showCollapseAll: false\r\n    });\r\n    context.subscriptions.push(statusTreeView);\r\n\r\n    // Schnellaktionen-Ansicht\r\n    const quickActionsProvider = new QuickActionsViewProvider(context);\r\n    const quickActionsTreeView = vscode.window.createTreeView('comitto-quick-actions', {\r\n        treeDataProvider: quickActionsProvider,\r\n        showCollapseAll: false\r\n    });\r\n    context.subscriptions.push(quickActionsTreeView);\r\n\r\n    // Einstellungs-Ansicht\r\n    const settingsProvider = new SettingsViewProvider(context);\r\n    const settingsTreeView = vscode.window.createTreeView('comitto-settings', {\r\n        treeDataProvider: settingsProvider,\r\n        showCollapseAll: true\r\n    });\r\n    context.subscriptions.push(settingsTreeView);\r\n\r\n    // Dashboard und SimpleUI initialisieren\r\n    const dashboardProvider = new DashboardProvider(context);\r\n    const simpleUIProvider = new SimpleUIProvider(context);\r\n\r\n    // Nach kurzer Verzögerung Refresh ausführen, um sicherzustellen, dass die UI aktualisiert wird\r\n    setTimeout(() => {\r\n        statusProvider.refresh();\r\n        quickActionsProvider.refresh();\r\n        settingsProvider.refresh();\r\n    }, 500);\r\n\r\n    // Registriere einen Event-Handler, der die Seitenleiste sichtbar macht\r\n    context.subscriptions.push(vscode.extensions.onDidChange(() => {\r\n        // Setze den Kontext, dass ein Git-Repository vorhanden ist\r\n        vscode.commands.executeCommand('setContext', 'workspaceHasGit', true);\r\n    }));\r\n\r\n    return {\r\n        statusProvider,\r\n        quickActionsProvider,\r\n        settingsProvider,\r\n        dashboardProvider,\r\n        simpleUIProvider,\r\n        statusTreeView,\r\n        settingsTreeView,\r\n        quickActionsTreeView\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    registerUI,\r\n    StatusViewProvider,\r\n    QuickActionsViewProvider,\r\n    SettingsViewProvider,\r\n    DashboardProvider,\r\n    SimpleUIProvider,\r\n    getProviderDisplayName,\r\n    getProviderIcon,\r\n    getOpenAIModelOptions,\r\n    getStageModeLabel,\r\n    getThemeLabel,\r\n    getStatusDescription\r\n}; ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(9829);\n"],"names":["module","exports","require","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","toPrimitive","String","_toPrimitive","vscode","path","StatusViewProvider","context","this","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","_context","fire","element","_getChildren","_callee","items","statusGroup","configGroup","actionGroup","_getSubItems","workspace","getConfiguration","get","TreeItem","TreeItemCollapsibleState","Expanded","contextValue","iconPath","ThemeIcon","collapsibleState","_x","_getSubItems2","_callee2","config","enabled","statusItem","simpleUIItem","dashboardItem","provider","providerItem","gitSettings","commitLanguage","autoPushStatus","stageMode","gitItem","rules","triggerDescription","activeTriggers","rulesItem","manualCommitItem","stageAllItem","stageSelectedItem","_context2","t0","concat","None","tooltip","command","title","getProviderDisplayName","getProviderIcon","commitMessageLanguage","autoPush","branch","commitMessageStyle","fileCountThreshold","minChangeCount","onSave","onInterval","intervalMinutes","onBranchSwitch","join","timeThresholdMinutes","_x2","SettingsViewProvider","_getChildren2","_callee3","aiItem","triggerItem","promptItem","uiItem","notificationItem","_context3","_getSubSettings","Collapsed","_x3","_getSubSettings2","_callee4","aiProvider","ollamaEndpoint","ollamaEndpointItem","ollamaModel","ollamaModelItem","openaiModel","openaiModelItem","hasKey","openaiKeyItem","anthropicModel","anthropicModelItem","_hasKey","anthropicKeyItem","fileCountItem","changeCountItem","timeItem","onSaveItem","onIntervalItem","onBranchItem","filePatternsText","filePatternsItem","languageItem","autoPushItem","branchItem","styleItem","stageModeItem","patternsText","stagingPatternsItem","useGitignore","gitignoreItem","uiSettings","simpleModeItem","confirmItem","notifyItem","themeItem","notifications","onCommitItem","onPushItem","onErrorItem","onTriggerItem","_context4","filePatterns","substring","specificStagingPatterns","undefined","simpleMode","confirmBeforeCommit","showNotifications","getThemeLabel","theme","onCommit","onPush","onError","onTriggerFired","_x4","QuickActionsViewProvider","_getChildren3","_callee5","commitGroup","gitGroup","_context5","_getSubActions","_x5","_getSubActions2","_callee6","toggleItem","gitSettingsItem","configAIItem","configTriggersItem","_context6","_x6","DashboardProvider","_panel","_this","reveal","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","localResourceRoots","Uri","file","extensionPath","resourcesBaseUri","webview","asWebviewUri","html","_getHtmlContent","onDidDispose","subscriptions","onDidReceiveMessage","_ref","_callee7","message","_vscode$commands","_context7","_refreshDashboard","args","commands","executeCommand","commandId","_toConsumableArray","t1","console","error","postMessage","_x7","_refreshDashboard2","_callee8","isEnabled","triggerRules","_context8","data","cssUri","scriptUri","SimpleUIProvider","_this2","_ref2","_callee9","_vscode$commands2","_context9","_refreshSimpleUI","_x8","_refreshSimpleUI2","_callee10","_context10","registerUI","statusProvider","statusTreeView","createTreeView","treeDataProvider","showCollapseAll","quickActionsProvider","quickActionsTreeView","settingsProvider","settingsTreeView","dashboardProvider","simpleUIProvider","setTimeout","refresh","extensions","onDidChange","getOpenAIModelOptions","label","getStageModeLabel","mode","getStatusDescription","statusCode","firstChar","secondChar","description","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}