{"version":3,"file":"utils.js","mappings":"4BAAA,IAAQA,EAASC,EAAQ,MAAjBD,KAyCRE,EAAOC,QAAU,CACbC,kBAlCJ,SAA2BC,EAASC,GAChC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBT,EAAKK,EAAS,CAAEC,IAAAA,IAAO,SAACI,EAAOC,EAAQC,GACnC,GAAIF,EAAO,CAEP,IAAMG,EAAeD,GAAUF,EAAMI,SAAW,yBAGhD,OAFAC,QAAQL,MAAM,8BAADM,OAA+BX,GAAWQ,QACvDJ,EAAO,IAAIQ,MAAMJ,GAErB,CACAL,EAAQG,EACZ,GACJ,GACJ,EAsBIO,cAfJ,SAAuBC,GACnB,OAAOA,GACH,IAAK,IAAK,MAAO,YACjB,IAAK,IAAK,MAAO,eACjB,IAAK,IAAK,MAAO,YACjB,IAAK,IAAK,MAAO,aACjB,IAAK,IAAK,MAAO,WACjB,IAAK,IAAK,MAAO,YACjB,IAAK,KAAM,MAAO,cAClB,QAAS,OAAOA,EAExB,E,wBCvCAjB,EAAOC,QAAUF,QAAQ,gB,GCCrBmB,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAarB,QAGrB,IAAID,EAASkB,EAAyBG,GAAY,CAGjDpB,QAAS,CAAC,GAOX,OAHAuB,EAAoBH,GAAUrB,EAAQA,EAAOC,QAASmB,GAG/CpB,EAAOC,OACf,CCnB0BmB,CAAoB,M","sources":["webpack://comitto/./utils.js","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/startup"],"sourcesContent":["const { exec } = require('child_process');\r\n\r\n/**\r\n * Führt einen Git-Befehl aus\r\n * @param {string} command Der auszuführende Git-Befehl\r\n * @param {string} cwd Arbeitsverzeichnis für den Befehl\r\n * @returns {Promise<string>} Ausgabe des Befehls\r\n */\r\nfunction executeGitCommand(command, cwd) {\r\n    return new Promise((resolve, reject) => {\r\n        exec(command, { cwd }, (error, stdout, stderr) => {\r\n            if (error) {\r\n                // Detailliertere Fehlermeldung\r\n                const errorMessage = stderr || error.message || 'Unbekannter Git-Fehler';\r\n                console.error(`Git-Befehl fehlgeschlagen: ${command}`, errorMessage);\r\n                reject(new Error(errorMessage));\r\n                return;\r\n            }\r\n            resolve(stdout);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Gibt einen lesbaren Text für den Git-Status-Code zurück\r\n * @param {string} statusCode Der Git-Status-Code\r\n * @returns {string} Lesbarer Status\r\n */\r\nfunction getStatusText(statusCode) {\r\n    switch(statusCode) {\r\n        case 'M': return 'Geändert:';\r\n        case 'A': return 'Hinzugefügt:';\r\n        case 'D': return 'Gelöscht:';\r\n        case 'R': return 'Umbenannt:';\r\n        case 'C': return 'Kopiert:';\r\n        case 'U': return 'Unmerged:';\r\n        case '??': return 'Unverfolgt:';\r\n        default: return statusCode;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    executeGitCommand,\r\n    getStatusText\r\n}; ","module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4518);\n"],"names":["exec","require","module","exports","executeGitCommand","command","cwd","Promise","resolve","reject","error","stdout","stderr","errorMessage","message","console","concat","Error","getStatusText","statusCode","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}