{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://comitto/webpack/runtime/chunk loaded","webpack://comitto/webpack/runtime/startup chunk dependencies","webpack://comitto/webpack/runtime/require chunk loading","webpack://comitto/./extension.js","webpack://comitto/external node-commonjs \"os\"","webpack://comitto/external commonjs \"vscode\"","webpack://comitto/./commands.js","webpack://comitto/external node-commonjs \"tty\"","webpack://comitto/external node-commonjs \"stream\"","webpack://comitto/external node-commonjs \"assert\"","webpack://comitto/external node-commonjs \"zlib\"","webpack://comitto/external node-commonjs \"events\"","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/external node-commonjs \"https\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/external node-commonjs \"crypto\"","webpack://comitto/external node-commonjs \"url\"","webpack://comitto/external node-commonjs \"http\"","webpack://comitto/external node-commonjs \"util\"","webpack://comitto/external node-commonjs \"fs\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/runtime/ensure chunk","webpack://comitto/webpack/runtime/get javascript chunk filename","webpack://comitto/webpack/runtime/hasOwnProperty shorthand","webpack://comitto/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t__webpack_require__.e(121);\n\t__webpack_require__.e(730);\n\treturn next();\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t217: 1,\n\t606: 1\n};\n\n__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\t__webpack_require__.O();\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","const vscode = require('vscode');\r\nconst axios = require('axios');\r\nconst { exec } = require('child_process');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst ignore = require('ignore');\r\nconst ui = require('./ui');\r\nconst commands = require('./commands');\r\nconst { executeGitCommand, getStatusText } = require('./utils'); // Nur executeGitCommand und getStatusText importieren\r\n\r\n/**\r\n * @type {vscode.StatusBarItem}\r\n */\r\nlet statusBarItem;\r\n\r\n/**\r\n * @type {vscode.FileSystemWatcher}\r\n */\r\nlet fileWatcher;\r\n\r\n/**\r\n * @type {Set<string>}\r\n */\r\nlet changedFiles = new Set();\r\n\r\n/**\r\n * @type {boolean}\r\n */\r\nlet isCommitInProgress = false;\r\n\r\n/**\r\n * @type {Date|null}\r\n */\r\nlet lastCommitTime = null;\r\n\r\n/**\r\n * @type {Object}\r\n */\r\nlet gitignoreObj = null;\r\n\r\n/**\r\n * @type {Object}\r\n */\r\nlet uiProviders = null;\r\n\r\n/**\r\n * @type {NodeJS.Timeout}\r\n */\r\nlet intervalTimer = null;\r\n\r\n/**\r\n * Hauptaktivierungsfunktion der Erweiterung.\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nasync function activate(context) {\r\n    console.log('Die Erweiterung \"comitto\" wird aktiviert.');\r\n\r\n    // Sicherstellen, dass das Ressourcenverzeichnis existiert\r\n    ensureResourceDirs(context);\r\n\r\n    // UI-Komponenten registrieren\r\n    uiProviders = ui.registerUI(context);\r\n\r\n    // Statusleistenelement erstellen\r\n    statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\r\n    statusBarItem.text = \"$(git-commit) Comitto: Initialisiere...\";\r\n    statusBarItem.tooltip = \"Comitto: Klicke zum Aktivieren/Deaktivieren oder manuellen Commit\";\r\n    statusBarItem.command = \"comitto.toggleAutoCommit\"; // Standardaktion\r\n    context.subscriptions.push(statusBarItem);\r\n    statusBarItem.show();\r\n\r\n    // Git-Status prüfen und Kontext setzen\r\n    const hasGit = await checkGitRepository(context);\r\n    vscode.commands.executeCommand('setContext', 'workspaceHasGit', hasGit);\r\n\r\n    // Befehle zentral registrieren und Abhängigkeiten übergeben\r\n    commands.registerCommands(\r\n        context,\r\n        uiProviders,\r\n        statusBarItem,\r\n        setupFileWatcher,       // Funktion übergeben\r\n        disableFileWatcher,     // Funktion übergeben\r\n        performAutoCommit,      // Funktion übergeben\r\n        showNotification        // Funktion übergeben\r\n    );\r\n    \r\n    // .gitignore einlesen, wenn vorhanden und konfiguriert\r\n    loadGitignore();\r\n\r\n    // Initialen Status setzen und FileSystemWatcher/Timer ggf. starten\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    if (config.get('autoCommitEnabled') && hasGit) {\r\n        setupFileWatcher(context);\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n    } else if (!hasGit) {\r\n        statusBarItem.text = \"$(warning) Comitto: Kein Git-Repo\";\r\n        statusBarItem.tooltip = \"Kein Git-Repository im aktuellen Workspace gefunden\";\r\n        statusBarItem.command = undefined; // Keine Aktion bei Klick\r\n    } else {\r\n        statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\r\n    }\r\n\r\n    // Konfigurationsänderungen überwachen\r\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(async event => {\r\n        if (event.affectsConfiguration('comitto')) {\r\n            console.log('Comitto-Konfiguration geändert.');\r\n            const currentConfig = vscode.workspace.getConfiguration('comitto');\r\n            const gitAvailable = await checkGitRepository(context); // Erneut prüfen\r\n\r\n            if (event.affectsConfiguration('comitto.autoCommitEnabled') || event.affectsConfiguration('comitto.triggerRules')) {\r\n                if (currentConfig.get('autoCommitEnabled') && gitAvailable) {\r\n                    setupFileWatcher(context); // Re-setup mit neuer Konfig\r\n                     if (statusBarItem) statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n                } else {\r\n                    disableFileWatcher(); // Stoppt Watcher und Timer\r\n                     if (statusBarItem) {\r\n                          statusBarItem.text = gitAvailable ? \"$(git-commit) Comitto: Inaktiv\" : \"$(warning) Comitto: Kein Git-Repo\";\r\n                          statusBarItem.command = gitAvailable ? \"comitto.toggleAutoCommit\" : undefined;\r\n                     }\r\n                }\r\n            }\r\n            \r\n            if (event.affectsConfiguration('comitto.gitSettings.useGitignore')) {\r\n                loadGitignore(); // .gitignore neu laden\r\n            }\r\n            \r\n            // UI immer aktualisieren bei Comitto-Änderungen\r\n            if (uiProviders) {\r\n                uiProviders.statusProvider.refresh();\r\n                uiProviders.settingsProvider.refresh();\r\n                uiProviders.quickActionsProvider.refresh();\r\n            }\r\n\r\n            // Dashboard aktualisieren, falls offen\r\n            try {\r\n                let dashboardPanel = context.globalState.get('comittoDashboardPanel');\r\n                if (dashboardPanel && dashboardPanel.visible) {\r\n                    // Versuchen, das Panel zu aktualisieren\r\n                    try {\r\n                        dashboardPanel.webview.html = commands.generateDashboardHTML(context);\r\n                    } catch (panelError) {\r\n                        console.error('Fehler beim Aktualisieren des Dashboard-Panels:', panelError);\r\n                        // Panel im globalState zurücksetzen, falls nicht mehr gültig\r\n                        context.globalState.update('comittoDashboardPanel', undefined);\r\n                    }\r\n                }\r\n                let simpleUIPanel = context.globalState.get('comittoSimpleUIPanel');\r\n                if (simpleUIPanel && simpleUIPanel.visible) {\r\n                    try {\r\n                        const newEnabled = currentConfig.get('autoCommitEnabled');\r\n                        const newProvider = currentConfig.get('aiProvider');\r\n                        simpleUIPanel.webview.html = commands.generateSimpleUIHTML(newEnabled, ui.getProviderDisplayName(newProvider), context);\r\n                    } catch (panelError) {\r\n                        console.error('Fehler beim Aktualisieren des SimpleUI-Panels:', panelError);\r\n                        // Panel im globalState zurücksetzen, falls nicht mehr gültig\r\n                        context.globalState.update('comittoSimpleUIPanel', undefined);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Fehler bei der Panel-Aktualisierung:', error);\r\n            }\r\n        }\r\n    }));\r\n    \r\n    // Eventuell kurze Verzögerung für initiale UI-Aktualisierung\r\n    setTimeout(() => {\r\n        if (uiProviders) {\r\n            uiProviders.statusProvider.refresh();\r\n            uiProviders.settingsProvider.refresh();\r\n            uiProviders.quickActionsProvider.refresh();\r\n        }\r\n    }, 1500);\r\n\r\n    // Willkommensnachricht anzeigen (einmalig)\r\n    showWelcomeNotification(context);\r\n\r\n    console.log('Comitto-Aktivierung abgeschlossen.');\r\n}\r\n\r\n/**\r\n * Prüft, ob im Workspace ein Git-Repository vorhanden ist.\r\n * @param {vscode.ExtensionContext} context\r\n * @returns {Promise<boolean>}\r\n */\r\nasync function checkGitRepository(context) {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders || workspaceFolders.length === 0) {\r\n        return false;\r\n    }\r\n    const repoPath = workspaceFolders[0].uri.fsPath;\r\n    try {\r\n        await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\r\n        console.log('Git-Repository gefunden.');\r\n        return true;\r\n    } catch (error) {\r\n        console.log('Kein Git-Repository gefunden oder Git nicht verfügbar.');\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Stellt sicher, dass die notwendigen Ressourcenverzeichnisse existieren.\r\n * @param {vscode.ExtensionContext} context \r\n */\r\nfunction ensureResourceDirs(context) {\r\n    const dirsToEnsure = ['resources', 'resources/ui'];\r\n    dirsToEnsure.forEach(dir => {\r\n        const dirPath = vscode.Uri.joinPath(context.extensionUri, dir).fsPath;\r\n        if (!fs.existsSync(dirPath)) {\r\n            try {\r\n                fs.mkdirSync(dirPath, { recursive: true });\r\n                console.log(`Verzeichnis erstellt: ${dirPath}`);\r\n            } catch (error) {\r\n                console.error(`Fehler beim Erstellen des Verzeichnisses ${dirPath}:`, error);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Zeigt eine Willkommensnachricht beim ersten Start nach einer Installation/Update.\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nfunction showWelcomeNotification(context) {\r\n    const currentVersion = context.extension.packageJSON.version;\r\n    const previousVersion = context.globalState.get('comitto.version');\r\n\r\n    if (previousVersion !== currentVersion) {\r\n        // Nach erstem Start oder Update anzeigen\r\n        vscode.window.showInformationMessage(\r\n            `Comitto v${currentVersion} wurde aktiviert! Konfigurieren Sie es über die Seitenleiste.`,\r\n            'Seitenleiste öffnen', 'Changelog anzeigen'\r\n        ).then(selection => {\r\n            if (selection === 'Seitenleiste öffnen') {\r\n                vscode.commands.executeCommand('workbench.view.extension.comitto-sidebar');\r\n            } else if (selection === 'Changelog anzeigen') {\r\n                // Prüfen, ob die Nachricht bereits angezeigt wurde\r\n                const hasShownWelcome = context.globalState.get('comitto.hasShownWelcome', false);\r\n                if (!hasShownWelcome) {\r\n                    vscode.window.showInformationMessage(\r\n                        'Comitto wurde aktiviert! Öffnen Sie die Comitto-Seitenleiste über das Icon in der Activity Bar.',\r\n                        'Öffnen', 'Nicht mehr anzeigen'\r\n                    ).then(selection => {\r\n                        if (selection === 'Öffnen') {\r\n                            vscode.commands.executeCommand('comitto-sidebar.focus');\r\n                        } else if (selection === 'Nicht mehr anzeigen') {\r\n                            context.globalState.update('comitto.hasShownWelcome', true);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        // Version speichern\r\n        context.globalState.update('comitto.version', currentVersion);\r\n    }\r\n\r\n    // Status der UI anzeigen\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const uiSettings = config.get('uiSettings');\r\n    \r\n    if (uiSettings.showNotifications) {\r\n        setTimeout(() => {\r\n            if (vscode.window.activeTextEditor) {\r\n                vscode.window.showInformationMessage(\r\n                    'Comitto ist bereit! Verwenden Sie die Seitenleiste oder das $(git-commit) Symbol in der Statusleiste.',\r\n                    'Einstellungen öffnen', 'Dashboard anzeigen'\r\n                ).then(selection => {\r\n                    if (selection === 'Einstellungen öffnen') {\r\n                        vscode.commands.executeCommand('comitto.openSettings');\r\n                    } else if (selection === 'Dashboard anzeigen') {\r\n                        vscode.commands.executeCommand('comitto.showDashboard');\r\n                    }\r\n                });\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n/**\r\n * .gitignore-Datei laden und Parser erstellen\r\n */\r\nfunction loadGitignore() {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) return;\r\n\r\n    const gitSettings = vscode.workspace.getConfiguration('comitto').get('gitSettings');\r\n    if (!gitSettings.useGitignore) {\r\n        gitignoreObj = null;\r\n        return;\r\n    }\r\n\r\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\r\n    const gitignorePath = path.join(repoPath, '.gitignore');\r\n    \r\n    try {\r\n        if (fs.existsSync(gitignorePath)) {\r\n            const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');\r\n            gitignoreObj = ignore().add(gitignoreContent);\r\n        } else {\r\n            gitignoreObj = null;\r\n        }\r\n    } catch (error) {\r\n        console.error('Fehler beim Laden der .gitignore-Datei:', error);\r\n        gitignoreObj = null;\r\n    }\r\n}\r\n\r\n/**\r\n * FileSystemWatcher konfigurieren\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nfunction setupFileWatcher(context) {\r\n    // Vorhandenen Watcher deaktivieren\r\n    disableFileWatcher();\r\n\r\n    // Neuen Watcher erstellen\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        vscode.window.showErrorMessage('Comitto: Kein Workspace gefunden.');\r\n        return;\r\n    }\r\n\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const triggerRules = config.get('triggerRules');\r\n    const filePatterns = triggerRules.filePatterns || ['**/*'];\r\n\r\n    fileWatcher = vscode.workspace.createFileSystemWatcher(filePatterns.length === 1 ? filePatterns[0] : '{' + filePatterns.join(',') + '}');\r\n    \r\n    // Auf Dateiereignisse reagieren\r\n    fileWatcher.onDidChange(uri => {\r\n        if (!isFileIgnored(uri.fsPath)) {\r\n            changedFiles.add(uri.fsPath);\r\n            checkCommitTrigger();\r\n        }\r\n    });\r\n    \r\n    fileWatcher.onDidCreate(uri => {\r\n        if (!isFileIgnored(uri.fsPath)) {\r\n            changedFiles.add(uri.fsPath);\r\n            checkCommitTrigger();\r\n        }\r\n    });\r\n    \r\n    fileWatcher.onDidDelete(uri => {\r\n        if (!isFileIgnored(uri.fsPath)) {\r\n            changedFiles.add(uri.fsPath);\r\n            checkCommitTrigger();\r\n        }\r\n    });\r\n\r\n    context.subscriptions.push(fileWatcher);\r\n\r\n    // Interval-Timer einrichten, falls aktiviert\r\n    if (triggerRules.onInterval) {\r\n        setupIntervalTrigger(triggerRules.intervalMinutes);\r\n    }\r\n}\r\n\r\n/**\r\n * Richtet einen Interval-Trigger für automatische Commits ein\r\n * @param {number} minutes Intervall in Minuten\r\n */\r\nfunction setupIntervalTrigger(minutes) {\r\n    // Bestehenden Timer löschen\r\n    if (intervalTimer) {\r\n        clearInterval(intervalTimer);\r\n        intervalTimer = null;\r\n    }\r\n    \r\n    // Neuen Timer einrichten\r\n    if (minutes > 0) {\r\n        const intervalMs = minutes * 60 * 1000;\r\n        intervalTimer = setInterval(() => {\r\n            if (vscode.workspace.getConfiguration('comitto').get('autoCommitEnabled') && changedFiles.size > 0) {\r\n                const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n                if (notificationSettings.onTriggerFired) {\r\n                    showNotification('Intervall-Trigger aktiviert. Prüfe auf ausstehende Commits...', 'info');\r\n                }\r\n                checkCommitTrigger();\r\n            }\r\n        }, intervalMs);\r\n    }\r\n}\r\n\r\n/**\r\n * FileSystemWatcher deaktivieren\r\n */\r\nfunction disableFileWatcher() {\r\n    if (fileWatcher) {\r\n        fileWatcher.dispose();\r\n        fileWatcher = null;\r\n    }\r\n    \r\n    // Interval-Timer deaktivieren\r\n    if (intervalTimer) {\r\n        clearInterval(intervalTimer);\r\n        intervalTimer = null;\r\n    }\r\n    \r\n    changedFiles.clear();\r\n}\r\n\r\n/**\r\n * Überprüft, ob eine Datei ignoriert werden soll\r\n * @param {string} filePath Dateipfad\r\n * @returns {boolean}\r\n */\r\nfunction isFileIgnored(filePath) {\r\n    // Standardmäßig node_modules und .git ausschließen\r\n    if (filePath.includes('node_modules') || filePath.includes('.git')) {\r\n        return true;\r\n    }\r\n\r\n    // .gitignore-Regeln prüfen, wenn verfügbar\r\n    if (gitignoreObj) {\r\n        const workspaceFolders = vscode.workspace.workspaceFolders;\r\n        if (workspaceFolders) {\r\n            const relativePath = path.relative(workspaceFolders[0].uri.fsPath, filePath)\r\n                .replace(/\\\\/g, '/');  // Pfadtrennzeichen normalisieren\r\n            \r\n            return gitignoreObj.ignores(relativePath);\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Prüft, ob die Bedingungen für ein Auto-Commit erfüllt sind\r\n */\r\nfunction checkCommitTrigger() {\r\n    // Wenn bereits ein Commit-Vorgang läuft, abbrechen\r\n    if (isCommitInProgress) {\r\n        return;\r\n    }\r\n\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const rules = config.get('triggerRules');\r\n\r\n    // Prüfen, ob bestimmte Dateien geändert wurden\r\n    const specificFiles = rules.specificFiles || [];\r\n    const hasSpecificFileChanged = specificFiles.length > 0 && \r\n        specificFiles.some(file => [...changedFiles].some(changed => changed.includes(file)));\r\n\r\n    // Prüfen, ob die Mindestanzahl an Änderungen erreicht wurde\r\n    const hasMinChanges = changedFiles.size >= (rules.minChangeCount || 10);\r\n\r\n    // Prüfen, ob die Anzahl der geänderten Dateien den Schwellwert überschreitet\r\n    const hasFileThreshold = changedFiles.size >= (rules.fileCountThreshold || 3);\r\n\r\n    // Prüfen, ob genug Zeit seit dem letzten Commit vergangen ist\r\n    const timeThresholdMinutes = rules.timeThresholdMinutes || 30;\r\n    const timeThresholdMs = timeThresholdMinutes * 60 * 1000;\r\n    const hasTimeThresholdPassed = !lastCommitTime || \r\n        (Date.now() - lastCommitTime.getTime() >= timeThresholdMs);\r\n\r\n    // Commit auslösen, wenn die Bedingungen erfüllt sind\r\n    if (hasTimeThresholdPassed && (hasSpecificFileChanged || hasMinChanges || hasFileThreshold)) {\r\n        performAutoCommit();\r\n    }\r\n}\r\n\r\n/**\r\n * Führt den automatischen Commit-Prozess durch\r\n * @param {boolean} isManualTrigger Gibt an, ob der Commit manuell ausgelöst wurde\r\n */\r\nasync function performAutoCommit(isManualTrigger = false) {\r\n    try {\r\n        isCommitInProgress = true;\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Commit wird vorbereitet...\";\r\n\r\n        // Git-Repository-Pfad bestimmen\r\n        const workspaceFolders = vscode.workspace.workspaceFolders;\r\n        if (!workspaceFolders) {\r\n            throw new Error('Kein Workspace gefunden.');\r\n        }\r\n\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const gitSettings = config.get('gitSettings');\r\n        const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\r\n        \r\n        try {\r\n            // Prüfen, ob Git initialisiert ist\r\n            try {\r\n                await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\r\n            } catch (error) {\r\n                throw new Error('Kein Git-Repository gefunden. Bitte initialisieren Sie zuerst ein Git-Repository.');\r\n            }\r\n            \r\n            // Dateien zum Staging hinzufügen\r\n            await stageChanges(gitSettings.stageMode);\r\n            \r\n            // git status ausführen, um Änderungen zu erhalten\r\n            const gitStatus = await executeGitCommand('git status --porcelain', repoPath);\r\n            \r\n            if (!gitStatus.trim() && !isManualTrigger) {\r\n                isCommitInProgress = false;\r\n                statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n                changedFiles.clear();\r\n                return;\r\n            } else if (!gitStatus.trim() && isManualTrigger) {\r\n                throw new Error('Keine Änderungen zum Committen gefunden.');\r\n            }\r\n\r\n            // Änderungen abrufen\r\n            let diffOutput = '';\r\n            try {\r\n                statusBarItem.text = \"$(sync~spin) Comitto: Diff wird berechnet...\";\r\n                diffOutput = await executeGitCommand('git diff --cached', repoPath);\r\n            } catch (error) {\r\n                // Bei Pufferüberlauf trotzdem weitermachen, aber mit eingeschränktem Diff\r\n                if (error.message.includes('zu groß') || \r\n                    error.message.includes('maxBuffer') || \r\n                    error.message.includes('ERR_CHILD_PROCESS_STDOUT_MAXBUFFER')) {\r\n                    \r\n                    console.warn('Diff zu groß, verwende alternative Strategie');\r\n                    diffOutput = 'Der Diff ist zu groß für die direkte Verarbeitung.\\n';\r\n                    \r\n                    // Dateiliste anstelle des vollständigen Diffs verwenden\r\n                    try {\r\n                        const fileList = await executeGitCommand('git diff --cached --name-status', repoPath);\r\n                        diffOutput += 'Geänderte Dateien:\\n' + fileList;\r\n                    } catch (innerError) {\r\n                        console.error('Auch die Dateiliste konnte nicht abgerufen werden:', innerError);\r\n                        diffOutput += 'Diff-Inhalt konnte nicht abgerufen werden. Zu viele oder zu große Änderungen.';\r\n                    }\r\n                } else {\r\n                    // Bei anderen Fehlern den Fehler weiterreichen\r\n                    throw error;\r\n                }\r\n            }\r\n            \r\n            statusBarItem.text = \"$(sync~spin) Comitto: Generiere Commit-Nachricht...\";\r\n            \r\n            // Commit-Nachricht mit ausgewähltem KI-Modell generieren\r\n            const commitMessage = await generateCommitMessage(gitStatus, diffOutput);\r\n            \r\n            if (!commitMessage || commitMessage.trim().length === 0) {\r\n                throw new Error('Keine gültige Commit-Nachricht generiert. Bitte versuchen Sie es erneut.');\r\n            }\r\n            \r\n            // Verzweigen, falls ein bestimmter Branch konfiguriert ist\r\n            if (gitSettings.branch) {\r\n                try {\r\n                    statusBarItem.text = \"$(sync~spin) Comitto: Prüfe Branch...\";\r\n                    // Prüfen, ob der Branch existiert\r\n                    const branches = await executeGitCommand('git branch', repoPath);\r\n                    if (!branches.includes(gitSettings.branch)) {\r\n                        await executeGitCommand(`git checkout -b ${gitSettings.branch}`, repoPath);\r\n                        showNotification(`Branch '${gitSettings.branch}' erstellt und ausgecheckt.`, 'info');\r\n                    } else {\r\n                        await executeGitCommand(`git checkout ${gitSettings.branch}`, repoPath);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Fehler beim Branch-Wechsel:', error);\r\n                    showNotification(`Fehler beim Branch-Wechsel: ${error.message}. Fortfahren mit aktuellem Branch.`, 'warning');\r\n                    // Fortfahren mit dem aktuellen Branch\r\n                }\r\n            }\r\n            \r\n            statusBarItem.text = \"$(sync~spin) Comitto: Führe Commit aus...\";\r\n            \r\n            // git commit ausführen\r\n            await executeGitCommand(`git commit -m \"${commitMessage.replace(/\"/g, '\\\\\"')}\"`, repoPath);\r\n            \r\n            // Benachrichtigungen anzeigen basierend auf den Einstellungen\r\n            const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n            \r\n            if (!isManualTrigger && notificationSettings.onCommit) {\r\n                showNotification(`Automatischer Commit durchgeführt: ${commitMessage}`, 'info');\r\n            } else if (isManualTrigger) {\r\n                showNotification(`Manueller Commit durchgeführt: ${commitMessage}`, 'info');\r\n            }\r\n            \r\n            // Automatischen Push ausführen, wenn konfiguriert\r\n            if (gitSettings.autoPush) {\r\n                try {\r\n                    statusBarItem.text = \"$(sync~spin) Comitto: Pushe Änderungen...\";\r\n                    const currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\r\n                    await executeGitCommand(`git push origin ${currentBranch}`, repoPath);\r\n                    \r\n                    if (notificationSettings.onPush) {\r\n                        showNotification(`Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Push fehlgeschlagen:', error);\r\n                    if (notificationSettings.onError) {\r\n                        showNotification(`Push fehlgeschlagen: ${error.message}`, 'error');\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Statusleiste aktualisieren und Änderungen zurücksetzen\r\n            lastCommitTime = new Date();\r\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n            changedFiles.clear();\r\n        } catch (error) {\r\n            console.error('Git-Befehl fehlgeschlagen:', error);\r\n            const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n            \r\n            // Benutzerfreundlichere Fehlermeldung\r\n            let errorMessage = error.message;\r\n            if (errorMessage.includes('fatal: not a git repository')) {\r\n                errorMessage = 'Dieses Verzeichnis ist kein Git-Repository. Bitte initialisieren Sie zuerst ein Git-Repository.';\r\n            } else if (errorMessage.includes('fatal: unable to access')) {\r\n                errorMessage = 'Fehler beim Zugriff auf das Remote-Repository. Bitte prüfen Sie Ihre Netzwerkverbindung und Zugangsrechte.';\r\n            } else if (errorMessage.includes('maxBuffer') || errorMessage.includes('zu groß')) {\r\n                errorMessage = 'Zu viele oder zu große Änderungen für die automatische Verarbeitung. Bitte führen Sie einen manuellen Commit durch oder reduzieren Sie die Anzahl der Änderungen.';\r\n            }\r\n            \r\n            if (notificationSettings.onError) {\r\n                showNotification(`Git-Befehl fehlgeschlagen: ${errorMessage}`, 'error');\r\n            }\r\n            \r\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n            throw error;\r\n        }\r\n    } catch (error) {\r\n        console.error('Comitto Fehler:', error);\r\n        const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n        if (notificationSettings.onError) {\r\n            showNotification(`Comitto Fehler: ${error.message}`, 'error');\r\n        }\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n    } finally {\r\n        isCommitInProgress = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Führt das Staging von Dateien basierend auf dem konfigurieren Modus aus\r\n * @param {string} mode Der Staging-Modus ('all', 'specific', 'prompt')\r\n * @returns {Promise<void>}\r\n */\r\nasync function stageChanges(mode) {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        throw new Error('Kein Workspace gefunden.');\r\n    }\r\n    \r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const gitSettings = config.get('gitSettings');\r\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\r\n    \r\n    // Bei manuellem Modus Benutzer nach Dateien fragen\r\n    if (mode === 'prompt') {\r\n        // Git Status abrufen\r\n        const gitStatusOutput = await executeGitCommand('git status --porcelain', repoPath);\r\n        if (!gitStatusOutput.trim()) {\r\n            throw new Error('Keine Änderungen zum Stagen gefunden.');\r\n        }\r\n        \r\n        // Dateien parsen\r\n        const changedFilesList = gitStatusOutput.split('\\n')\r\n            .filter(line => line.trim().length > 0)\r\n            .map(line => {\r\n                const status = line.substring(0, 2).trim();\r\n                const filePath = line.substring(3).trim();\r\n                return { status, filePath };\r\n            });\r\n        \r\n        // Dateien zur Auswahl anbieten\r\n        const selectedFiles = await vscode.window.showQuickPick(\r\n            changedFilesList.map(file => ({\r\n                label: file.filePath,\r\n                description: ui.getStatusDescription(file.status),\r\n                picked: true // Standardmäßig alle auswählen\r\n            })),\r\n            {\r\n                canPickMany: true,\r\n                placeHolder: 'Dateien zum Stagen auswählen'\r\n            }\r\n        );\r\n        \r\n        if (!selectedFiles || selectedFiles.length === 0) {\r\n            throw new Error('Keine Dateien ausgewählt.');\r\n        }\r\n        \r\n        // Ausgewählte Dateien stagen\r\n        for (const file of selectedFiles) {\r\n            await executeGitCommand(`git add \"${file.label}\"`, repoPath);\r\n        }\r\n        \r\n        return;\r\n    }\r\n    \r\n    // Spezifische Dateien basierend auf Mustern stagen\r\n    if (mode === 'specific') {\r\n        const patterns = gitSettings.specificStagingPatterns || ['**/*.js', '**/*.ts', '**/*.json'];\r\n        \r\n        for (const pattern of patterns) {\r\n            try {\r\n                // Bei Windows können wir Probleme mit den Pfadtrennzeichen haben,\r\n                // daher verwenden wir ein sicheres Muster für die Ausführung\r\n                const safePattern = pattern.replace(/\\\\/g, '/');\r\n                await executeGitCommand(`git add \"${safePattern}\"`, repoPath);\r\n            } catch (error) {\r\n                console.error(`Fehler beim Stagen von Muster ${pattern}:`, error);\r\n                // Wir werfen den Fehler nicht weiter, sondern versuchen andere Muster\r\n            }\r\n        }\r\n        \r\n        return;\r\n    }\r\n    \r\n    // Standardmäßig alle Änderungen stagen\r\n    await executeGitCommand('git add .', repoPath);\r\n}\r\n\r\n/**\r\n * Zeigt eine Benachrichtigung an, wenn entsprechend konfiguriert\r\n * @param {string} message Die anzuzeigende Nachricht\r\n * @param {string} type Der Typ der Nachricht (info, warning, error)\r\n */\r\nfunction showNotification(message, type = 'info') {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const uiSettings = config.get('uiSettings');\r\n    \r\n    if (uiSettings && uiSettings.showNotifications) {\r\n        switch (type) {\r\n            case 'info':\r\n                vscode.window.showInformationMessage(message);\r\n                break;\r\n            case 'warning':\r\n                vscode.window.showWarningMessage(message);\r\n                break;\r\n            case 'error':\r\n                vscode.window.showErrorMessage(message);\r\n                break;\r\n            default:\r\n                vscode.window.showInformationMessage(message);\r\n        }\r\n    }\r\n    \r\n    // Immer in die Konsole loggen\r\n    console.log(`Comitto [${type}]: ${message}`);\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit dem konfigurierten KI-Modell\r\n * @param {string} gitStatus Die Ausgabe von git status\r\n * @param {string} diffOutput Die Ausgabe von git diff\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateCommitMessage(gitStatus, diffOutput) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const aiProvider = config.get('aiProvider');\r\n    const gitSettings = config.get('gitSettings');\r\n    \r\n    // Änderungen in ein lesbares Format bringen\r\n    const changes = gitStatus.split('\\n')\r\n        .filter(line => line.trim().length > 0)\r\n        .map(line => {\r\n            const status = line.substring(0, 2).trim();\r\n            const filePath = line.substring(3).trim();\r\n            return `${getStatusText(status)} ${filePath}`;\r\n        })\r\n        .join('\\n');\r\n    \r\n    // Prompt-Vorlage mit Änderungen füllen\r\n    let promptTemplate = config.get('promptTemplate');\r\n    promptTemplate = promptTemplate.replace('{changes}', changes);\r\n    \r\n    // Sprache für die Commit-Nachricht einfügen\r\n    const language = gitSettings.commitMessageLanguage || 'de';\r\n    if (!promptTemplate.includes(language)) {\r\n        promptTemplate += `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\r\n    }\r\n    \r\n    // Commit-Stil einfügen\r\n    const style = gitSettings.commitMessageStyle || 'conventional';\r\n    if (style === 'conventional' && !promptTemplate.includes('conventional')) {\r\n        promptTemplate += `\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).`;\r\n    }\r\n    \r\n    // Diff-Informationen für komplexere Abrechnungen hinzufügen\r\n    if (diffOutput && diffOutput.length > 0) {\r\n        // Eine aggressiv gekürzte Version des Diffs anhängen, um den Kontext zu verbessern,\r\n        // aber nicht zu viel Token zu verwenden\r\n        const maxDiffLength = 2000; // Maximale Anzahl der Zeichen des Diffs reduziert auf 2000\r\n        \r\n        // Sehr große Diffs erkennen und Warnung ausgeben\r\n        if (diffOutput.length > 100000) {\r\n            console.warn(`Extrem großer Diff (${diffOutput.length} Zeichen) wird stark gekürzt.`);\r\n        }\r\n        \r\n        // Intelligente Kürzung: Nur die ersten Änderungen jeder Datei\r\n        let shortenedDiff = '';\r\n        \r\n        try {\r\n            // Aufteilen nach Dateiänderungen (beginnen mit 'diff --git')\r\n            const fileChanges = diffOutput.split('diff --git');\r\n            \r\n            // Die ersten Änderungen für jede Datei extrahieren (maximal 5 Dateien)\r\n            const maxFiles = 5;\r\n            const filesToInclude = fileChanges.slice(0, maxFiles);\r\n            \r\n            filesToInclude.forEach((fileChange, index) => {\r\n                if (index === 0 && !fileChange.trim()) return; // Erstes Element kann leer sein\r\n                \r\n                // Jede Dateiänderung auf maximal 400 Zeichen beschränken\r\n                const maxPerFile = 400;\r\n                const truncatedChange = fileChange.length > maxPerFile \r\n                    ? fileChange.substring(0, maxPerFile) + '...' \r\n                    : fileChange;\r\n                \r\n                shortenedDiff += (index > 0 ? 'diff --git' : '') + truncatedChange + '\\n';\r\n            });\r\n            \r\n            // Kürzen, wenn insgesamt zu lang\r\n            if (shortenedDiff.length > maxDiffLength) {\r\n                shortenedDiff = shortenedDiff.substring(0, maxDiffLength);\r\n            }\r\n            \r\n            shortenedDiff += `\\n[Diff wurde gekürzt, insgesamt ${diffOutput.length} Zeichen in ${fileChanges.length} Dateien]`;\r\n        } catch (error) {\r\n            console.error('Fehler beim Kürzen des Diffs:', error);\r\n            shortenedDiff = diffOutput.substring(0, maxDiffLength) + \r\n                `...\\n[Diff wurde einfach gekürzt, insgesamt ${diffOutput.length} Zeichen]`;\r\n        }\r\n        \r\n        promptTemplate += `\\n\\nHier ist ein Ausschnitt der konkreten Änderungen:\\n\\n${shortenedDiff}`;\r\n    }\r\n    \r\n    // Verschiedene KI-Provider unterstützen\r\n    switch (aiProvider) {\r\n        case 'ollama':\r\n            return await generateWithOllama(promptTemplate);\r\n        case 'openai':\r\n            return await generateWithOpenAI(promptTemplate);\r\n        case 'anthropic':\r\n            return await generateWithAnthropic(promptTemplate);\r\n        default:\r\n            throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit Ollama\r\n * @param {string} prompt Der zu verwendende Prompt\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateWithOllama(prompt) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const endpoint = config.get('ollama.endpoint') || 'http://localhost:11434/api/generate';\r\n    const model = config.get('ollama.model') || 'llama3';\r\n    \r\n    try {\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Generiere Commit-Nachricht mit Ollama...\";\r\n        \r\n        const response = await axios.post(endpoint, {\r\n            model: model,\r\n            prompt: prompt,\r\n            stream: false\r\n        }, {\r\n            timeout: 30000 // 30 Sekunden Timeout für lokale Modelle\r\n        });\r\n        \r\n        if (response.data && response.data.response) {\r\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n            \r\n            // Formatierung der Nachricht: Leerzeichen und Anführungszeichen entfernen\r\n            let commitMessage = response.data.response.trim()\r\n                .replace(/^[\"']|[\"']$/g, '')  // Entfernt Anführungszeichen am Anfang und Ende\r\n                .replace(/\\n/g, ' ');  // Ersetzt Zeilenumbrüche durch Leerzeichen\r\n            \r\n            // Prüfen, ob die Nachricht zu lang ist und ggf. kürzen\r\n            if (commitMessage.length > 100) {\r\n                commitMessage = commitMessage.substring(0, 97) + '...';\r\n            }\r\n            \r\n            return commitMessage;\r\n        } else {\r\n            throw new Error('Unerwartetes Antwortformat von Ollama');\r\n        }\r\n    } catch (error) {\r\n        console.error('Ollama API-Fehler:', error.response?.data || error.message);\r\n        \r\n        // Detaillierte Fehlermeldung\r\n        let errorMessage = 'Fehler bei der Kommunikation mit Ollama';\r\n        \r\n        if (error.code === 'ECONNREFUSED') {\r\n            errorMessage = 'Verbindung zu Ollama fehlgeschlagen. Bitte stellen Sie sicher, dass Ollama läuft und erreichbar ist.';\r\n        } else if (error.code === 'ETIMEDOUT' || error.code === 'TIMEOUT') {\r\n            errorMessage = 'Zeitüberschreitung bei der Anfrage an Ollama. Bitte prüfen Sie die Verbindung oder versuchen Sie ein kleineres Modell.';\r\n        } else if (error.response?.status === 404) {\r\n            errorMessage = `Das Ollama-Modell \"${model}\" wurde nicht gefunden. Bitte stellen Sie sicher, dass das Modell installiert ist.`;\r\n        } else if (error.response?.data) {\r\n            errorMessage = `Ollama-Fehler: ${error.response.data.error || JSON.stringify(error.response.data)}`;\r\n        } else {\r\n            errorMessage = `Ollama-Fehler: ${error.message}`;\r\n        }\r\n        \r\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n        vscode.window.showErrorMessage(errorMessage);\r\n        \r\n        // Fallback: Einfache, generische Commit-Nachricht\r\n        return \"chore: Änderungen commited\";\r\n    }\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit OpenAI\r\n * @param {string} prompt Der zu verwendende Prompt\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateWithOpenAI(prompt) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const apiKey = config.get('openai.apiKey');\r\n    const model = config.get('openai.model');\r\n    \r\n    if (!apiKey) {\r\n        throw new Error('OpenAI API-Schlüssel nicht konfiguriert');\r\n    }\r\n    \r\n    try {\r\n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\r\n            model: model,\r\n            messages: [\r\n                { role: 'system', content: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.' },\r\n                { role: 'user', content: prompt }\r\n            ],\r\n            temperature: 0.3,\r\n            max_tokens: 100\r\n        }, {\r\n            headers: {\r\n                'Authorization': `Bearer ${apiKey}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if (response.data && response.data.choices && response.data.choices[0]) {\r\n            return response.data.choices[0].message.content.trim()\r\n                .replace(/^[\"']|[\"']$/g, '')\r\n                .replace(/\\n/g, ' ');\r\n        } else {\r\n            throw new Error('Unerwartetes Antwortformat von OpenAI');\r\n        }\r\n    } catch (error) {\r\n        console.error('OpenAI API-Fehler:', error.response?.data || error.message);\r\n        throw new Error(`Fehler bei der Kommunikation mit OpenAI: ${error.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit Anthropic\r\n * @param {string} prompt Der zu verwendende Prompt\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateWithAnthropic(prompt) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const apiKey = config.get('anthropic.apiKey');\r\n    const model = config.get('anthropic.model');\r\n    \r\n    if (!apiKey) {\r\n        throw new Error('Anthropic API-Schlüssel nicht konfiguriert');\r\n    }\r\n    \r\n    try {\r\n        const response = await axios.post('https://api.anthropic.com/v1/messages', {\r\n            model: model,\r\n            max_tokens: 100,\r\n            temperature: 0.3,\r\n            system: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.',\r\n            messages: [\r\n                { role: 'user', content: prompt }\r\n            ]\r\n        }, {\r\n            headers: {\r\n                'x-api-key': apiKey,\r\n                'anthropic-version': '2023-06-01',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if (response.data && response.data.content && response.data.content[0]) {\r\n            return response.data.content[0].text.trim()\r\n                .replace(/^[\"']|[\"']$/g, '')\r\n                .replace(/\\n/g, ' ');\r\n        } else {\r\n            throw new Error('Unerwartetes Antwortformat von Anthropic');\r\n        }\r\n    } catch (error) {\r\n        console.error('Anthropic API-Fehler:', error.response?.data || error.message);\r\n        throw new Error(`Fehler bei der Kommunikation mit Anthropic: ${error.message}`);\r\n    }\r\n}\r\n\r\nfunction deactivate() {\r\n    disableFileWatcher();\r\n    if (statusBarItem) {\r\n        statusBarItem.dispose();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate\r\n}; ","module.exports = require(\"os\");","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst ui = require('./ui'); // Importiere UI-Modul für Hilfsfunktionen\nconst { executeGitCommand } = require('./utils'); // Annahme: executeGitCommand ist in utils.js\n\n/**\n * Registriert die Befehle für die UI-Interaktionen\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers UI-Provider-Instanzen\n * @param {vscode.StatusBarItem} statusBarItem Das Statusleisten-Element\n * @param {Function} setupFileWatcher Funktion zum Einrichten des File Watchers\n * @param {Function} disableFileWatcher Funktion zum Deaktivieren des File Watchers\n * @param {Function} performAutoCommit Funktion zum Ausführen des Commits\n * @param {Function} showNotification Funktion zum Anzeigen von Benachrichtigungen\n */\nfunction registerCommands(context, providers, statusBarItem, setupFileWatcher, disableFileWatcher, performAutoCommit, showNotification) {\n    // #region Kernbefehle (vorher in extension.js)\n\n    // Befehl zum Öffnen der Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.openSettings', () => {\n        vscode.commands.executeCommand('workbench.action.openSettings', 'comitto');\n    }));\n\n    // Befehl zum Aktualisieren der Einstellungsansicht\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.refreshSettings', () => {\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        showNotification('Comitto-Einstellungen wurden aktualisiert.', 'info');\n    }));\n\n    // Befehl zum Aktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.enableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', true, vscode.ConfigurationTarget.Global);\n        setupFileWatcher(context); // Übergabe des Kontexts ist hier wichtig\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind aktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Deaktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.disableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', false, vscode.ConfigurationTarget.Global);\n        disableFileWatcher();\n        statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind deaktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Umschalten der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoCommit', async () => {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const isEnabled = !config.get('autoCommitEnabled');\n        // Rufe die spezifischen enable/disable Befehle auf, um die Logik nicht zu duplizieren\n        if (isEnabled) {\n            await vscode.commands.executeCommand('comitto.enableAutoCommit');\n        } else {\n            await vscode.commands.executeCommand('comitto.disableAutoCommit');\n        }\n    }));\n\n    // Befehl zum manuellen Ausführen eines KI-generierten Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.performManualCommit', async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            const uiSettings = config.get('uiSettings');\n            \n            // Optional Bestätigung anfordern\n            let shouldProceed = true;\n            if (uiSettings && uiSettings.confirmBeforeCommit) {\n                shouldProceed = await vscode.window.showInformationMessage(\n                    'Möchten Sie einen manuellen KI-Commit durchführen?',\n                    { modal: true }, // Macht das Dialogfeld modal\n                    'Ja'\n                ) === 'Ja';\n            }\n            \n            if (shouldProceed) {\n                await performAutoCommit(true); // 'true' signalisiert manuellen Trigger\n                // Die Erfolgsmeldung wird jetzt innerhalb von performAutoCommit angezeigt\n            }\n        } catch (error) {\n            showNotification(`Fehler beim manuellen Commit: ${error.message}`, 'error');\n        }\n    }));\n\n    // #endregion Kernbefehle\n\n    // #region UI & Konfigurationsbefehle\n\n    // KI-Provider auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAiProvider', async () => {\n        const providerOptions = [\n            { label: 'Ollama (lokal)', id: 'ollama' },\n            { label: 'OpenAI', id: 'openai' },\n            { label: 'Anthropic Claude', id: 'anthropic' }\n        ];\n        \n        const selected = await vscode.window.showQuickPick(providerOptions, {\n            placeHolder: 'KI-Provider auswählen',\n            title: 'Comitto - KI-Provider auswählen'\n        });\n        \n        if (selected) {\n            await vscode.workspace.getConfiguration('comitto').update('aiProvider', selected.id, vscode.ConfigurationTarget.Global);\n            if (providers) {\n                providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n            showNotification(`KI-Provider auf \"${selected.label}\" gesetzt.`, 'info');\n        }\n    }));\n\n    // Ollama-Modell bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaModel', async () => { ... }));\n\n    // Ollama-Endpoint bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaEndpoint', async () => { ... }));\n\n    // OpenAI-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectOpenAIModel', async () => {\n        await handleOpenAIModelSelectionCommand(); // Ruft die dedizierte Funktion auf\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // OpenAI-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editOpenAIKey', async () => {\n        await handleEditOpenAIKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAnthropicModel', async () => {\n        await handleSelectAnthropicModelCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editAnthropicKey', async () => {\n        await handleEditAnthropicKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // #region Trigger-Regeln Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFileCountThreshold', async () => {\n        await handleEditTriggerRuleCommand('fileCountThreshold', 'Datei-Anzahl Schwellenwert', 'z.B. 3', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editMinChangeCount', async () => {\n        await handleEditTriggerRuleCommand('minChangeCount', 'Änderungs-Anzahl Schwellenwert', 'z.B. 10', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editTimeThreshold', async () => {\n        await handleEditTriggerRuleCommand('timeThresholdMinutes', 'Zeit-Schwellwert (Minuten)', 'z.B. 30', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFilePatterns', async () => {\n        await handleEditTriggerRuleCommand('filePatterns', 'Dateimuster (kommagetrennt)', 'z.B. **/*.js, **/*.ts', 'patterns');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editSpecificFiles', async () => {\n        await handleEditTriggerRuleCommand('specificFiles', 'Spezifische Dateien (kommagetrennt)', 'z.B. package.json, README.md', 'files');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editIntervalMinutes', async () => {\n        await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall für Intervall-Trigger (Minuten)', 'z.B. 15', 'number');\n    }));\n\n    // Neue Toggle-Befehle für Trigger-Regeln\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnSave', async () => {\n        await handleToggleTriggerRuleCommand('onSave', 'Speichern-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnInterval', async () => {\n        await handleToggleTriggerRuleCommand('onInterval', 'Intervall-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnBranchSwitch', async () => {\n        await handleToggleTriggerRuleCommand('onBranchSwitch', 'Branch-Wechsel-Trigger');\n    }));\n    // #endregion\n\n    // #region Git-Einstellungen Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoPush', async () => {\n        await handleToggleGitSettingCommand('autoPush', 'Auto-Push');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editBranch', async () => {\n        await handleEditGitSettingCommand('branch', 'Branch für Commits', 'Leer lassen für aktuellen Branch');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitLanguage', async () => {\n        await handleCommitMessageLanguageCommand(); // Behält eigene Logik wegen Prompt-Anpassung\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitStyle', async () => {\n        await handleSelectGitSettingCommand('commitMessageStyle', 'Commit-Nachrichtenstil', [\n            { label: 'Conventional Commits', value: 'conventional' },\n            { label: 'Gitmoji', value: 'gitmoji' }\n        ]);\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleUseGitignore', async () => {\n        await handleToggleGitSettingCommand('useGitignore', 'Gitignore-Verwendung');\n        // Eventuell gitignore neu laden\n        const commandExists = await vscode.commands.getCommands(true).then(cmds => cmds.includes('comitto.internal.reloadGitignore'));\n        if (commandExists) {\n            vscode.commands.executeCommand('comitto.internal.reloadGitignore');\n        } else {\n            console.warn('Befehl comitto.internal.reloadGitignore nicht gefunden.');\n        }\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectStageMode', async () => {\n        await handleSelectStageModeCommand(); // Behält eigene Logik wegen Pattern-Frage\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editStagingPatterns', async () => {\n        await handleEditStagingPatternsCommand(); // Behält eigene Logik\n    }));\n    // #endregion\n\n    // #region UI-Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleSimpleMode', async () => {\n        await handleToggleUISettingCommand('simpleMode', 'Einfacher Modus');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleConfirmBeforeCommit', async () => {\n        await handleToggleUISettingCommand('confirmBeforeCommit', 'Bestätigung vor Commit');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleShowNotifications', async () => {\n        await handleToggleUISettingCommand('showNotifications', 'Benachrichtigungen anzeigen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectTheme', async () => {\n        await handleSelectThemeCommand();\n    }));\n    // #endregion\n\n    // #region Benachrichtigungseinstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnCommit', async () => {\n        await handleToggleNotificationSettingCommand('onCommit', 'Commit-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnPush', async () => {\n        await handleToggleNotificationSettingCommand('onPush', 'Push-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnError', async () => {\n        await handleToggleNotificationSettingCommand('onError', 'Fehler-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnTriggerFired', async () => {\n        await handleToggleNotificationSettingCommand('onTriggerFired', 'Trigger-Benachrichtigungen');\n    }));\n    // #endregion\n\n    // Prompt-Vorlage bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editPromptTemplate', async () => {\n        await handleEditPromptTemplateCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Dashboard anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showDashboard', async () => {\n        await handleShowDashboardCommand(context);\n    }));\n\n    // KI-Provider konfigurieren (kombiniert Auswahl und spezifische Konfig)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureAIProvider', async () => {\n        await handleConfigureAIProviderCommand(providers);\n    }));\n\n    // Trigger konfigurieren (grafisch oder direkt)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureTriggers', async () => {\n        await handleConfigureTriggersCommand(context, providers);\n    }));\n\n    // Einfache Benutzeroberfläche anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showSimpleUI', () => {\n        showSimpleUI(context, providers);\n    }));\n\n    // #endregion UI & Konfigurationsbefehle\n}\n\n// ==========================================================================\n// HILFSFUNKTIONEN FÜR BEFEHLE\n// ==========================================================================\n\n// #region Generische Handler für Einstellungen\n\n/**\n * Generischer Handler zum Bearbeiten einer Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n * @param {'number'|'patterns'|'files'} inputType Typ der Eingabe für Validierung/Parsing.\n */\nasync function handleEditTriggerRuleCommand(ruleKey, promptText, placeHolder, inputType) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = { ...config.get('triggerRules') }; // Kopie erstellen\n    const currentValue = rules[ruleKey];\n\n    let valueToString = '';\n    if (inputType === 'patterns' || inputType === 'files') {\n        valueToString = Array.isArray(currentValue) ? currentValue.join(', ') : '';\n    } else {\n        valueToString = currentValue !== undefined ? currentValue.toString() : '';\n    }\n\n        const value = await vscode.window.showInputBox({\n        value: valueToString,\n        prompt: promptText,\n        placeHolder: placeHolder,\n            validateInput: text => {\n            if (inputType === 'number') {\n                if (!text) return 'Eingabe darf nicht leer sein.';\n                const num = parseInt(text);\n                if (isNaN(num) || num < (ruleKey === 'intervalMinutes' || ruleKey === 'timeThresholdMinutes' ? 1 : 0)) {\n                    return 'Bitte geben Sie eine gültige positive Zahl ein.';\n                }\n            }\n            // Keine spezielle Validierung für patterns/files hier, erfolgt beim Speichern\n            return null;\n            }\n        });\n        \n        if (value !== undefined) {\n        let processedValue;\n        if (inputType === 'number') {\n            processedValue = parseInt(value);\n        } else if (inputType === 'patterns' || inputType === 'files') {\n            processedValue = value.split(',').map(p => p.trim()).filter(p => p.length > 0);\n            if (inputType === 'patterns' && processedValue.length === 0) {\n                processedValue = ['**/*']; // Standard, wenn leer\n            }\n        } else {\n            processedValue = value; // Fallback\n        }\n\n        rules[ruleKey] = processedValue;\n        await config.update('triggerRules', rules, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleTriggerRuleCommand(ruleKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const triggerRules = config.get('triggerRules') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(triggerRules[ruleKey]);\n        \n        // Aktualisierte triggerRules erstellen\n        const updatedRules = { ...triggerRules, [ruleKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('triggerRules', updatedRules, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        \n        // Falls es der Intervall-Trigger ist und er aktiviert wurde, nach dem Intervall fragen\n        if (ruleKey === 'onInterval' && newValue && (!triggerRules.intervalMinutes || triggerRules.intervalMinutes <= 0)) {\n            await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall (Minuten)', 'z.B. 5', 'number');\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n/**\n * Generischer Handler zum Bearbeiten einer Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n */\nasync function handleEditGitSettingCommand(settingKey, promptText, placeHolder) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') }; // Kopie erstellen\n    const currentValue = gitSettings[settingKey];\n\n        const value = await vscode.window.showInputBox({\n        value: currentValue !== undefined ? currentValue.toString() : '',\n        prompt: promptText,\n        placeHolder: placeHolder,\n        });\n        \n        if (value !== undefined) {\n        gitSettings[settingKey] = value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleGitSettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const newValue = !gitSettings[settingKey];\n    gitSettings[settingKey] = newValue;\n    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`${settingName} ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n/**\n * Generischer Handler zum Auswählen einer Git-Einstellung aus einer Liste.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} placeHolder Platzhalter für die QuickPick-Liste.\n * @param {Array<{label: string, value: any}>} options Auswahloptionen.\n */\nasync function handleSelectGitSettingCommand(settingKey, placeHolder, options) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentValue = gitSettings[settingKey];\n\n    const selected = await vscode.window.showQuickPick(\n        options.map(opt => ({ \n            ...opt,\n            description: currentValue === opt.value ? '(Aktuell)' : ''\n        })),\n        {\n            placeHolder: placeHolder,\n            ignoreFocusOut: true\n        }\n    );\n\n    if (selected) {\n        gitSettings[settingKey] = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${placeHolder} auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen UI-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `uiSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleUISettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const newValue = !uiSettings[settingKey];\n    uiSettings[settingKey] = newValue;\n    await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n    \n    // Für Benachrichtigungen immer eine Nachricht zeigen\n    if (settingKey === 'showNotifications') {\n         vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    } else if (uiSettings.showNotifications) {\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    }\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n// #endregion\n\n// #region Spezifische Handler (Beibehaltene Logik)\n\n/**\n * Behandelt das Kommando zum Bearbeiten des OpenAI API-Schlüssels.\n */\nasync function handleEditOpenAIKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('openai.apiKey');\n        const value = await vscode.window.showInputBox({\n            value: currentValue,\n        prompt: 'Geben Sie Ihren OpenAI API-Schlüssel ein',\n        placeHolder: 'sk-...',\n        password: true,\n        ignoreFocusOut: true\n        });\n        \n        if (value !== undefined) {\n        await config.update('openai.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('OpenAI API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Anthropic-Modells.\n */\nasync function handleSelectAnthropicModelCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentModel = config.get('anthropic.model');\n    const models = [\n        'claude-3-haiku-20240307',\n        'claude-3-sonnet-20240229',\n        'claude-3-opus-20240229',\n        'claude-2.1',\n        'claude-2.0',\n        'claude-instant-1.2'\n    ];\n        \n        const selected = await vscode.window.showQuickPick(\n        models.map(name => ({\n            label: name,\n            description: name === currentModel ? '(Aktuell)' : ''\n        })),\n        { \n            placeHolder: 'Claude-Modell auswählen',\n            ignoreFocusOut: true\n        }\n        );\n        \n        if (selected) {\n        await config.update('anthropic.model', selected.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Anthropic-Modell auf ${selected.label} gesetzt.`);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten des Anthropic API-Schlüssels.\n */\nasync function handleEditAnthropicKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('anthropic.apiKey');\n    const value = await vscode.window.showInputBox({\n        value: currentValue,\n        prompt: 'Geben Sie Ihren Anthropic API-Schlüssel ein',\n        placeHolder: 'sk-ant-...',\n        password: true,\n        ignoreFocusOut: true\n    });\n    \n    if (value !== undefined) {\n        await config.update('anthropic.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('Anthropic API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Bearbeitung der Prompt-Vorlage.\n */\nasync function handleEditPromptTemplateCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('promptTemplate');\n        \n        // Temporäre Datei erstellen und öffnen\n    try {\n        const document = await vscode.workspace.openTextDocument({\n            content: currentValue,\n            language: 'markdown'\n        });\n        \n        await vscode.window.showTextDocument(document);\n        \n        // Listener für Speichern hinzufügen und nach erfolgreichem Speichern wieder entfernen\n        const disposable = vscode.workspace.onDidSaveTextDocument(async (doc) => {\n            if (doc === document) {\n                const newContent = doc.getText();\n                // Nur aktualisieren, wenn sich der Inhalt geändert hat\n                if (newContent !== currentValue) {\n                    await config.update('promptTemplate', newContent, vscode.ConfigurationTarget.Global);\n                vscode.window.showInformationMessage('Prompt-Vorlage wurde gespeichert.');\n                }\n                disposable.dispose(); // Listener entfernen\n                // Optional: Temporäres Dokument schließen?\n                // await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n            }\n        });\n        \n        // Listener für Schließen des Dokuments (ohne Speichern)\n        const closeDisposable = vscode.workspace.onDidCloseTextDocument(doc => {\n            if (doc === document) {\n                disposable.dispose(); // Auch den Speicher-Listener entfernen\n                closeDisposable.dispose();\n            }\n        });\n\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Öffnen der Prompt-Vorlage: ${error.message}`);\n        console.error('Fehler bei handleEditPromptTemplateCommand:', error);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Anzeigen des Dashboards.\n * @param {vscode.ExtensionContext} context \n */\nasync function handleShowDashboardCommand(context) {\n    try {\n        // Bestehendes Panel prüfen und wiederverwenden\n        let panel = null;\n        \n        try {\n            panel = context.globalState.get('comittoDashboardPanel');\n            \n            // Prüfen, ob das Panel noch gültig ist\n            if (panel) {\n                try {\n                    // Test-Zugriff, um zu prüfen, ob das Panel noch existiert\n                    const isVisible = panel.visible;\n                    // Panel fokussieren\n                    panel.reveal(vscode.ViewColumn.One);\n                    console.log('Bestehendes Dashboard-Panel gefunden und fokussiert');\n                } catch (error) {\n                    console.error('Gespeichertes Panel nicht mehr gültig:', error);\n                    // Wenn das Panel nicht mehr gültig ist, es aus dem State entfernen\n                    context.globalState.update('comittoDashboardPanel', undefined);\n                    panel = null;\n                }\n            }\n        } catch (error) {\n            console.error('Fehler beim Zugriff auf gespeichertes Panel:', error);\n            context.globalState.update('comittoDashboardPanel', undefined);\n            panel = null;\n        }\n        \n        if (!panel) {\n            console.log('Erstelle neues Dashboard-Panel');\n            // Neues Panel erstellen\n            panel = vscode.window.createWebviewPanel(\n                'comittoDashboard',\n                'Comitto Dashboard',\n                vscode.ViewColumn.One,\n                {\n                    enableScripts: true,\n                    retainContextWhenHidden: true,\n                    localResourceRoots: [\n                        vscode.Uri.joinPath(context.extensionUri, 'resources')\n                    ]\n                }\n            );\n            \n            // Panel im globalen Zustand speichern\n            context.globalState.update('comittoDashboardPanel', panel);\n            \n            // Nachrichten vom Webview verarbeiten\n            panel.webview.onDidReceiveMessage(\n                async (message) => {\n                    switch (message.command) {\n                        case 'refresh':\n                            try {\n                                panel.webview.html = generateDashboardHTML(context);\n                            } catch (error) {\n                                console.error('Fehler beim Aktualisieren des Dashboards:', error);\n                                vscode.window.showErrorMessage(`Fehler beim Aktualisieren des Dashboards: ${error.message}`);\n                            }\n                            break;\n                        case 'toggleAutoCommit':\n                            try {\n                                const config = vscode.workspace.getConfiguration('comitto');\n                                const enabled = !config.get('autoCommitEnabled');\n                                await config.update('autoCommitEnabled', enabled, vscode.ConfigurationTarget.Global);\n                                panel.webview.html = generateDashboardHTML(context);\n                            } catch (error) {\n                                console.error('Fehler beim Umschalten des Auto-Commit-Status:', error);\n                                vscode.window.showErrorMessage(`Fehler beim Umschalten des Auto-Commit-Status: ${error.message}`);\n                            }\n                            break;\n                        case 'manualCommit':\n                            vscode.commands.executeCommand('comitto.performManualCommit');\n                            break;\n                        case 'openSettings':\n                            vscode.commands.executeCommand('comitto.openSettings');\n                            break;\n                        case 'configureProvider':\n                            vscode.commands.executeCommand('comitto.configureAIProvider');\n                            break;\n                        case 'configureTriggers':\n                            vscode.commands.executeCommand('comitto.configureTriggers');\n                            break;\n                    }\n                },\n                undefined,\n                context.subscriptions\n            );\n\n            // Bereinigen, wenn das Panel geschlossen wird\n            panel.onDidDispose(() => {\n                console.log('Dashboard-Panel wurde geschlossen');\n                context.globalState.update('comittoDashboardPanel', undefined);\n            }, null, context.subscriptions);\n        }\n        \n        // HTML für das Webview generieren und setzen\n        console.log('Setze Dashboard-HTML');\n        try {\n            panel.webview.html = generateDashboardHTML(context);\n        } catch (error) {\n            console.error('Fehler beim Generieren des Dashboard-HTML:', error);\n            vscode.window.showErrorMessage(`Fehler beim Öffnen des Dashboards: ${error.message}`);\n            \n            // Fallback-HTML setzen\n            panel.webview.html = `\n                <html>\n                <head>\n                    <style>\n                        body { font-family: Arial, sans-serif; padding: 20px; }\n                        .error { color: red; }\n                    </style>\n                </head>\n                <body>\n                    <h1>Fehler beim Laden des Dashboards</h1>\n                    <p class=\"error\">${error.message}</p>\n                    <p>Bitte schließen Sie das Dashboard und versuchen Sie es erneut zu öffnen.</p>\n                </body>\n                </html>\n            `;\n        }\n    } catch (error) {\n        console.error('Fehler beim Öffnen des Dashboards:', error);\n        vscode.window.showErrorMessage(`Fehler beim Öffnen des Comitto-Dashboards: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Konfiguration des KI-Providers.\n * @param {Object} providers \n */\nasync function handleConfigureAIProviderCommand(providers) {\n    const providerOptions = [\n        { label: 'Ollama (lokal)', id: 'ollama' },\n        { label: 'OpenAI', id: 'openai' },\n        { label: 'Anthropic Claude', id: 'anthropic' }\n    ];\n    \n    const selectedProvider = await vscode.window.showQuickPick(providerOptions, {\n                placeHolder: 'KI-Provider auswählen',\n                title: 'Comitto - KI-Provider konfigurieren'\n    });\n    \n    if (!selectedProvider) return;\n    \n    // Provider in der Konfiguration speichern\n    await vscode.workspace.getConfiguration('comitto').update('aiProvider', selectedProvider.id, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`KI-Provider auf \"${selectedProvider.label}\" gesetzt.`);\n    \n    // Provider-spezifische Einstellungen konfigurieren\n    let configSuccess = true;\n    switch (selectedProvider.id) {\n        case 'ollama':\n            configSuccess = await configureOllamaSettings();\n                    break;\n                case 'openai':\n            await handleOpenAIModelSelectionCommand();\n            await handleEditOpenAIKeyCommand(); // Fragen wir gleich nach dem Key\n            break;\n        case 'anthropic':\n            await handleSelectAnthropicModelCommand();\n            await handleEditAnthropicKeyCommand(); // Fragen wir gleich nach dem Key\n            break;\n    }\n    \n    // UI nur aktualisieren, wenn Konfiguration erfolgreich war\n    if (configSuccess && providers) {\n        providers.statusProvider.refresh();\n        providers.quickActionsProvider.refresh();\n        providers.settingsProvider.refresh();\n    }\n}\n\n/**\n * Konfiguriert die Ollama-Einstellungen (Endpunkt und Modell) mit verbesserter UX.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Abbruch/Fehler.\n */\nasync function configureOllamaSettings() {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentEndpoint = config.get('ollama.endpoint') || 'http://localhost:11434/api/generate';\n        const currentModel = config.get('ollama.model') || 'llama3';\n        \n        // Konfiguration des Endpoints\n        const endpoint = await vscode.window.showInputBox({\n            placeHolder: 'http://localhost:11434/api/generate',\n            prompt: 'Ollama API-Endpunkt',\n            value: currentEndpoint,\n            validateInput: value => {\n                if (!value) return 'Der Endpunkt darf nicht leer sein';\n                if (!value.startsWith('http://') && !value.startsWith('https://')) {\n                    return 'Der Endpunkt muss mit http:// oder https:// beginnen';\n                }\n                // Einfache URL-Validierung (optional, könnte komplexer sein)\n                try {\n                    new URL(value);\n                } catch (e) {\n                    return 'Ungültige URL';\n                }\n                return null; // Kein Fehler\n            },\n            ignoreFocusOut: true\n        });\n        \n        // Abbruch durch Benutzer\n        if (endpoint === undefined) return false;\n\n        await config.update('ollama.endpoint', endpoint, vscode.ConfigurationTarget.Global);\n        \n        // Versuche, die Verbindung zu Ollama zu testen und Modelle zu laden\n        let availableModels = [];\n        let connectionError = null;\n        try {\n            const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Teste Verbindung zu Ollama und lade Modelle...', 5000);\n            const axios = require('axios');\n            // Verwende /api/tags zum Testen der Verbindung und Abrufen der Modelle\n            const tagsEndpoint = endpoint.replace(/\\/api\\/(generate|chat)$/, '/api/tags');\n            const response = await axios.get(tagsEndpoint, { timeout: 7000 }); // 7 Sekunden Timeout\n            statusBarMessage.dispose(); // Nachricht entfernen\n            \n            if (response.data && response.data.models) {\n                availableModels = response.data.models.map(model => model.name).sort();\n                vscode.window.showInformationMessage(`Verbindung zu Ollama erfolgreich! ${availableModels.length} Modelle gefunden.`);\n            } else {\n                vscode.window.showWarningMessage('Verbindung zu Ollama erfolgreich, aber keine Modelle gefunden.');\n            }\n        } catch (error) {\n            connectionError = error;\n            console.error('Fehler beim Testen der Ollama-Verbindung:', error);\n            vscode.window.showWarningMessage(\n                `Warnung: Konnte keine Verbindung zu Ollama herstellen (${error.message}). ` +\n                'Bitte stellen Sie sicher, dass Ollama läuft und der Endpunkt korrekt ist.'\n            );\n        }\n        \n        // Konfiguration des Modells\n        const popularModels = [\n            'llama3', 'mistral', 'mixtral', 'phi', 'gemma', 'codellama', 'orca-mini'\n        ];\n        \n        // Kombiniere populäre und verfügbare Modelle ohne Duplikate\n        const allModels = [...new Set([...availableModels, ...popularModels])].sort(); // Sortieren für bessere Übersicht\n        \n        // QuickPick für Modell-Auswahl\n        const quickPickItems = allModels.map(model => ({\n            label: model,\n            description: availableModels.includes(model) ? '$(check) Lokal verfügbar' : '$(cloud-download) Evtl. Download nötig',\n            detail: model === currentModel ? '(Aktuell ausgewählt)' : ''\n        }));\n        \n        const selectedModel = await vscode.window.showQuickPick(quickPickItems, {\n            placeHolder: 'Wählen Sie ein Ollama-Modell',\n            title: 'Ollama Modell auswählen',\n            ignoreFocusOut: true\n        });\n        \n        // Abbruch durch Benutzer\n        if (!selectedModel) return false;\n\n        await config.update('ollama.model', selectedModel.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Ollama-Modell auf \"${selectedModel.label}\" gesetzt.`);\n        \n        return true; // Erfolg\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Konfiguration von Ollama: ${error.message}`);\n        console.error('Fehler bei der Konfiguration von Ollama:', error);\n        return false; // Fehler\n    }\n}\n\n/**\n * Funktion zum Verwalten der OpenAI-Modellauswahl\n * Verbesserte Implementierung mit moderner Benutzeroberfläche\n * @returns {Promise<void>}\n */\nasync function handleOpenAIModelSelectionCommand() {\n    try {\n        // OpenAI-Modelle aus UI-Modul abrufen\n        const models = ui.getOpenAIModelOptions().map(option => ({\n            label: option.label,\n            description: option.value,\n            detail: option.value === 'gpt-4o' ? 'Empfohlen' : undefined\n        }));\n        \n        // Aktuelles Modell abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentModel = config.get('openai.model');\n        \n        // Modellauswahl anzeigen\n        const selectedModel = await vscode.window.showQuickPick(models, {\n            placeHolder: 'Wählen Sie ein OpenAI-Modell',\n            title: 'OpenAI-Modell auswählen',\n            matchOnDescription: true,\n            matchOnDetail: true\n        });\n        \n        if (selectedModel) {\n            // Konfiguration aktualisieren\n            await config.update('openai.model', selectedModel.description, vscode.ConfigurationTarget.Global);\n            vscode.window.showInformationMessage(`OpenAI-Modell auf \"${selectedModel.label}\" gesetzt.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der OpenAI-Modellauswahl: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Konfiguration der Trigger-Regeln.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers \n */\nasync function handleConfigureTriggersCommand(context, providers) {\n    const configOptions = [\n        // { label: 'Grafischer Trigger-Konfigurator öffnen', id: 'graphical', description: 'Visuelle Einstellung der Trigger' }, // Zukünftig?\n        { label: 'Trigger-Einstellungen bearbeiten', id: 'direct', description: 'Einzelne Trigger-Regeln anpassen' }\n    ];\n    \n    const selectedOption = await vscode.window.showQuickPick(configOptions, {\n        placeHolder: 'Wie möchten Sie die Trigger konfigurieren?',\n            title: 'Comitto - Trigger konfigurieren'\n        });\n        \n    if (!selectedOption) return;\n    \n    // if (selectedOption.id === 'graphical') {\n    //     showTriggerConfigWebview(context, providers); // Für zukünftige grafische UI\n    // } else\n     if (selectedOption.id === 'direct') {\n        // Menü zur Auswahl der spezifischen Trigger-Einstellung\n        const config = vscode.workspace.getConfiguration('comitto');\n        const rules = config.get('triggerRules');\n        \n        const triggerOptions = [\n            { label: `Datei-Anzahl Schwellenwert: ${rules.fileCountThreshold}`, id: 'comitto.editFileCountThreshold' },\n            { label: `Änderungs-Anzahl Schwellenwert: ${rules.minChangeCount}`, id: 'comitto.editMinChangeCount' },\n            { label: `Zeit-Schwellwert (Minuten): ${rules.timeThresholdMinutes}`, id: 'comitto.editTimeThreshold' },\n            { label: `Trigger bei Speichern: ${rules.onSave ? 'Ja' : 'Nein'}`, id: 'comitto.toggleOnSave' },\n            { label: `Intervall-Trigger: ${rules.onInterval ? `Ja (alle ${rules.intervalMinutes} Min.)` : 'Nein'}`, id: 'comitto.toggleOnInterval' },\n            { label: `Intervall-Dauer bearbeiten`, id: 'comitto.editIntervalMinutes', disabled: !rules.onInterval }, // Nur wenn Intervall aktiv\n            { label: `Trigger bei Branch-Wechsel: ${rules.onBranchSwitch ? 'Ja' : 'Nein'}`, id: 'comitto.toggleOnBranchSwitch' },\n            { label: 'Dateimuster bearbeiten', id: 'comitto.editFilePatterns' },\n            { label: 'Spezifische Dateien bearbeiten', id: 'comitto.editSpecificFiles' }\n        ];\n        \n        const selectedTrigger = await vscode.window.showQuickPick(\n             triggerOptions.filter(opt => !opt.disabled), // Deaktivierte Optionen ausblenden\n             {\n                placeHolder: 'Welche Trigger-Einstellung möchten Sie bearbeiten?',\n                title: 'Comitto - Trigger-Regel bearbeiten'\n             }\n        );\n        \n        if (selectedTrigger && selectedTrigger.id) {\n            vscode.commands.executeCommand(selectedTrigger.id);\n        }\n    }\n}\n\n/**\n * Zeigt eine einfache Benutzeroberfläche für grundlegende Funktionen.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers \n */\nfunction showSimpleUI(context, providers) {\n    try {\n        // Bestehendes Panel prüfen und wiederverwenden\n        let panel = null;\n        \n        try {\n            panel = context.globalState.get('comittoSimpleUIPanel');\n            \n            // Prüfen, ob das Panel noch gültig ist\n            if (panel) {\n                try {\n                    // Test-Zugriff, um zu prüfen, ob das Panel noch existiert\n                    const isVisible = panel.visible;\n                    // Panel fokussieren\n                    panel.reveal(vscode.ViewColumn.One);\n                    \n                    // Inhalt aktualisieren\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const autoCommitEnabled = config.get('autoCommitEnabled');\n                    const providerName = ui.getProviderDisplayName(config.get('aiProvider'));\n                    panel.webview.html = generateSimpleUIHTML(autoCommitEnabled, providerName, context);\n                } catch (error) {\n                    console.error('Gespeichertes SimpleUI-Panel nicht mehr gültig:', error);\n                    // Wenn das Panel nicht mehr gültig ist, es aus dem State entfernen\n                    context.globalState.update('comittoSimpleUIPanel', undefined);\n                    panel = null;\n                }\n            }\n        } catch (error) {\n            console.error('Fehler beim Zugriff auf gespeichertes SimpleUI-Panel:', error);\n            context.globalState.update('comittoSimpleUIPanel', undefined);\n            panel = null;\n        }\n        \n        if (!panel) {\n            // Neues Panel erstellen\n            panel = vscode.window.createWebviewPanel(\n                'comittoSimpleUI',\n                'Comitto: Einfache Benutzeroberfläche',\n                vscode.ViewColumn.One,\n                {\n                    enableScripts: true,\n                    retainContextWhenHidden: true,\n                    localResourceRoots: [\n                        vscode.Uri.joinPath(context.extensionUri, 'resources')\n                    ]\n                }\n            );\n            \n            // Panel im globalen Zustand speichern\n            context.globalState.update('comittoSimpleUIPanel', panel);\n            \n            // Konfiguration auslesen\n            const config = vscode.workspace.getConfiguration('comitto');\n            const autoCommitEnabled = config.get('autoCommitEnabled');\n            const providerName = ui.getProviderDisplayName(config.get('aiProvider'));\n            \n            // HTML für das Webview generieren und setzen\n            panel.webview.html = generateSimpleUIHTML(autoCommitEnabled, providerName, context);\n            \n            // Nachrichten vom Webview verarbeiten\n            panel.webview.onDidReceiveMessage(\n                async (message) => {\n                    try {\n                        switch (message.command) {\n                            case 'toggleAutoCommit':\n                                const newEnabled = !autoCommitEnabled;\n                                await config.update('autoCommitEnabled', newEnabled, vscode.ConfigurationTarget.Global);\n                                // UI-Aktualisierung (wird automatisch durch Konfigurationsänderung ausgelöst)\n                                break;\n                            case 'performManualCommit':\n                                vscode.commands.executeCommand('comitto.performManualCommit');\n                                break;\n                            case 'selectProvider':\n                                vscode.commands.executeCommand('comitto.configureAIProvider');\n                                break;\n                            case 'configureTriggers':\n                                vscode.commands.executeCommand('comitto.configureTriggers');\n                                break;\n                            case 'openDashboard':\n                                vscode.commands.executeCommand('comitto.showDashboard');\n                                break;\n                            case 'openSettings':\n                                vscode.commands.executeCommand('comitto.openSettings');\n                                break;\n                        }\n                    } catch (error) {\n                        vscode.window.showErrorMessage(`Fehler bei der Verarbeitung der SimpleUI-Aktion: ${error.message}`);\n                    }\n                },\n                undefined,\n                context.subscriptions\n            );\n            \n            // Bereinigen, wenn das Panel geschlossen wird\n            panel.onDidDispose(() => {\n                context.globalState.update('comittoSimpleUIPanel', undefined);\n            }, null, context.subscriptions);\n        }\n    } catch (error) {\n        console.error('Fehler beim Öffnen der einfachen Benutzeroberfläche:', error);\n        vscode.window.showErrorMessage(`Fehler beim Öffnen der einfachen Benutzeroberfläche: ${error.message}`);\n    }\n}\n\n/**\n * Generiert das HTML für die einfache Benutzeroberfläche.\n * @param {boolean} autoCommitEnabled \n * @param {string} providerName \n * @param {vscode.ExtensionContext} context\n * @returns {string} \n */\nfunction generateSimpleUIHTML(autoCommitEnabled, providerName, context) {\n    // Pfade zu Ressourcen erstellen\n    const simpleUIJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'simpleUI.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'icon.svg');\n\n    // Webview URIs erstellen\n    let panel = context.globalState.get('comittoSimpleUIPanel');\n    if (!panel) return \"<div>Simple UI konnte nicht geladen werden.</div>\";\n\n    const simpleUIJsWebviewUri = panel.webview.asWebviewUri(simpleUIJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n\n    // Version aus package.json lesen\n    let version = '0.9.5'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n\n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto - Einfache Bedienung</title>\n        \n        <style nonce=\"${nonce}\">\n            /* Spezifische Inline-Styles für diese Ansicht */\n            .animated-bg {\n                background: linear-gradient(-45deg, #6366f1, #4f46e5, #3b82f6, #0ea5e9);\n                background-size: 400% 400%;\n                animation: animated-bg 15s ease infinite;\n            }\n            \n            .status-box {\n                border-radius: 16px;\n                padding: 1rem;\n                margin: 1.5rem 0;\n                text-align: center;\n                font-size: 1.25rem;\n                font-weight: 500;\n                transition: all 0.3s ease;\n            }\n            \n            .provider-card {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                padding: 1rem;\n                border-radius: 12px;\n                background: rgba(255, 255, 255, 0.1);\n                margin-bottom: 1rem;\n            }\n            \n            .provider-icon {\n                font-size: 2rem;\n                width: 48px;\n                height: 48px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: 12px;\n                background: rgba(99, 102, 241, 0.2);\n            }\n        </style>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container animated-bg\">\n            <!-- Header mit Logo -->\n            <div class=\"header flex items-center justify-center py-6\">\n                <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-16 w-16 floating-element\"/>\n                <h1 class=\"text-3xl font-bold ml-4 typing\">Comitto</h1>\n            </div>\n            \n            <!-- Status-Anzeige -->\n            <div class=\"status-box glass-container ${autoCommitEnabled ? 'bg-green-900 bg-opacity-20' : 'bg-red-900 bg-opacity-20'} border ${autoCommitEnabled ? 'border-green-500' : 'border-red-500'} shadow-lg\">\n                <div class=\"flex items-center justify-center\">\n                    <span class=\"status-indicator ${autoCommitEnabled ? 'status-active pulse' : 'status-inactive'} mr-2\"></span>\n                    <span>Automatische Commits: <strong>${autoCommitEnabled ? 'AKTIVIERT' : 'DEAKTIVIERT'}</strong></span>\n                </div>\n            </div>\n            \n            <!-- Aktions-Buttons -->\n            <div class=\"action-buttons flex flex-col gap-4 mt-8\">\n                <button id=\"toggleBtn\" class=\"btn ${autoCommitEnabled ? 'btn-danger' : 'btn-secondary'} hover-lift w-full text-lg py-4\" data-enabled=\"${autoCommitEnabled}\">\n                    <span class=\"icon text-2xl\">${autoCommitEnabled ? '🚫' : '✅'}</span>\n                    ${autoCommitEnabled ? 'Auto-Commit deaktivieren' : 'Auto-Commit aktivieren'}\n                </button>\n                \n                <button id=\"manualCommitBtn\" class=\"btn hover-lift w-full text-lg py-4\">\n                    <span class=\"icon text-2xl\">💾</span>\n                    Manuellen Commit ausführen\n                </button>\n            </div>\n            \n            <!-- KI-Provider Info -->\n            <div class=\"info-box glass-container mt-8 p-4 rounded-xl shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                    <span class=\"icon mr-2\">🧠</span> KI-Provider\n                </h2>\n                <div class=\"provider-card\">\n                    <div class=\"provider-icon\">🤖</div>\n                    <div class=\"flex-1\">\n                        <p>Aktiver Provider:</p>\n                        <p class=\"text-lg font-semibold\">${providerName}</p>\n                    </div>\n                    <button id=\"configureAIBtn\" class=\"btn btn-icon\">\n                        <span class=\"icon\">⚙️</span>\n                    </button>\n                </div>\n            </div>\n            \n            <!-- Weitere Aktionen -->\n            <div class=\"info-box glass-container mt-6 p-4 rounded-xl shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                    <span class=\"icon mr-2\">⚡</span> Weitere Aktionen\n                </h2>\n                <div class=\"grid grid-cols-1 gap-3\">\n                    <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">⚙️</span> Trigger konfigurieren\n                    </button>\n                    <button id=\"openDashboardBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">📊</span> Dashboard öffnen\n                    </button>\n                    <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">🔧</span> Alle Einstellungen\n                    </button>\n                </div>\n            </div>\n            \n            <!-- Footer -->\n            <div class=\"footer mt-8 mb-4 text-center opacity-70\">\n                <p>Comitto v${version}</p>\n            </div>\n        </div>\n        \n        <!-- Simple UI JavaScript -->\n        <script nonce=\"${nonce}\" src=\"${simpleUIJsWebviewUri}\"></script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert das HTML für das Dashboard (Webview).\n * @param {vscode.ExtensionContext} context\n * @returns {string} HTML-Inhalt\n */\nfunction generateDashboardHTML(context) {\n    // Bestehendes Panel abrufen\n    let panel = context.globalState.get('comittoDashboardPanel');\n    if (!panel || !panel.webview) {\n        console.error('Dashboard-Panel nicht gefunden oder webview nicht verfügbar');\n        // Das Panel sollte bereits erstellt worden sein, bevor diese Funktion aufgerufen wird\n        // Statt undefined zurückzugeben, geben wir eine Fehlermeldung zurück\n        return `<html><body><h1>Fehler beim Initialisieren des Dashboards</h1>\n                <p>Bitte schließen Sie das Dashboard und versuchen Sie es erneut zu öffnen.</p></body></html>`;\n    }\n    \n    const config = vscode.workspace.getConfiguration('comitto');\n    const enabled = config.get('autoCommitEnabled');\n    const provider = config.get('aiProvider');\n    const rules = config.get('triggerRules');\n    const gitSettings = config.get('gitSettings');\n    const providerName = ui.getProviderDisplayName(provider);\n    const providerIcon = ui.getProviderIcon(provider); // Holen des Icons\n    \n    let providerModel = '';\n    switch (provider) {\n        case 'ollama': providerModel = config.get('ollama.model'); break;\n        case 'openai': providerModel = config.get('openai.model'); break;\n        case 'anthropic': providerModel = config.get('anthropic.model'); break;\n    }\n\n    // Pfade zu Ressourcen\n    const dashboardJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'dashboard.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'icon.svg');\n    \n    // Webview URIs erstellen\n    const dashboardJsWebviewUri = panel.webview.asWebviewUri(dashboardJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n    \n    // Version aus package.json lesen\n    let version = '0.9.6'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n    \n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto Dashboard</title>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container glass-container animated-bg\">\n            <div class=\"dashboard-header\">\n                <div class=\"flex items-center gap-4\">\n                    <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-12 w-12 floating-element\"/>\n                    <h1 class=\"dashboard-title typing\">Comitto Dashboard</h1>\n                </div>\n                <button id=\"refreshBtn\" class=\"btn btn-icon\" title=\"Aktualisieren\">\n                    <span class=\"icon\">🔄</span>\n                </button>\n            </div>\n            \n            <div class=\"flex justify-between items-center mb-6 fade-in\" style=\"animation-delay: 0.2s\">\n                <div class=\"status ${enabled ? 'status-enabled' : 'status-disabled'} flex items-center\">\n                    <span class=\"status-indicator ${enabled ? 'status-active' : 'status-inactive'}\"></span>\n                    <span><strong>Status:</strong> Comitto ist derzeit ${enabled ? 'aktiviert' : 'deaktiviert'}</span>\n                </div>\n                \n                <div class=\"flex gap-2\">\n                    <button id=\"commitBtn\" class=\"btn hover-lift\" title=\"Jetzt einen Commit mit KI generieren\">\n                        <span class=\"icon\">💾</span> Manueller Commit\n                    </button>\n                    <button id=\"toggleBtn\" class=\"btn ${enabled ? 'btn-danger' : 'btn-secondary'} hover-lift\" data-enabled=\"${enabled}\" title=\"Automatische Commits an-/ausschalten\">\n                        <span class=\"icon\">${enabled ? '🚫' : '✅'}</span> ${enabled ? 'Deaktivieren' : 'Aktivieren'}\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"dashboard fade-in\" style=\"animation-delay: 0.4s\">\n                <!-- KI-Konfiguration -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">${providerIcon.id ? `$(${providerIcon.id})` : '🧠'}</span> KI-Konfiguration\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${providerName}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <p class=\"mb-2\"><strong>Modell:</strong> ${providerModel || 'Nicht gesetzt'}</p>\n                        <div class=\"flex justify-center mt-4\">\n                            <button id=\"configureAIBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> KI konfigurieren\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Trigger-Regeln -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">⚙️</span> Trigger-Regeln\n                        </h2>\n                        <span class=\"badge ${rules.onSave || rules.onInterval ? 'badge-success' : 'badge-danger'}\">\n                            ${rules.onSave || rules.onInterval ? 'Aktiv' : 'Inaktiv'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Datei-Anzahl:</strong></p>\n                                <span class=\"badge\">${rules.fileCountThreshold}</span>\n                            </div>\n                            <div>\n                                <p><strong>Änderungs-Anzahl:</strong></p>\n                                <span class=\"badge\">${rules.minChangeCount}</span>\n                            </div>\n                            <div>\n                                <p><strong>Zeit-Schwellwert:</strong></p>\n                                <span class=\"badge\">${rules.timeThresholdMinutes} Min.</span>\n                            </div>\n                            <div>\n                                <p><strong>Aktive Trigger:</strong></p>\n                                <div class=\"flex flex-wrap gap-1\">\n                                    ${rules.onSave ? '<span class=\"badge badge-success\">Speichern</span>' : ''}\n                                    ${rules.onInterval ? `<span class=\"badge badge-success\">Intervall (${rules.intervalMinutes} Min.)</span>` : ''}\n                                    ${rules.onBranchSwitch ? '<span class=\"badge badge-success\">Branch-Wechsel</span>' : ''}\n                                    ${!rules.onSave && !rules.onInterval && !rules.onBranchSwitch ? '<span class=\"badge badge-danger\">Keine</span>' : ''}\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> Trigger konfigurieren\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Git-Einstellungen -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📝</span> Git-Einstellungen\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Auto-Push:</strong></p>\n                                <span class=\"badge ${gitSettings.autoPush ? 'badge-success' : 'badge-danger'}\">\n                                    ${gitSettings.autoPush ? 'Ja' : 'Nein'}\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Branch:</strong></p>\n                                <span class=\"badge tooltip\">\n                                    ${gitSettings.branch || 'Aktueller Branch'}\n                                    <span class=\"tooltip-text\">Aktiv für ${gitSettings.branch || 'aktuellen Branch'}</span>\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Commit-Stil:</strong></p>\n                                <span class=\"badge\">${gitSettings.commitMessageStyle}</span>\n                            </div>\n                            <div>\n                                <p><strong>Staging-Modus:</strong></p>\n                                <span class=\"badge\">${ui.getStageModeLabel(gitSettings.stageMode)}</span>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">🔧</span> Alle Einstellungen\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Aktivitätsübersicht -->\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📊</span> Aktivitätsübersicht\n                        </h2>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"h-40\">\n                            <canvas id=\"commitChart\"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"flex justify-center mt-4 fade-in\" style=\"animation-delay: 0.8s\">\n                <div class=\"badge\">Comitto v${version}</div>\n            </div>\n        </div>\n        \n        <!-- Chart.js (optional) -->\n        <script nonce=\"${nonce}\" src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\n        \n        <!-- Dashboard JavaScript -->\n        <script nonce=\"${nonce}\" src=\"${dashboardJsWebviewUri}\"></script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert eine Nonce für die Content Security Policy.\n * @returns {string} Eine zufällige Nonce.\n */\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\n/**\n * Funktion zum Verwalten der Commit-Nachrichtensprache\n * Verbesserte Implementierung mit Anpassung des Prompt-Templates\n * @returns {Promise<void>}\n */\nasync function handleCommitMessageLanguageCommand() {\n    try {\n        // Konfiguration abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings') || {};\n        \n        // Aktuell eingestellte Sprache abrufen\n        const currentLanguage = gitSettings.commitMessageLanguage || 'en';\n        \n        // Sprachoptionen definieren\n        const languageOptions = [\n            { label: 'Englisch', value: 'en', description: 'Commit-Nachrichten in englischer Sprache' },\n            { label: 'Deutsch', value: 'de', description: 'Commit-Nachrichten in deutscher Sprache' }\n        ];\n        \n        // Sprachauswahl anzeigen\n        const selectedLanguage = await vscode.window.showQuickPick(languageOptions, {\n            placeHolder: 'Wählen Sie die Sprache für Commit-Nachrichten',\n            title: 'Commit-Nachrichtensprache auswählen'\n        });\n        \n        if (selectedLanguage) {\n            // Git-Einstellungen aktualisieren\n            gitSettings.commitMessageLanguage = selectedLanguage.value;\n            await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n            \n            // Prompt-Template entsprechend anpassen\n            let promptTemplate = config.get('promptTemplate');\n            \n            // Je nach gewählter Sprache den Prompt-Template anpassen\n            if (selectedLanguage.value === 'de') {\n                // Wenn es bereits ein deutsches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('auf Deutsch')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generate a meaningful commit message in English/i,\n                        'Generiere eine aussagekräftige Commit-Nachricht auf Deutsch'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /using the Conventional Commits format/i,\n                        'im Format der Conventional Commits'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Keep it under 80 characters/i,\n                        'Halte sie unter 80 Zeichen'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Here is the diff of changes/i,\n                        'Hier ist das Diff der Änderungen'\n                    );\n                }\n            } else {\n                // Wenn es bereits ein englisches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('in English')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generiere eine aussagekräftige Commit-Nachricht auf Deutsch/i,\n                        'Generate a meaningful commit message in English'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /im Format der Conventional Commits/i,\n                        'using the Conventional Commits format'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Halte sie unter 80 Zeichen/i,\n                        'Keep it under 80 characters'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Hier ist das Diff der Änderungen/i,\n                        'Here is the diff of changes'\n                    );\n                }\n            }\n            \n            // Aktualisiertes Template speichern\n            await config.update('promptTemplate', promptTemplate, vscode.ConfigurationTarget.Global);\n            \n            vscode.window.showInformationMessage(\n                `Commit-Nachrichtensprache auf \"${selectedLanguage.label}\" gesetzt.`\n            );\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Spracheinstellung: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Staging-Modus.\n */\nasync function handleSelectStageModeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentMode = gitSettings.stageMode || 'all';\n\n    const modes = [\n        { label: 'Alle Änderungen', value: 'all', detail: 'Alle geänderten Dateien automatisch stagen (`git add .`)' },\n        { label: 'Spezifische Muster', value: 'specific', detail: 'Nur Dateien stagen, die bestimmten Mustern entsprechen' },\n        { label: 'Manuell auswählen', value: 'prompt', detail: 'Vor jedem Commit nach zu stagenden Dateien fragen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        modes.map(mode => ({ ...mode, description: currentMode === mode.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Staging-Modus auswählen',\n            title: 'Wie sollen Änderungen gestaged werden?',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        gitSettings.stageMode = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Staging-Modus auf \"${selected.label}\" gesetzt.`);\n        \n        // Wenn \"Spezifische Dateien\" ausgewählt wurde und keine Muster existieren, nach Mustern fragen\n        if (selected.value === 'specific' && (!gitSettings.specificStagingPatterns || gitSettings.specificStagingPatterns.length === 0)) {\n            await handleEditStagingPatternsCommand();\n        }\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten der Staging-Muster.\n */\nasync function handleEditStagingPatternsCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentPatterns = gitSettings.specificStagingPatterns || [];\n\n    const input = await vscode.window.showInputBox({\n        placeHolder: '*.js,*.json,src/**/*',\n        value: currentPatterns.join(','),\n        prompt: 'Kommagetrennte Glob-Muster für spezifisches Staging',\n        title: 'Staging-Muster bearbeiten',\n        ignoreFocusOut: true\n    });\n\n    if (input !== undefined) {\n        const patterns = input.split(',').map(p => p.trim()).filter(p => p);\n        gitSettings.specificStagingPatterns = patterns;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        if (patterns.length > 0) {\n            vscode.window.showInformationMessage(`Spezifische Staging-Muster aktualisiert: ${patterns.join(', ')}`);\n        } else {\n             vscode.window.showInformationMessage('Spezifische Staging-Muster entfernt.');\n        }\n       // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Alle Änderungen stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageAllCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Prüfe, ob es überhaupt Änderungen gibt\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen vorhanden.');\n            return true;\n        }\n\n        const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Stage alle Änderungen...', 2000);\n        await executeGitCommand('git add .', repoPath);\n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage('Alle Änderungen wurden gestaged.');\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen aller Änderungen: ${error.message}`);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Ausgewählte Dateien stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageSelectedCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Git-Status abrufen\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Geänderte Dateien parsen und für QuickPick vorbereiten\n        const changedFiles = statusOutput\n            .split('\\n')\n            .filter(line => line.trim() !== '')\n            .map(line => {\n                const status = line.substring(0, 2);\n                const filePath = line.substring(3).trim(); // Trimmen ist wichtig\n                return { \n                    status,\n                    filePath,\n                    label: `${ui.getStatusDescription(status)}: ${filePath}`,\n                    picked: !status.includes('?') // Vorauswahl aller Dateien außer untracked\n                };\n            });\n        \n        if (changedFiles.length === 0) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Dateien zur Auswahl anbieten\n        const selectedItems = await vscode.window.showQuickPick(changedFiles, {\n            placeHolder: 'Wählen Sie die zu stagenden Dateien aus',\n            canPickMany: true,\n            ignoreFocusOut: true,\n            title: 'Dateien für Staging auswählen'\n        });\n        \n        if (!selectedItems || selectedItems.length === 0) {\n            vscode.window.showInformationMessage('Keine Dateien zum Stagen ausgewählt.');\n            return false; // Benutzerabbruch\n        }\n        \n        const statusBarMessage = vscode.window.setStatusBarMessage(`$(sync~spin) Stage ${selectedItems.length} Datei(en)...`, 5000);\n        // Ausgewählte Dateien stagen\n        // Git add akzeptiert mehrere Dateien, sicherstellen, dass Pfade korrekt sind\n        const filesToStage = selectedItems.map(item => `\"${item.filePath}\"`).join(' ');\n        await executeGitCommand(`git add -- ${filesToStage}`, repoPath); // '--' trennt Optionen von Dateipfaden\n        \n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage(`${selectedItems.length} Datei(en) wurden gestaged.`);\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen ausgewählter Dateien: ${error.message}`);\n        console.error(\"Staging Error Details:\", error);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Themes.\n */\nasync function handleSelectThemeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const currentTheme = uiSettings.theme || 'auto';\n\n    const themes = [\n        { label: 'Hell', value: 'light', detail: 'Helles Theme für Comitto UI-Elemente' },\n        { label: 'Dunkel', value: 'dark', detail: 'Dunkles Theme für Comitto UI-Elemente' },\n        { label: 'Automatisch', value: 'auto', detail: 'Theme automatisch an VS Code anpassen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        themes.map(theme => ({...theme, description: currentTheme === theme.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Theme für Comitto auswählen',\n            title: 'Comitto Theme',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        uiSettings.theme = selected.value;\n        await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Comitto Theme auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Umschaltet eine Einstellung in den notifications-Einstellungen\n * @param {string} settingKey Der Schlüssel der Einstellung\n * @param {string} settingName Anzeigename der Einstellung für Benachrichtigungen\n */\nasync function handleToggleNotificationSettingCommand(settingKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const notifications = config.get('notifications') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(notifications[settingKey]);\n        \n        // Aktualisierte notifications erstellen\n        const updatedNotifications = { ...notifications, [settingKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('notifications', updatedNotifications, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen, wenn sie nicht gerade deaktiviert wurde\n        if (settingKey !== 'onError' || newValue) {\n            vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n// #endregion Spezifische Handler\n\nmodule.exports = {\n    registerCommands,\n    handleSelectThemeCommand,\n    handleStageSelectedCommand,\n    handleStageAllCommand,\n    handleOpenAIModelSelectionCommand,\n    handleCommitMessageLanguageCommand,\n    handleConfigureTriggersCommand,\n    showSimpleUI,\n    generateSimpleUIHTML,\n    generateDashboardHTML,\n    handleSelectStageModeCommand,\n    handleEditStagingPatternsCommand,\n    handleToggleGitSettingCommand,\n    handleToggleUISettingCommand,\n    handleToggleNotificationSettingCommand,\n    handleConfigureAIProviderCommand,\n    handleEditOpenAIKeyCommand,\n    handleSelectAnthropicModelCommand,\n    handleEditAnthropicKeyCommand,\n    handleEditPromptTemplateCommand\n}; ","module.exports = require(\"tty\");","module.exports = require(\"stream\");","module.exports = require(\"assert\");","module.exports = require(\"zlib\");","module.exports = require(\"events\");","module.exports = require(\"child_process\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"crypto\");","module.exports = require(\"url\");","module.exports = require(\"http\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [121,730], () => (__webpack_require__(286)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 121 ? \"vendor\" : chunkId) + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","installedChunks","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_unsupportedIterableToArray","_arrayLikeToArray","toString","Array","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","statusBarItem","fileWatcher","vscode","require","axios","path","exec","fs","ignore","ui","commands","_require2","executeGitCommand","getStatusText","changedFiles","Set","isCommitInProgress","lastCommitTime","gitignoreObj","uiProviders","intervalTimer","_activate","_callee2","context","hasGit","_context2","console","log","ensureResourceDirs","registerUI","window","createStatusBarItem","StatusBarAlignment","Left","text","tooltip","command","subscriptions","show","checkGitRepository","executeCommand","registerCommands","setupFileWatcher","disableFileWatcher","performAutoCommit","showNotification","loadGitignore","workspace","getConfiguration","get","undefined","onDidChangeConfiguration","_ref","_callee","event","currentConfig","gitAvailable","dashboardPanel","simpleUIPanel","newEnabled","newProvider","_context","affectsConfiguration","statusProvider","refresh","settingsProvider","quickActionsProvider","globalState","visible","webview","html","generateDashboardHTML","panelError","error","update","generateSimpleUIHTML","getProviderDisplayName","_x9","setTimeout","showWelcomeNotification","_x2","_checkGitRepository","_callee3","workspaceFolders","repoPath","_context3","uri","fsPath","t0","dir","dirPath","Uri","joinPath","extensionUri","existsSync","mkdirSync","recursive","concat","currentVersion","extension","packageJSON","version","showInformationMessage","selection","showNotifications","activeTextEditor","gitSettings","useGitignore","repositoryPath","gitignorePath","join","gitignoreContent","readFileSync","add","triggerRules","filePatterns","createFileSystemWatcher","onDidChange","isFileIgnored","checkCommitTrigger","onDidCreate","onDidDelete","onInterval","minutes","intervalMinutes","clearInterval","setInterval","size","onTriggerFired","showErrorMessage","dispose","clear","filePath","includes","relativePath","relative","replace","ignores","rules","specificFiles","hasSpecificFileChanged","some","file","isArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","changed","hasMinChanges","minChangeCount","hasFileThreshold","fileCountThreshold","timeThresholdMs","timeThresholdMinutes","Date","now","getTime","_performAutoCommit","_callee4","isManualTrigger","config","gitStatus","diffOutput","fileList","commitMessage","notificationSettings","currentBranch","_notificationSettings","errorMessage","_args4","_context4","stageChanges","stageMode","trim","t1","message","warn","t2","generateCommitMessage","branch","t3","onCommit","autoPush","onPush","t4","onError","t5","t6","_x3","_stageChanges","_callee5","mode","gitStatusOutput","changedFilesList","selectedFiles","_iterator","_step","patterns","_iterator2","_step2","pattern","safePattern","_context5","split","filter","line","map","status","substring","showQuickPick","label","description","getStatusDescription","picked","canPickMany","placeHolder","_createForOfIteratorHelper","specificStagingPatterns","uiSettings","showWarningMessage","_x4","_x5","_generateCommitMessage","_callee6","aiProvider","changes","promptTemplate","language","maxDiffLength","shortenedDiff","fileChanges","_context6","commitMessageLanguage","toUpperCase","commitMessageStyle","fileChange","index","truncatedChange","generateWithOllama","generateWithOpenAI","generateWithAnthropic","_x6","_generateWithOllama","_callee7","prompt","endpoint","model","response","_error$response","_error$response2","_error$response3","_context7","post","stream","timeout","data","code","JSON","stringify","_x7","_generateWithOpenAI","_callee8","apiKey","_error$response4","_context8","messages","role","content","temperature","max_tokens","headers","choices","_x8","_generateWithAnthropic","_callee9","_error$response5","_context9","system","module","exports","activate","_x","deactivate","handleEditTriggerRuleCommand","_handleEditTriggerRuleCommand","_callee39","ruleKey","promptText","inputType","currentValue","valueToString","processedValue","_context39","_objectSpread","showInputBox","validateInput","num","parseInt","ConfigurationTarget","Global","handleToggleTriggerRuleCommand","_handleToggleTriggerRuleCommand","_callee40","settingName","newValue","updatedRules","_context40","_defineProperty","handleEditGitSettingCommand","_handleEditGitSettingCommand","_callee41","settingKey","_context41","handleToggleGitSettingCommand","_x10","_x11","_handleToggleGitSettingCommand","_callee42","_context42","handleSelectGitSettingCommand","_x12","_x13","_x14","_handleSelectGitSettingCommand","_callee43","options","selected","_context43","opt","ignoreFocusOut","handleToggleUISettingCommand","_x15","_x16","_handleToggleUISettingCommand","_callee44","_context44","handleEditOpenAIKeyCommand","_handleEditOpenAIKeyCommand","_callee45","_context45","password","handleSelectAnthropicModelCommand","_handleSelectAnthropicModelCommand","_callee46","currentModel","models","_context46","handleEditAnthropicKeyCommand","_handleEditAnthropicKeyCommand","_callee47","_context47","handleEditPromptTemplateCommand","_handleEditPromptTemplateCommand","_callee49","document","disposable","closeDisposable","_context49","openTextDocument","showTextDocument","onDidSaveTextDocument","_ref39","_callee48","doc","newContent","_context48","getText","_x24","onDidCloseTextDocument","handleShowDashboardCommand","_x17","_handleShowDashboardCommand","_callee51","panel","_context51","reveal","ViewColumn","One","createWebviewPanel","enableScripts","retainContextWhenHidden","localResourceRoots","onDidReceiveMessage","_ref40","_callee50","enabled","_context50","_x25","onDidDispose","handleConfigureAIProviderCommand","_x18","_handleConfigureAIProviderCommand","_callee52","providers","providerOptions","selectedProvider","configSuccess","_context52","id","title","configureOllamaSettings","handleOpenAIModelSelectionCommand","_configureOllamaSettings","_callee53","currentEndpoint","availableModels","statusBarMessage","tagsEndpoint","popularModels","allModels","quickPickItems","selectedModel","_context53","startsWith","URL","setStatusBarMessage","sort","_toConsumableArray","detail","_handleOpenAIModelSelectionCommand","_callee54","_context54","getOpenAIModelOptions","option","matchOnDescription","matchOnDetail","handleConfigureTriggersCommand","_x19","_x20","_handleConfigureTriggersCommand","_callee55","configOptions","selectedOption","triggerOptions","selectedTrigger","_context55","onSave","disabled","onBranchSwitch","showSimpleUI","autoCommitEnabled","providerName","_ref38","_callee38","_context38","_x21","simpleUIJsUri","styleUri","animationsUri","logoUri","simpleUIJsWebviewUri","asWebviewUri","styleWebviewUri","animationsWebviewUri","logoWebviewUri","nonce","getNonce","pkgPath","parse","cspSource","provider","providerIcon","getProviderIcon","providerModel","dashboardJsUri","dashboardJsWebviewUri","getStageModeLabel","Math","floor","possible","random","handleCommitMessageLanguageCommand","_handleCommitMessageLanguageCommand","_callee56","languageOptions","selectedLanguage","_context56","handleSelectStageModeCommand","_handleSelectStageModeCommand","_callee57","currentMode","modes","_context57","handleEditStagingPatternsCommand","_handleEditStagingPatternsCommand","_callee58","currentPatterns","input","_context58","_handleStageAllCommand","_callee59","workspaceFolder","_context59","_handleStageSelectedCommand","_callee60","statusOutput","selectedItems","filesToStage","_context60","item","handleSelectThemeCommand","_handleSelectThemeCommand","_callee61","currentTheme","themes","_context61","theme","handleToggleNotificationSettingCommand","_x22","_x23","_handleToggleNotificationSettingCommand","_callee62","notifications","updatedNotifications","_context62","registerCommand","shouldProceed","confirmBeforeCommit","modal","_callee10","_context10","_callee11","_context11","_callee12","_context12","_callee13","_context13","_callee14","_context14","_callee15","_context15","_callee16","_context16","_callee17","_context17","_callee18","_context18","_callee19","_context19","_callee20","_context20","_callee21","_context21","_callee22","_context22","_callee23","_context23","getCommands","cmds","_callee24","_context24","_callee25","_context25","_callee26","_context26","_callee27","_context27","_callee28","_context28","_callee29","_context29","_callee30","_context30","_callee31","_context31","_callee32","_context32","_callee33","_context33","_callee34","_context34","_callee35","_context35","_callee36","_context36","_callee37","_context37","handleStageSelectedCommand","handleStageAllCommand","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","x","__webpack_exports__","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","chunkId","all","reduce","promises","obj","prop","chunk","moreModules","modules","ids","runtime","installChunk"],"sourceRoot":""}