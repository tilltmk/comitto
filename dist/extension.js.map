{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://comitto/webpack/runtime/chunk loaded","webpack://comitto/webpack/runtime/startup chunk dependencies","webpack://comitto/webpack/runtime/require chunk loading","webpack://comitto/./extension.js","webpack://comitto/external node-commonjs \"os\"","webpack://comitto/external commonjs \"vscode\"","webpack://comitto/./commands.js","webpack://comitto/external node-commonjs \"tty\"","webpack://comitto/external node-commonjs \"stream\"","webpack://comitto/external node-commonjs \"assert\"","webpack://comitto/external node-commonjs \"zlib\"","webpack://comitto/external node-commonjs \"events\"","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/external node-commonjs \"https\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/external node-commonjs \"crypto\"","webpack://comitto/external node-commonjs \"url\"","webpack://comitto/external node-commonjs \"http\"","webpack://comitto/external node-commonjs \"util\"","webpack://comitto/external node-commonjs \"fs\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/runtime/ensure chunk","webpack://comitto/webpack/runtime/get javascript chunk filename","webpack://comitto/webpack/runtime/hasOwnProperty shorthand","webpack://comitto/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t__webpack_require__.e(121);\n\t__webpack_require__.e(730);\n\treturn next();\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t217: 1,\n\t606: 1\n};\n\n__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\t__webpack_require__.O();\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","const vscode = require('vscode');\r\nconst axios = require('axios');\r\nconst { exec } = require('child_process');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst ignore = require('ignore');\r\nconst ui = require('./ui');\r\nconst commands = require('./commands');\r\nconst { executeGitCommand, getStatusText } = require('./utils'); // Nur executeGitCommand und getStatusText importieren\r\n\r\n/**\r\n * @type {vscode.StatusBarItem}\r\n */\r\nlet statusBarItem;\r\n\r\n/**\r\n * @type {vscode.FileSystemWatcher}\r\n */\r\nlet fileWatcher;\r\n\r\n/**\r\n * @type {Set<string>}\r\n */\r\nlet changedFiles = new Set();\r\n\r\n/**\r\n * @type {boolean}\r\n */\r\nlet isCommitInProgress = false;\r\n\r\n/**\r\n * @type {Date|null}\r\n */\r\nlet lastCommitTime = null;\r\n\r\n/**\r\n * @type {Object}\r\n */\r\nlet gitignoreObj = null;\r\n\r\n/**\r\n * @type {Object}\r\n */\r\nlet uiProviders = null;\r\n\r\n/**\r\n * @type {NodeJS.Timeout}\r\n */\r\nlet intervalTimer = null;\r\n\r\n/**\r\n * Hauptaktivierungsfunktion der Erweiterung.\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nasync function activate(context) {\r\n    console.log('Die Erweiterung \"comitto\" wird aktiviert.');\r\n\r\n    // Sicherstellen, dass das Ressourcenverzeichnis existiert\r\n    ensureResourceDirs(context);\r\n\r\n    // UI-Komponenten registrieren\r\n    uiProviders = ui.registerUI(context);\r\n\r\n    // Statusleistenelement erstellen\r\n    statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\r\n    statusBarItem.text = \"$(git-commit) Comitto: Initialisiere...\";\r\n    statusBarItem.tooltip = \"Comitto: Klicke zum Aktivieren/Deaktivieren oder manuellen Commit\";\r\n    statusBarItem.command = \"comitto.toggleAutoCommit\"; // Standardaktion\r\n    context.subscriptions.push(statusBarItem);\r\n    statusBarItem.show();\r\n\r\n    // Git-Status prüfen und Kontext setzen\r\n    const hasGit = await checkGitRepository(context);\r\n    vscode.commands.executeCommand('setContext', 'workspaceHasGit', hasGit);\r\n\r\n    // Befehle zentral registrieren und Abhängigkeiten übergeben\r\n    commands.registerCommands(\r\n        context,\r\n        uiProviders,\r\n        statusBarItem,\r\n        setupFileWatcher,       // Funktion übergeben\r\n        disableFileWatcher,     // Funktion übergeben\r\n        performAutoCommit,      // Funktion übergeben\r\n        showNotification        // Funktion übergeben\r\n    );\r\n    \r\n    // .gitignore einlesen, wenn vorhanden und konfiguriert\r\n    loadGitignore();\r\n\r\n    // Initialen Status setzen und FileSystemWatcher/Timer ggf. starten\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    if (config.get('autoCommitEnabled') && hasGit) {\r\n        setupFileWatcher(context);\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n    } else if (!hasGit) {\r\n        statusBarItem.text = \"$(warning) Comitto: Kein Git-Repo\";\r\n        statusBarItem.tooltip = \"Kein Git-Repository im aktuellen Workspace gefunden\";\r\n        statusBarItem.command = undefined; // Keine Aktion bei Klick\r\n    } else {\r\n        statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\r\n    }\r\n\r\n    // Konfigurationsänderungen überwachen\r\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(async event => {\r\n        if (event.affectsConfiguration('comitto')) {\r\n            console.log('Comitto-Konfiguration geändert.');\r\n            const currentConfig = vscode.workspace.getConfiguration('comitto');\r\n            const gitAvailable = await checkGitRepository(context); // Erneut prüfen\r\n\r\n            if (event.affectsConfiguration('comitto.autoCommitEnabled') || event.affectsConfiguration('comitto.triggerRules')) {\r\n                if (currentConfig.get('autoCommitEnabled') && gitAvailable) {\r\n                    setupFileWatcher(context); // Re-setup mit neuer Konfig\r\n                     if (statusBarItem) statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n                } else {\r\n                    disableFileWatcher(); // Stoppt Watcher und Timer\r\n                     if (statusBarItem) {\r\n                          statusBarItem.text = gitAvailable ? \"$(git-commit) Comitto: Inaktiv\" : \"$(warning) Comitto: Kein Git-Repo\";\r\n                          statusBarItem.command = gitAvailable ? \"comitto.toggleAutoCommit\" : undefined;\r\n                     }\r\n                }\r\n            }\r\n            \r\n            if (event.affectsConfiguration('comitto.gitSettings.useGitignore')) {\r\n                loadGitignore(); // .gitignore neu laden\r\n            }\r\n            \r\n            // UI immer aktualisieren bei Comitto-Änderungen\r\n            if (uiProviders) {\r\n                uiProviders.statusProvider.refresh();\r\n                uiProviders.settingsProvider.refresh();\r\n                uiProviders.quickActionsProvider.refresh();\r\n            }\r\n\r\n            // Dashboard und SimpleUI aktualisieren, falls sichtbar\r\n            try {\r\n                // Alle offenen WebViews finden und aktualisieren\r\n                vscode.window.webviews.forEach(webview => {\r\n                    if (webview.visible) {\r\n                        if (webview.viewType === 'comittoDashboard') {\r\n                            try {\r\n                                webview.html = commands.generateDashboardHTML(context);\r\n                            } catch (error) {\r\n                                console.error('Fehler beim Aktualisieren des Dashboard-Panels:', error);\r\n                            }\r\n                        } else if (webview.viewType === 'comittoSimpleUI') {\r\n                            try {\r\n                                const newEnabled = currentConfig.get('autoCommitEnabled');\r\n                                const newProvider = currentConfig.get('aiProvider');\r\n                                webview.html = commands.generateSimpleUIHTML(newEnabled, ui.getProviderDisplayName(newProvider), context);\r\n                            } catch (error) {\r\n                                console.error('Fehler beim Aktualisieren des SimpleUI-Panels:', error);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error('Fehler bei der Panel-Aktualisierung:', error);\r\n            }\r\n        }\r\n    }));\r\n    \r\n    // Eventuell kurze Verzögerung für initiale UI-Aktualisierung\r\n    setTimeout(() => {\r\n        if (uiProviders) {\r\n            uiProviders.statusProvider.refresh();\r\n            uiProviders.settingsProvider.refresh();\r\n            uiProviders.quickActionsProvider.refresh();\r\n        }\r\n    }, 1500);\r\n\r\n    // Willkommensnachricht anzeigen (einmalig)\r\n    showWelcomeNotification(context);\r\n\r\n    console.log('Comitto-Aktivierung abgeschlossen.');\r\n}\r\n\r\n/**\r\n * Prüft, ob im Workspace ein Git-Repository vorhanden ist.\r\n * @param {vscode.ExtensionContext} context\r\n * @returns {Promise<boolean>}\r\n */\r\nasync function checkGitRepository(context) {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders || workspaceFolders.length === 0) {\r\n        return false;\r\n    }\r\n    const repoPath = workspaceFolders[0].uri.fsPath;\r\n    try {\r\n        await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\r\n        console.log('Git-Repository gefunden.');\r\n        return true;\r\n    } catch (error) {\r\n        console.log('Kein Git-Repository gefunden oder Git nicht verfügbar.');\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Stellt sicher, dass die notwendigen Ressourcenverzeichnisse existieren.\r\n * @param {vscode.ExtensionContext} context \r\n */\r\nfunction ensureResourceDirs(context) {\r\n    const dirsToEnsure = ['resources', 'resources/ui'];\r\n    dirsToEnsure.forEach(dir => {\r\n        const dirPath = vscode.Uri.joinPath(context.extensionUri, dir).fsPath;\r\n        if (!fs.existsSync(dirPath)) {\r\n            try {\r\n                fs.mkdirSync(dirPath, { recursive: true });\r\n                console.log(`Verzeichnis erstellt: ${dirPath}`);\r\n            } catch (error) {\r\n                console.error(`Fehler beim Erstellen des Verzeichnisses ${dirPath}:`, error);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Zeigt eine Willkommensnachricht beim ersten Start nach einer Installation/Update.\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nfunction showWelcomeNotification(context) {\r\n    const currentVersion = context.extension.packageJSON.version;\r\n    const previousVersion = context.globalState.get('comitto.version');\r\n\r\n    if (previousVersion !== currentVersion) {\r\n        // Nach erstem Start oder Update anzeigen\r\n        vscode.window.showInformationMessage(\r\n            `Comitto v${currentVersion} wurde aktiviert! Konfigurieren Sie es über die Seitenleiste.`,\r\n            'Seitenleiste öffnen', 'Changelog anzeigen'\r\n        ).then(selection => {\r\n            if (selection === 'Seitenleiste öffnen') {\r\n                vscode.commands.executeCommand('workbench.view.extension.comitto-sidebar');\r\n            } else if (selection === 'Changelog anzeigen') {\r\n                // Prüfen, ob die Nachricht bereits angezeigt wurde\r\n                const hasShownWelcome = context.globalState.get('comitto.hasShownWelcome', false);\r\n                if (!hasShownWelcome) {\r\n                    vscode.window.showInformationMessage(\r\n                        'Comitto wurde aktiviert! Öffnen Sie die Comitto-Seitenleiste über das Icon in der Activity Bar.',\r\n                        'Öffnen', 'Nicht mehr anzeigen'\r\n                    ).then(selection => {\r\n                        if (selection === 'Öffnen') {\r\n                            vscode.commands.executeCommand('comitto-sidebar.focus');\r\n                        } else if (selection === 'Nicht mehr anzeigen') {\r\n                            context.globalState.update('comitto.hasShownWelcome', true);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        // Version speichern\r\n        context.globalState.update('comitto.version', currentVersion);\r\n    }\r\n\r\n    // Status der UI anzeigen\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const uiSettings = config.get('uiSettings');\r\n    \r\n    if (uiSettings.showNotifications) {\r\n        setTimeout(() => {\r\n            if (vscode.window.activeTextEditor) {\r\n                vscode.window.showInformationMessage(\r\n                    'Comitto ist bereit! Verwenden Sie die Seitenleiste oder das $(git-commit) Symbol in der Statusleiste.',\r\n                    'Einstellungen öffnen', 'Dashboard anzeigen'\r\n                ).then(selection => {\r\n                    if (selection === 'Einstellungen öffnen') {\r\n                        vscode.commands.executeCommand('comitto.openSettings');\r\n                    } else if (selection === 'Dashboard anzeigen') {\r\n                        vscode.commands.executeCommand('comitto.showDashboard');\r\n                    }\r\n                });\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n/**\r\n * .gitignore-Datei laden und Parser erstellen\r\n */\r\nfunction loadGitignore() {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) return;\r\n\r\n    const gitSettings = vscode.workspace.getConfiguration('comitto').get('gitSettings');\r\n    if (!gitSettings.useGitignore) {\r\n        gitignoreObj = null;\r\n        return;\r\n    }\r\n\r\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\r\n    const gitignorePath = path.join(repoPath, '.gitignore');\r\n    \r\n    try {\r\n        if (fs.existsSync(gitignorePath)) {\r\n            const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');\r\n            gitignoreObj = ignore().add(gitignoreContent);\r\n        } else {\r\n            gitignoreObj = null;\r\n        }\r\n    } catch (error) {\r\n        console.error('Fehler beim Laden der .gitignore-Datei:', error);\r\n        gitignoreObj = null;\r\n    }\r\n}\r\n\r\n/**\r\n * FileSystemWatcher konfigurieren\r\n * @param {vscode.ExtensionContext} context\r\n */\r\nfunction setupFileWatcher(context) {\r\n    // Vorhandenen Watcher deaktivieren\r\n    disableFileWatcher();\r\n\r\n    // Neuen Watcher erstellen\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        vscode.window.showErrorMessage('Comitto: Kein Workspace gefunden.');\r\n        return;\r\n    }\r\n\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const triggerRules = config.get('triggerRules');\r\n    const filePatterns = triggerRules.filePatterns || ['**/*'];\r\n\r\n    fileWatcher = vscode.workspace.createFileSystemWatcher(filePatterns.length === 1 ? filePatterns[0] : '{' + filePatterns.join(',') + '}');\r\n    \r\n    // Auf Dateiereignisse reagieren\r\n    fileWatcher.onDidChange(uri => {\r\n        if (!isFileIgnored(uri.fsPath)) {\r\n            changedFiles.add(uri.fsPath);\r\n            checkCommitTrigger();\r\n        }\r\n    });\r\n    \r\n    fileWatcher.onDidCreate(uri => {\r\n        if (!isFileIgnored(uri.fsPath)) {\r\n            changedFiles.add(uri.fsPath);\r\n            checkCommitTrigger();\r\n        }\r\n    });\r\n    \r\n    fileWatcher.onDidDelete(uri => {\r\n        if (!isFileIgnored(uri.fsPath)) {\r\n            changedFiles.add(uri.fsPath);\r\n            checkCommitTrigger();\r\n        }\r\n    });\r\n\r\n    context.subscriptions.push(fileWatcher);\r\n\r\n    // Interval-Timer einrichten, falls aktiviert\r\n    if (triggerRules.onInterval) {\r\n        setupIntervalTrigger(triggerRules.intervalMinutes);\r\n    }\r\n}\r\n\r\n/**\r\n * Richtet einen Interval-Trigger für automatische Commits ein\r\n * @param {number} minutes Intervall in Minuten\r\n */\r\nfunction setupIntervalTrigger(minutes) {\r\n    // Bestehenden Timer löschen\r\n    if (intervalTimer) {\r\n        clearInterval(intervalTimer);\r\n        intervalTimer = null;\r\n    }\r\n    \r\n    // Neuen Timer einrichten\r\n    if (minutes > 0) {\r\n        const intervalMs = minutes * 60 * 1000;\r\n        intervalTimer = setInterval(() => {\r\n            if (vscode.workspace.getConfiguration('comitto').get('autoCommitEnabled') && changedFiles.size > 0) {\r\n                const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n                if (notificationSettings.onTriggerFired) {\r\n                    showNotification('Intervall-Trigger aktiviert. Prüfe auf ausstehende Commits...', 'info');\r\n                }\r\n                checkCommitTrigger();\r\n            }\r\n        }, intervalMs);\r\n    }\r\n}\r\n\r\n/**\r\n * FileSystemWatcher deaktivieren\r\n */\r\nfunction disableFileWatcher() {\r\n    if (fileWatcher) {\r\n        fileWatcher.dispose();\r\n        fileWatcher = null;\r\n    }\r\n    \r\n    // Interval-Timer deaktivieren\r\n    if (intervalTimer) {\r\n        clearInterval(intervalTimer);\r\n        intervalTimer = null;\r\n    }\r\n    \r\n    changedFiles.clear();\r\n}\r\n\r\n/**\r\n * Überprüft, ob eine Datei ignoriert werden soll\r\n * @param {string} filePath Dateipfad\r\n * @returns {boolean}\r\n */\r\nfunction isFileIgnored(filePath) {\r\n    // Standardmäßig node_modules und .git ausschließen\r\n    if (filePath.includes('node_modules') || filePath.includes('.git')) {\r\n        return true;\r\n    }\r\n\r\n    // .gitignore-Regeln prüfen, wenn verfügbar\r\n    if (gitignoreObj) {\r\n        const workspaceFolders = vscode.workspace.workspaceFolders;\r\n        if (workspaceFolders) {\r\n            const relativePath = path.relative(workspaceFolders[0].uri.fsPath, filePath)\r\n                .replace(/\\\\/g, '/');  // Pfadtrennzeichen normalisieren\r\n            \r\n            return gitignoreObj.ignores(relativePath);\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Prüft, ob die Bedingungen für ein Auto-Commit erfüllt sind\r\n */\r\nfunction checkCommitTrigger() {\r\n    // Wenn bereits ein Commit-Vorgang läuft, abbrechen\r\n    if (isCommitInProgress) {\r\n        return;\r\n    }\r\n\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const rules = config.get('triggerRules');\r\n\r\n    // Prüfen, ob bestimmte Dateien geändert wurden\r\n    const specificFiles = rules.specificFiles || [];\r\n    const hasSpecificFileChanged = specificFiles.length > 0 && \r\n        specificFiles.some(file => [...changedFiles].some(changed => changed.includes(file)));\r\n\r\n    // Prüfen, ob die Mindestanzahl an Änderungen erreicht wurde\r\n    const hasMinChanges = changedFiles.size >= (rules.minChangeCount || 10);\r\n\r\n    // Prüfen, ob die Anzahl der geänderten Dateien den Schwellwert überschreitet\r\n    const hasFileThreshold = changedFiles.size >= (rules.fileCountThreshold || 3);\r\n\r\n    // Prüfen, ob genug Zeit seit dem letzten Commit vergangen ist\r\n    const timeThresholdMinutes = rules.timeThresholdMinutes || 30;\r\n    const timeThresholdMs = timeThresholdMinutes * 60 * 1000;\r\n    const hasTimeThresholdPassed = !lastCommitTime || \r\n        (Date.now() - lastCommitTime.getTime() >= timeThresholdMs);\r\n\r\n    // Commit auslösen, wenn die Bedingungen erfüllt sind\r\n    if (hasTimeThresholdPassed && (hasSpecificFileChanged || hasMinChanges || hasFileThreshold)) {\r\n        performAutoCommit();\r\n    }\r\n}\r\n\r\n/**\r\n * Führt den automatischen Commit-Prozess durch\r\n * @param {boolean} isManualTrigger Gibt an, ob der Commit manuell ausgelöst wurde\r\n */\r\nasync function performAutoCommit(isManualTrigger = false) {\r\n    try {\r\n        isCommitInProgress = true;\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Commit wird vorbereitet...\";\r\n\r\n        // Git-Repository-Pfad bestimmen\r\n        const workspaceFolders = vscode.workspace.workspaceFolders;\r\n        if (!workspaceFolders) {\r\n            throw new Error('Kein Workspace gefunden.');\r\n        }\r\n\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const gitSettings = config.get('gitSettings');\r\n        const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\r\n        \r\n        try {\r\n            // Prüfen, ob Git initialisiert ist\r\n            try {\r\n                await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\r\n            } catch (error) {\r\n                throw new Error('Kein Git-Repository gefunden. Bitte initialisieren Sie zuerst ein Git-Repository.');\r\n            }\r\n            \r\n            // Dateien zum Staging hinzufügen\r\n            await stageChanges(gitSettings.stageMode);\r\n            \r\n            // git status ausführen, um Änderungen zu erhalten\r\n            const gitStatus = await executeGitCommand('git status --porcelain', repoPath);\r\n            \r\n            if (!gitStatus.trim() && !isManualTrigger) {\r\n                isCommitInProgress = false;\r\n                statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n                changedFiles.clear();\r\n                return;\r\n            } else if (!gitStatus.trim() && isManualTrigger) {\r\n                throw new Error('Keine Änderungen zum Committen gefunden.');\r\n            }\r\n\r\n            // Änderungen abrufen\r\n            let diffOutput = '';\r\n            try {\r\n                statusBarItem.text = \"$(sync~spin) Comitto: Diff wird berechnet...\";\r\n                diffOutput = await executeGitCommand('git diff --cached', repoPath);\r\n            } catch (error) {\r\n                // Bei Pufferüberlauf trotzdem weitermachen, aber mit eingeschränktem Diff\r\n                if (error.message.includes('zu groß') || \r\n                    error.message.includes('maxBuffer') || \r\n                    error.message.includes('ERR_CHILD_PROCESS_STDOUT_MAXBUFFER')) {\r\n                    \r\n                    console.warn('Diff zu groß, verwende alternative Strategie');\r\n                    diffOutput = 'Der Diff ist zu groß für die direkte Verarbeitung.\\n';\r\n                    \r\n                    // Dateiliste anstelle des vollständigen Diffs verwenden\r\n                    try {\r\n                        const fileList = await executeGitCommand('git diff --cached --name-status', repoPath);\r\n                        diffOutput += 'Geänderte Dateien:\\n' + fileList;\r\n                    } catch (innerError) {\r\n                        console.error('Auch die Dateiliste konnte nicht abgerufen werden:', innerError);\r\n                        diffOutput += 'Diff-Inhalt konnte nicht abgerufen werden. Zu viele oder zu große Änderungen.';\r\n                    }\r\n                } else {\r\n                    // Bei anderen Fehlern den Fehler weiterreichen\r\n                    throw error;\r\n                }\r\n            }\r\n            \r\n            statusBarItem.text = \"$(sync~spin) Comitto: Generiere Commit-Nachricht...\";\r\n            \r\n            // Commit-Nachricht mit ausgewähltem KI-Modell generieren\r\n            const commitMessage = await generateCommitMessage(gitStatus, diffOutput);\r\n            \r\n            if (!commitMessage || commitMessage.trim().length === 0) {\r\n                throw new Error('Keine gültige Commit-Nachricht generiert. Bitte versuchen Sie es erneut.');\r\n            }\r\n            \r\n            // Verzweigen, falls ein bestimmter Branch konfiguriert ist\r\n            if (gitSettings.branch) {\r\n                try {\r\n                    statusBarItem.text = \"$(sync~spin) Comitto: Prüfe Branch...\";\r\n                    // Prüfen, ob der Branch existiert\r\n                    const branches = await executeGitCommand('git branch', repoPath);\r\n                    if (!branches.includes(gitSettings.branch)) {\r\n                        await executeGitCommand(`git checkout -b ${gitSettings.branch}`, repoPath);\r\n                        showNotification(`Branch '${gitSettings.branch}' erstellt und ausgecheckt.`, 'info');\r\n                    } else {\r\n                        await executeGitCommand(`git checkout ${gitSettings.branch}`, repoPath);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Fehler beim Branch-Wechsel:', error);\r\n                    showNotification(`Fehler beim Branch-Wechsel: ${error.message}. Fortfahren mit aktuellem Branch.`, 'warning');\r\n                    // Fortfahren mit dem aktuellen Branch\r\n                }\r\n            }\r\n            \r\n            statusBarItem.text = \"$(sync~spin) Comitto: Führe Commit aus...\";\r\n            \r\n            // git commit ausführen\r\n            await executeGitCommand(`git commit -m \"${commitMessage.replace(/\"/g, '\\\\\"')}\"`, repoPath);\r\n            \r\n            // Benachrichtigungen anzeigen basierend auf den Einstellungen\r\n            const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n            \r\n            if (!isManualTrigger && notificationSettings.onCommit) {\r\n                showNotification(`Automatischer Commit durchgeführt: ${commitMessage}`, 'info');\r\n            } else if (isManualTrigger) {\r\n                showNotification(`Manueller Commit durchgeführt: ${commitMessage}`, 'info');\r\n            }\r\n            \r\n            // Automatischen Push ausführen, wenn konfiguriert\r\n            if (gitSettings.autoPush) {\r\n                try {\r\n                    statusBarItem.text = \"$(sync~spin) Comitto: Pushe Änderungen...\";\r\n                    const currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\r\n                    await executeGitCommand(`git push origin ${currentBranch}`, repoPath);\r\n                    \r\n                    if (notificationSettings.onPush) {\r\n                        showNotification(`Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Push fehlgeschlagen:', error);\r\n                    if (notificationSettings.onError) {\r\n                        showNotification(`Push fehlgeschlagen: ${error.message}`, 'error');\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Statusleiste aktualisieren und Änderungen zurücksetzen\r\n            lastCommitTime = new Date();\r\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n            changedFiles.clear();\r\n        } catch (error) {\r\n            console.error('Git-Befehl fehlgeschlagen:', error);\r\n            const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n            \r\n            // Benutzerfreundlichere Fehlermeldung\r\n            let errorMessage = error.message;\r\n            if (errorMessage.includes('fatal: not a git repository')) {\r\n                errorMessage = 'Dieses Verzeichnis ist kein Git-Repository. Bitte initialisieren Sie zuerst ein Git-Repository.';\r\n            } else if (errorMessage.includes('fatal: unable to access')) {\r\n                errorMessage = 'Fehler beim Zugriff auf das Remote-Repository. Bitte prüfen Sie Ihre Netzwerkverbindung und Zugangsrechte.';\r\n            } else if (errorMessage.includes('maxBuffer') || errorMessage.includes('zu groß')) {\r\n                errorMessage = 'Zu viele oder zu große Änderungen für die automatische Verarbeitung. Bitte führen Sie einen manuellen Commit durch oder reduzieren Sie die Anzahl der Änderungen.';\r\n            }\r\n            \r\n            if (notificationSettings.onError) {\r\n                showNotification(`Git-Befehl fehlgeschlagen: ${errorMessage}`, 'error');\r\n            }\r\n            \r\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n            throw error;\r\n        }\r\n    } catch (error) {\r\n        console.error('Comitto Fehler:', error);\r\n        const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\r\n        if (notificationSettings.onError) {\r\n            showNotification(`Comitto Fehler: ${error.message}`, 'error');\r\n        }\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n    } finally {\r\n        isCommitInProgress = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Führt das Staging von Dateien basierend auf dem konfigurieren Modus aus\r\n * @param {string} mode Der Staging-Modus ('all', 'specific', 'prompt')\r\n * @returns {Promise<void>}\r\n */\r\nasync function stageChanges(mode) {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        throw new Error('Kein Workspace gefunden.');\r\n    }\r\n    \r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const gitSettings = config.get('gitSettings');\r\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\r\n    \r\n    // Bei manuellem Modus Benutzer nach Dateien fragen\r\n    if (mode === 'prompt') {\r\n        // Git Status abrufen\r\n        const gitStatusOutput = await executeGitCommand('git status --porcelain', repoPath);\r\n        if (!gitStatusOutput.trim()) {\r\n            throw new Error('Keine Änderungen zum Stagen gefunden.');\r\n        }\r\n        \r\n        // Dateien parsen\r\n        const changedFilesList = gitStatusOutput.split('\\n')\r\n            .filter(line => line.trim().length > 0)\r\n            .map(line => {\r\n                const status = line.substring(0, 2).trim();\r\n                const filePath = line.substring(3).trim();\r\n                return { status, filePath };\r\n            });\r\n        \r\n        // Dateien zur Auswahl anbieten\r\n        const selectedFiles = await vscode.window.showQuickPick(\r\n            changedFilesList.map(file => ({\r\n                label: file.filePath,\r\n                description: ui.getStatusDescription(file.status),\r\n                picked: true // Standardmäßig alle auswählen\r\n            })),\r\n            {\r\n                canPickMany: true,\r\n                placeHolder: 'Dateien zum Stagen auswählen'\r\n            }\r\n        );\r\n        \r\n        if (!selectedFiles || selectedFiles.length === 0) {\r\n            throw new Error('Keine Dateien ausgewählt.');\r\n        }\r\n        \r\n        // Ausgewählte Dateien stagen\r\n        for (const file of selectedFiles) {\r\n            await executeGitCommand(`git add \"${file.label}\"`, repoPath);\r\n        }\r\n        \r\n        return;\r\n    }\r\n    \r\n    // Spezifische Dateien basierend auf Mustern stagen\r\n    if (mode === 'specific') {\r\n        const patterns = gitSettings.specificStagingPatterns || ['**/*.js', '**/*.ts', '**/*.json'];\r\n        \r\n        for (const pattern of patterns) {\r\n            try {\r\n                // Bei Windows können wir Probleme mit den Pfadtrennzeichen haben,\r\n                // daher verwenden wir ein sicheres Muster für die Ausführung\r\n                const safePattern = pattern.replace(/\\\\/g, '/');\r\n                await executeGitCommand(`git add \"${safePattern}\"`, repoPath);\r\n            } catch (error) {\r\n                console.error(`Fehler beim Stagen von Muster ${pattern}:`, error);\r\n                // Wir werfen den Fehler nicht weiter, sondern versuchen andere Muster\r\n            }\r\n        }\r\n        \r\n        return;\r\n    }\r\n    \r\n    // Standardmäßig alle Änderungen stagen\r\n    await executeGitCommand('git add .', repoPath);\r\n}\r\n\r\n/**\r\n * Zeigt eine Benachrichtigung an, wenn entsprechend konfiguriert\r\n * @param {string} message Die anzuzeigende Nachricht\r\n * @param {string} type Der Typ der Nachricht (info, warning, error)\r\n */\r\nfunction showNotification(message, type = 'info') {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const uiSettings = config.get('uiSettings');\r\n    \r\n    if (uiSettings && uiSettings.showNotifications) {\r\n        switch (type) {\r\n            case 'info':\r\n                vscode.window.showInformationMessage(message);\r\n                break;\r\n            case 'warning':\r\n                vscode.window.showWarningMessage(message);\r\n                break;\r\n            case 'error':\r\n                vscode.window.showErrorMessage(message);\r\n                break;\r\n            default:\r\n                vscode.window.showInformationMessage(message);\r\n        }\r\n    }\r\n    \r\n    // Immer in die Konsole loggen\r\n    console.log(`Comitto [${type}]: ${message}`);\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit dem konfigurierten KI-Modell\r\n * @param {string} gitStatus Die Ausgabe von git status\r\n * @param {string} diffOutput Die Ausgabe von git diff\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateCommitMessage(gitStatus, diffOutput) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const aiProvider = config.get('aiProvider');\r\n    const gitSettings = config.get('gitSettings');\r\n    \r\n    // Änderungen in ein lesbares Format bringen\r\n    const changes = gitStatus.split('\\n')\r\n        .filter(line => line.trim().length > 0)\r\n        .map(line => {\r\n            const status = line.substring(0, 2).trim();\r\n            const filePath = line.substring(3).trim();\r\n            return `${getStatusText(status)} ${filePath}`;\r\n        })\r\n        .join('\\n');\r\n    \r\n    // Prompt-Vorlage mit Änderungen füllen\r\n    let promptTemplate = config.get('promptTemplate');\r\n    promptTemplate = promptTemplate.replace('{changes}', changes);\r\n    \r\n    // Sprache für die Commit-Nachricht einfügen\r\n    const language = gitSettings.commitMessageLanguage || 'de';\r\n    if (!promptTemplate.includes(language)) {\r\n        promptTemplate += `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\r\n    }\r\n    \r\n    // Commit-Stil einfügen\r\n    const style = gitSettings.commitMessageStyle || 'conventional';\r\n    if (style === 'conventional' && !promptTemplate.includes('conventional')) {\r\n        promptTemplate += `\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).`;\r\n    }\r\n    \r\n    // Diff-Informationen für komplexere Abrechnungen hinzufügen\r\n    if (diffOutput && diffOutput.length > 0) {\r\n        // Eine aggressiv gekürzte Version des Diffs anhängen, um den Kontext zu verbessern,\r\n        // aber nicht zu viel Token zu verwenden\r\n        const maxDiffLength = 2000; // Maximale Anzahl der Zeichen des Diffs reduziert auf 2000\r\n        \r\n        // Sehr große Diffs erkennen und Warnung ausgeben\r\n        if (diffOutput.length > 100000) {\r\n            console.warn(`Extrem großer Diff (${diffOutput.length} Zeichen) wird stark gekürzt.`);\r\n        }\r\n        \r\n        // Intelligente Kürzung: Nur die ersten Änderungen jeder Datei\r\n        let shortenedDiff = '';\r\n        \r\n        try {\r\n            // Aufteilen nach Dateiänderungen (beginnen mit 'diff --git')\r\n            const fileChanges = diffOutput.split('diff --git');\r\n            \r\n            // Die ersten Änderungen für jede Datei extrahieren (maximal 5 Dateien)\r\n            const maxFiles = 5;\r\n            const filesToInclude = fileChanges.slice(0, maxFiles);\r\n            \r\n            filesToInclude.forEach((fileChange, index) => {\r\n                if (index === 0 && !fileChange.trim()) return; // Erstes Element kann leer sein\r\n                \r\n                // Jede Dateiänderung auf maximal 400 Zeichen beschränken\r\n                const maxPerFile = 400;\r\n                const truncatedChange = fileChange.length > maxPerFile \r\n                    ? fileChange.substring(0, maxPerFile) + '...' \r\n                    : fileChange;\r\n                \r\n                shortenedDiff += (index > 0 ? 'diff --git' : '') + truncatedChange + '\\n';\r\n            });\r\n            \r\n            // Kürzen, wenn insgesamt zu lang\r\n            if (shortenedDiff.length > maxDiffLength) {\r\n                shortenedDiff = shortenedDiff.substring(0, maxDiffLength);\r\n            }\r\n            \r\n            shortenedDiff += `\\n[Diff wurde gekürzt, insgesamt ${diffOutput.length} Zeichen in ${fileChanges.length} Dateien]`;\r\n        } catch (error) {\r\n            console.error('Fehler beim Kürzen des Diffs:', error);\r\n            shortenedDiff = diffOutput.substring(0, maxDiffLength) + \r\n                `...\\n[Diff wurde einfach gekürzt, insgesamt ${diffOutput.length} Zeichen]`;\r\n        }\r\n        \r\n        promptTemplate += `\\n\\nHier ist ein Ausschnitt der konkreten Änderungen:\\n\\n${shortenedDiff}`;\r\n    }\r\n    \r\n    // Verschiedene KI-Provider unterstützen\r\n    switch (aiProvider) {\r\n        case 'ollama':\r\n            return await generateWithOllama(promptTemplate);\r\n        case 'openai':\r\n            return await generateWithOpenAI(promptTemplate);\r\n        case 'anthropic':\r\n            return await generateWithAnthropic(promptTemplate);\r\n        default:\r\n            throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit Ollama\r\n * @param {string} prompt Der zu verwendende Prompt\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateWithOllama(prompt) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const endpoint = config.get('ollama.endpoint') || 'http://localhost:11434/api/generate';\r\n    const model = config.get('ollama.model') || 'llama3';\r\n    \r\n    try {\r\n        statusBarItem.text = \"$(sync~spin) Comitto: Generiere Commit-Nachricht mit Ollama...\";\r\n        \r\n        const response = await axios.post(endpoint, {\r\n            model: model,\r\n            prompt: prompt,\r\n            stream: false\r\n        }, {\r\n            timeout: 30000 // 30 Sekunden Timeout für lokale Modelle\r\n        });\r\n        \r\n        if (response.data && response.data.response) {\r\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n            \r\n            // Formatierung der Nachricht: Leerzeichen und Anführungszeichen entfernen\r\n            let commitMessage = response.data.response.trim()\r\n                .replace(/^[\"']|[\"']$/g, '')  // Entfernt Anführungszeichen am Anfang und Ende\r\n                .replace(/\\n/g, ' ');  // Ersetzt Zeilenumbrüche durch Leerzeichen\r\n            \r\n            // Prüfen, ob die Nachricht zu lang ist und ggf. kürzen\r\n            if (commitMessage.length > 100) {\r\n                commitMessage = commitMessage.substring(0, 97) + '...';\r\n            }\r\n            \r\n            return commitMessage;\r\n        } else {\r\n            throw new Error('Unerwartetes Antwortformat von Ollama');\r\n        }\r\n    } catch (error) {\r\n        console.error('Ollama API-Fehler:', error.response?.data || error.message);\r\n        \r\n        // Detaillierte Fehlermeldung\r\n        let errorMessage = 'Fehler bei der Kommunikation mit Ollama';\r\n        \r\n        if (error.code === 'ECONNREFUSED') {\r\n            errorMessage = 'Verbindung zu Ollama fehlgeschlagen. Bitte stellen Sie sicher, dass Ollama läuft und erreichbar ist.';\r\n        } else if (error.code === 'ETIMEDOUT' || error.code === 'TIMEOUT') {\r\n            errorMessage = 'Zeitüberschreitung bei der Anfrage an Ollama. Bitte prüfen Sie die Verbindung oder versuchen Sie ein kleineres Modell.';\r\n        } else if (error.response?.status === 404) {\r\n            errorMessage = `Das Ollama-Modell \"${model}\" wurde nicht gefunden. Bitte stellen Sie sicher, dass das Modell installiert ist.`;\r\n        } else if (error.response?.data) {\r\n            errorMessage = `Ollama-Fehler: ${error.response.data.error || JSON.stringify(error.response.data)}`;\r\n        } else {\r\n            errorMessage = `Ollama-Fehler: ${error.message}`;\r\n        }\r\n        \r\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\r\n        vscode.window.showErrorMessage(errorMessage);\r\n        \r\n        // Fallback: Einfache, generische Commit-Nachricht\r\n        return \"chore: Änderungen commited\";\r\n    }\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit OpenAI\r\n * @param {string} prompt Der zu verwendende Prompt\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateWithOpenAI(prompt) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const apiKey = config.get('openai.apiKey');\r\n    const model = config.get('openai.model');\r\n    \r\n    if (!apiKey) {\r\n        throw new Error('OpenAI API-Schlüssel nicht konfiguriert');\r\n    }\r\n    \r\n    try {\r\n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\r\n            model: model,\r\n            messages: [\r\n                { role: 'system', content: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.' },\r\n                { role: 'user', content: prompt }\r\n            ],\r\n            temperature: 0.3,\r\n            max_tokens: 100\r\n        }, {\r\n            headers: {\r\n                'Authorization': `Bearer ${apiKey}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if (response.data && response.data.choices && response.data.choices[0]) {\r\n            return response.data.choices[0].message.content.trim()\r\n                .replace(/^[\"']|[\"']$/g, '')\r\n                .replace(/\\n/g, ' ');\r\n        } else {\r\n            throw new Error('Unerwartetes Antwortformat von OpenAI');\r\n        }\r\n    } catch (error) {\r\n        console.error('OpenAI API-Fehler:', error.response?.data || error.message);\r\n        throw new Error(`Fehler bei der Kommunikation mit OpenAI: ${error.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Generiert eine Commit-Nachricht mit Anthropic\r\n * @param {string} prompt Der zu verwendende Prompt\r\n * @returns {Promise<string>} Generierte Commit-Nachricht\r\n */\r\nasync function generateWithAnthropic(prompt) {\r\n    const config = vscode.workspace.getConfiguration('comitto');\r\n    const apiKey = config.get('anthropic.apiKey');\r\n    const model = config.get('anthropic.model');\r\n    \r\n    if (!apiKey) {\r\n        throw new Error('Anthropic API-Schlüssel nicht konfiguriert');\r\n    }\r\n    \r\n    try {\r\n        const response = await axios.post('https://api.anthropic.com/v1/messages', {\r\n            model: model,\r\n            max_tokens: 100,\r\n            temperature: 0.3,\r\n            system: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.',\r\n            messages: [\r\n                { role: 'user', content: prompt }\r\n            ]\r\n        }, {\r\n            headers: {\r\n                'x-api-key': apiKey,\r\n                'anthropic-version': '2023-06-01',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if (response.data && response.data.content && response.data.content[0]) {\r\n            return response.data.content[0].text.trim()\r\n                .replace(/^[\"']|[\"']$/g, '')\r\n                .replace(/\\n/g, ' ');\r\n        } else {\r\n            throw new Error('Unerwartetes Antwortformat von Anthropic');\r\n        }\r\n    } catch (error) {\r\n        console.error('Anthropic API-Fehler:', error.response?.data || error.message);\r\n        throw new Error(`Fehler bei der Kommunikation mit Anthropic: ${error.message}`);\r\n    }\r\n}\r\n\r\nfunction deactivate() {\r\n    disableFileWatcher();\r\n    if (statusBarItem) {\r\n        statusBarItem.dispose();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate\r\n}; ","module.exports = require(\"os\");","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst ui = require('./ui'); // Importiere UI-Modul für Hilfsfunktionen\nconst { executeGitCommand } = require('./utils'); // Annahme: executeGitCommand ist in utils.js\n\n/**\n * Registriert die Befehle für die UI-Interaktionen\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers UI-Provider-Instanzen\n * @param {vscode.StatusBarItem} statusBarItem Das Statusleisten-Element\n * @param {Function} setupFileWatcher Funktion zum Einrichten des File Watchers\n * @param {Function} disableFileWatcher Funktion zum Deaktivieren des File Watchers\n * @param {Function} performAutoCommit Funktion zum Ausführen des Commits\n * @param {Function} showNotification Funktion zum Anzeigen von Benachrichtigungen\n */\nfunction registerCommands(context, providers, statusBarItem, setupFileWatcher, disableFileWatcher, performAutoCommit, showNotification) {\n    // #region Kernbefehle (vorher in extension.js)\n\n    // Befehl zum Öffnen der Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.openSettings', () => {\n        vscode.commands.executeCommand('workbench.action.openSettings', 'comitto');\n    }));\n\n    // Befehl zum Aktualisieren der Einstellungsansicht\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.refreshSettings', () => {\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        showNotification('Comitto-Einstellungen wurden aktualisiert.', 'info');\n    }));\n\n    // Befehl zum Aktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.enableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', true, vscode.ConfigurationTarget.Global);\n        setupFileWatcher(context); // Übergabe des Kontexts ist hier wichtig\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind aktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Deaktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.disableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', false, vscode.ConfigurationTarget.Global);\n        disableFileWatcher();\n        statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind deaktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Umschalten der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoCommit', async () => {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const isEnabled = !config.get('autoCommitEnabled');\n        // Rufe die spezifischen enable/disable Befehle auf, um die Logik nicht zu duplizieren\n        if (isEnabled) {\n            await vscode.commands.executeCommand('comitto.enableAutoCommit');\n        } else {\n            await vscode.commands.executeCommand('comitto.disableAutoCommit');\n        }\n    }));\n\n    // Befehl zum manuellen Ausführen eines KI-generierten Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.performManualCommit', async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            const uiSettings = config.get('uiSettings');\n            \n            // Optional Bestätigung anfordern\n            let shouldProceed = true;\n            if (uiSettings && uiSettings.confirmBeforeCommit) {\n                shouldProceed = await vscode.window.showInformationMessage(\n                    'Möchten Sie einen manuellen KI-Commit durchführen?',\n                    { modal: true }, // Macht das Dialogfeld modal\n                    'Ja'\n                ) === 'Ja';\n            }\n            \n            if (shouldProceed) {\n                await performAutoCommit(true); // 'true' signalisiert manuellen Trigger\n                // Die Erfolgsmeldung wird jetzt innerhalb von performAutoCommit angezeigt\n            }\n        } catch (error) {\n            showNotification(`Fehler beim manuellen Commit: ${error.message}`, 'error');\n        }\n    }));\n\n    // #endregion Kernbefehle\n\n    // #region UI & Konfigurationsbefehle\n\n    // KI-Provider auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAiProvider', async () => {\n        const providerOptions = [\n            { label: 'Ollama (lokal)', id: 'ollama' },\n            { label: 'OpenAI', id: 'openai' },\n            { label: 'Anthropic Claude', id: 'anthropic' }\n        ];\n        \n        const selected = await vscode.window.showQuickPick(providerOptions, {\n            placeHolder: 'KI-Provider auswählen',\n            title: 'Comitto - KI-Provider auswählen'\n        });\n        \n        if (selected) {\n            await vscode.workspace.getConfiguration('comitto').update('aiProvider', selected.id, vscode.ConfigurationTarget.Global);\n            if (providers) {\n                providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n            showNotification(`KI-Provider auf \"${selected.label}\" gesetzt.`, 'info');\n        }\n    }));\n\n    // Ollama-Modell bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaModel', async () => { ... }));\n\n    // Ollama-Endpoint bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaEndpoint', async () => { ... }));\n\n    // OpenAI-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectOpenAIModel', async () => {\n        await handleOpenAIModelSelectionCommand(); // Ruft die dedizierte Funktion auf\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // OpenAI-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editOpenAIKey', async () => {\n        await handleEditOpenAIKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAnthropicModel', async () => {\n        await handleSelectAnthropicModelCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editAnthropicKey', async () => {\n        await handleEditAnthropicKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // #region Trigger-Regeln Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFileCountThreshold', async () => {\n        await handleEditTriggerRuleCommand('fileCountThreshold', 'Datei-Anzahl Schwellenwert', 'z.B. 3', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editMinChangeCount', async () => {\n        await handleEditTriggerRuleCommand('minChangeCount', 'Änderungs-Anzahl Schwellenwert', 'z.B. 10', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editTimeThreshold', async () => {\n        await handleEditTriggerRuleCommand('timeThresholdMinutes', 'Zeit-Schwellwert (Minuten)', 'z.B. 30', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFilePatterns', async () => {\n        await handleEditTriggerRuleCommand('filePatterns', 'Dateimuster (kommagetrennt)', 'z.B. **/*.js, **/*.ts', 'patterns');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editSpecificFiles', async () => {\n        await handleEditTriggerRuleCommand('specificFiles', 'Spezifische Dateien (kommagetrennt)', 'z.B. package.json, README.md', 'files');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editIntervalMinutes', async () => {\n        await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall für Intervall-Trigger (Minuten)', 'z.B. 15', 'number');\n    }));\n\n    // Neue Toggle-Befehle für Trigger-Regeln\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnSave', async () => {\n        await handleToggleTriggerRuleCommand('onSave', 'Speichern-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnInterval', async () => {\n        await handleToggleTriggerRuleCommand('onInterval', 'Intervall-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnBranchSwitch', async () => {\n        await handleToggleTriggerRuleCommand('onBranchSwitch', 'Branch-Wechsel-Trigger');\n    }));\n    // #endregion\n\n    // #region Git-Einstellungen Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoPush', async () => {\n        await handleToggleGitSettingCommand('autoPush', 'Auto-Push');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editBranch', async () => {\n        await handleEditGitSettingCommand('branch', 'Branch für Commits', 'Leer lassen für aktuellen Branch');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitLanguage', async () => {\n        await handleCommitMessageLanguageCommand(); // Behält eigene Logik wegen Prompt-Anpassung\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitStyle', async () => {\n        await handleSelectGitSettingCommand('commitMessageStyle', 'Commit-Nachrichtenstil', [\n            { label: 'Conventional Commits', value: 'conventional' },\n            { label: 'Gitmoji', value: 'gitmoji' }\n        ]);\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleUseGitignore', async () => {\n        await handleToggleGitSettingCommand('useGitignore', 'Gitignore-Verwendung');\n        // Eventuell gitignore neu laden\n        const commandExists = await vscode.commands.getCommands(true).then(cmds => cmds.includes('comitto.internal.reloadGitignore'));\n        if (commandExists) {\n            vscode.commands.executeCommand('comitto.internal.reloadGitignore');\n        } else {\n            console.warn('Befehl comitto.internal.reloadGitignore nicht gefunden.');\n        }\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectStageMode', async () => {\n        await handleSelectStageModeCommand(); // Behält eigene Logik wegen Pattern-Frage\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editStagingPatterns', async () => {\n        await handleEditStagingPatternsCommand(); // Behält eigene Logik\n    }));\n    // #endregion\n\n    // #region UI-Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleSimpleMode', async () => {\n        await handleToggleUISettingCommand('simpleMode', 'Einfacher Modus');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleConfirmBeforeCommit', async () => {\n        await handleToggleUISettingCommand('confirmBeforeCommit', 'Bestätigung vor Commit');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleShowNotifications', async () => {\n        await handleToggleUISettingCommand('showNotifications', 'Benachrichtigungen anzeigen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectTheme', async () => {\n        await handleSelectThemeCommand();\n    }));\n    // #endregion\n\n    // #region Benachrichtigungseinstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnCommit', async () => {\n        await handleToggleNotificationSettingCommand('onCommit', 'Commit-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnPush', async () => {\n        await handleToggleNotificationSettingCommand('onPush', 'Push-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnError', async () => {\n        await handleToggleNotificationSettingCommand('onError', 'Fehler-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnTriggerFired', async () => {\n        await handleToggleNotificationSettingCommand('onTriggerFired', 'Trigger-Benachrichtigungen');\n    }));\n    // #endregion\n\n    // Prompt-Vorlage bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editPromptTemplate', async () => {\n        await handleEditPromptTemplateCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Dashboard anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showDashboard', async () => {\n        await handleShowDashboardCommand(context);\n    }));\n\n    // KI-Provider konfigurieren (kombiniert Auswahl und spezifische Konfig)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureAIProvider', async () => {\n        await handleConfigureAIProviderCommand(providers);\n    }));\n\n    // Trigger konfigurieren (grafisch oder direkt)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureTriggers', async () => {\n        await handleConfigureTriggersCommand(context, providers);\n    }));\n\n    // Einfache Benutzeroberfläche anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showSimpleUI', () => {\n        showSimpleUI(context, providers);\n    }));\n\n    // #endregion UI & Konfigurationsbefehle\n}\n\n// ==========================================================================\n// HILFSFUNKTIONEN FÜR BEFEHLE\n// ==========================================================================\n\n// #region Generische Handler für Einstellungen\n\n/**\n * Generischer Handler zum Bearbeiten einer Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n * @param {'number'|'patterns'|'files'} inputType Typ der Eingabe für Validierung/Parsing.\n */\nasync function handleEditTriggerRuleCommand(ruleKey, promptText, placeHolder, inputType) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = { ...config.get('triggerRules') }; // Kopie erstellen\n    const currentValue = rules[ruleKey];\n\n    let valueToString = '';\n    if (inputType === 'patterns' || inputType === 'files') {\n        valueToString = Array.isArray(currentValue) ? currentValue.join(', ') : '';\n    } else {\n        valueToString = currentValue !== undefined ? currentValue.toString() : '';\n    }\n\n        const value = await vscode.window.showInputBox({\n        value: valueToString,\n        prompt: promptText,\n        placeHolder: placeHolder,\n            validateInput: text => {\n            if (inputType === 'number') {\n                if (!text) return 'Eingabe darf nicht leer sein.';\n                const num = parseInt(text);\n                if (isNaN(num) || num < (ruleKey === 'intervalMinutes' || ruleKey === 'timeThresholdMinutes' ? 1 : 0)) {\n                    return 'Bitte geben Sie eine gültige positive Zahl ein.';\n                }\n            }\n            // Keine spezielle Validierung für patterns/files hier, erfolgt beim Speichern\n            return null;\n            }\n        });\n        \n        if (value !== undefined) {\n        let processedValue;\n        if (inputType === 'number') {\n            processedValue = parseInt(value);\n        } else if (inputType === 'patterns' || inputType === 'files') {\n            processedValue = value.split(',').map(p => p.trim()).filter(p => p.length > 0);\n            if (inputType === 'patterns' && processedValue.length === 0) {\n                processedValue = ['**/*']; // Standard, wenn leer\n            }\n        } else {\n            processedValue = value; // Fallback\n        }\n\n        rules[ruleKey] = processedValue;\n        await config.update('triggerRules', rules, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleTriggerRuleCommand(ruleKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const triggerRules = config.get('triggerRules') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(triggerRules[ruleKey]);\n        \n        // Aktualisierte triggerRules erstellen\n        const updatedRules = { ...triggerRules, [ruleKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('triggerRules', updatedRules, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        \n        // Falls es der Intervall-Trigger ist und er aktiviert wurde, nach dem Intervall fragen\n        if (ruleKey === 'onInterval' && newValue && (!triggerRules.intervalMinutes || triggerRules.intervalMinutes <= 0)) {\n            await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall (Minuten)', 'z.B. 5', 'number');\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n/**\n * Generischer Handler zum Bearbeiten einer Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n */\nasync function handleEditGitSettingCommand(settingKey, promptText, placeHolder) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') }; // Kopie erstellen\n    const currentValue = gitSettings[settingKey];\n\n        const value = await vscode.window.showInputBox({\n        value: currentValue !== undefined ? currentValue.toString() : '',\n        prompt: promptText,\n        placeHolder: placeHolder,\n        });\n        \n        if (value !== undefined) {\n        gitSettings[settingKey] = value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleGitSettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const newValue = !gitSettings[settingKey];\n    gitSettings[settingKey] = newValue;\n    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`${settingName} ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n/**\n * Generischer Handler zum Auswählen einer Git-Einstellung aus einer Liste.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} placeHolder Platzhalter für die QuickPick-Liste.\n * @param {Array<{label: string, value: any}>} options Auswahloptionen.\n */\nasync function handleSelectGitSettingCommand(settingKey, placeHolder, options) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentValue = gitSettings[settingKey];\n\n    const selected = await vscode.window.showQuickPick(\n        options.map(opt => ({ \n            ...opt,\n            description: currentValue === opt.value ? '(Aktuell)' : ''\n        })),\n        {\n            placeHolder: placeHolder,\n            ignoreFocusOut: true\n        }\n    );\n\n    if (selected) {\n        gitSettings[settingKey] = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${placeHolder} auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen UI-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `uiSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleUISettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const newValue = !uiSettings[settingKey];\n    uiSettings[settingKey] = newValue;\n    await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n    \n    // Für Benachrichtigungen immer eine Nachricht zeigen\n    if (settingKey === 'showNotifications') {\n         vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    } else if (uiSettings.showNotifications) {\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    }\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n// #endregion\n\n// #region Spezifische Handler (Beibehaltene Logik)\n\n/**\n * Behandelt das Kommando zum Bearbeiten des OpenAI API-Schlüssels.\n */\nasync function handleEditOpenAIKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('openai.apiKey');\n        const value = await vscode.window.showInputBox({\n            value: currentValue,\n        prompt: 'Geben Sie Ihren OpenAI API-Schlüssel ein',\n        placeHolder: 'sk-...',\n        password: true,\n        ignoreFocusOut: true\n        });\n        \n        if (value !== undefined) {\n        await config.update('openai.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('OpenAI API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Anthropic-Modells.\n */\nasync function handleSelectAnthropicModelCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentModel = config.get('anthropic.model');\n    const models = [\n        'claude-3-haiku-20240307',\n        'claude-3-sonnet-20240229',\n        'claude-3-opus-20240229',\n        'claude-2.1',\n        'claude-2.0',\n        'claude-instant-1.2'\n    ];\n        \n        const selected = await vscode.window.showQuickPick(\n        models.map(name => ({\n            label: name,\n            description: name === currentModel ? '(Aktuell)' : ''\n        })),\n        { \n            placeHolder: 'Claude-Modell auswählen',\n            ignoreFocusOut: true\n        }\n        );\n        \n        if (selected) {\n        await config.update('anthropic.model', selected.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Anthropic-Modell auf ${selected.label} gesetzt.`);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten des Anthropic API-Schlüssels.\n */\nasync function handleEditAnthropicKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('anthropic.apiKey');\n    const value = await vscode.window.showInputBox({\n        value: currentValue,\n        prompt: 'Geben Sie Ihren Anthropic API-Schlüssel ein',\n        placeHolder: 'sk-ant-...',\n        password: true,\n        ignoreFocusOut: true\n    });\n    \n    if (value !== undefined) {\n        await config.update('anthropic.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('Anthropic API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Bearbeitung der Prompt-Vorlage.\n */\nasync function handleEditPromptTemplateCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('promptTemplate');\n        \n        // Temporäre Datei erstellen und öffnen\n    try {\n        const document = await vscode.workspace.openTextDocument({\n            content: currentValue,\n            language: 'markdown'\n        });\n        \n        await vscode.window.showTextDocument(document);\n        \n        // Listener für Speichern hinzufügen und nach erfolgreichem Speichern wieder entfernen\n        const disposable = vscode.workspace.onDidSaveTextDocument(async (doc) => {\n            if (doc === document) {\n                const newContent = doc.getText();\n                // Nur aktualisieren, wenn sich der Inhalt geändert hat\n                if (newContent !== currentValue) {\n                    await config.update('promptTemplate', newContent, vscode.ConfigurationTarget.Global);\n                vscode.window.showInformationMessage('Prompt-Vorlage wurde gespeichert.');\n                }\n                disposable.dispose(); // Listener entfernen\n                // Optional: Temporäres Dokument schließen?\n                // await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n            }\n        });\n        \n        // Listener für Schließen des Dokuments (ohne Speichern)\n        const closeDisposable = vscode.workspace.onDidCloseTextDocument(doc => {\n            if (doc === document) {\n                disposable.dispose(); // Auch den Speicher-Listener entfernen\n                closeDisposable.dispose();\n            }\n        });\n\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Öffnen der Prompt-Vorlage: ${error.message}`);\n        console.error('Fehler bei handleEditPromptTemplateCommand:', error);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Anzeigen des Dashboards.\n * @param {vscode.ExtensionContext} context \n */\nasync function handleShowDashboardCommand(context) {\n    try {\n        // Neues Panel erstellen\n        const panel = vscode.window.createWebviewPanel(\n            'comittoDashboard',\n            'Comitto Dashboard',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(context.extensionUri, 'resources')\n                ]\n            }\n        );\n        \n        // Nachrichten vom Webview verarbeiten\n        panel.webview.onDidReceiveMessage(\n            async (message) => {\n                switch (message.command) {\n                    case 'refresh':\n                        try {\n                            panel.webview.html = generateDashboardHTML(context);\n                        } catch (error) {\n                            console.error('Fehler beim Aktualisieren des Dashboards:', error);\n                            vscode.window.showErrorMessage(`Fehler beim Aktualisieren des Dashboards: ${error.message}`);\n                        }\n                        break;\n                    case 'toggleAutoCommit':\n                        try {\n                            const config = vscode.workspace.getConfiguration('comitto');\n                            const enabled = !config.get('autoCommitEnabled');\n                            await config.update('autoCommitEnabled', enabled, vscode.ConfigurationTarget.Global);\n                            panel.webview.html = generateDashboardHTML(context);\n                        } catch (error) {\n                            console.error('Fehler beim Umschalten des Auto-Commit-Status:', error);\n                            vscode.window.showErrorMessage(`Fehler beim Umschalten des Auto-Commit-Status: ${error.message}`);\n                        }\n                        break;\n                    case 'manualCommit':\n                        vscode.commands.executeCommand('comitto.performManualCommit');\n                        break;\n                    case 'openSettings':\n                        vscode.commands.executeCommand('comitto.openSettings');\n                        break;\n                    case 'configureProvider':\n                        vscode.commands.executeCommand('comitto.configureAIProvider');\n                        break;\n                    case 'configureTriggers':\n                        vscode.commands.executeCommand('comitto.configureTriggers');\n                        break;\n                }\n            },\n            undefined,\n            context.subscriptions\n        );\n\n        // HTML für das Webview generieren und setzen\n        console.log('Setze Dashboard-HTML');\n        try {\n            panel.webview.html = generateDashboardHTML(context);\n        } catch (error) {\n            console.error('Fehler beim Generieren des Dashboard-HTML:', error);\n            vscode.window.showErrorMessage(`Fehler beim Öffnen des Dashboards: ${error.message}`);\n            \n            // Fallback-HTML setzen\n            panel.webview.html = `\n                <html>\n                <head>\n                    <style>\n                        body { font-family: Arial, sans-serif; padding: 20px; }\n                        .error { color: red; }\n                    </style>\n                </head>\n                <body>\n                    <h1>Fehler beim Laden des Dashboards</h1>\n                    <p class=\"error\">${error.message}</p>\n                    <p>Bitte schließen Sie das Dashboard und versuchen Sie es erneut zu öffnen.</p>\n                </body>\n                </html>\n            `;\n        }\n    } catch (error) {\n        console.error('Fehler beim Öffnen des Dashboards:', error);\n        vscode.window.showErrorMessage(`Fehler beim Öffnen des Comitto-Dashboards: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Konfiguration des KI-Providers.\n * @param {Object} providers \n */\nasync function handleConfigureAIProviderCommand(providers) {\n    const providerOptions = [\n        { label: 'Ollama (lokal)', id: 'ollama' },\n        { label: 'OpenAI', id: 'openai' },\n        { label: 'Anthropic Claude', id: 'anthropic' }\n    ];\n    \n    const selectedProvider = await vscode.window.showQuickPick(providerOptions, {\n                placeHolder: 'KI-Provider auswählen',\n                title: 'Comitto - KI-Provider konfigurieren'\n    });\n    \n    if (!selectedProvider) return;\n    \n    // Provider in der Konfiguration speichern\n    await vscode.workspace.getConfiguration('comitto').update('aiProvider', selectedProvider.id, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`KI-Provider auf \"${selectedProvider.label}\" gesetzt.`);\n    \n    // Provider-spezifische Einstellungen konfigurieren\n    let configSuccess = true;\n    switch (selectedProvider.id) {\n        case 'ollama':\n            configSuccess = await configureOllamaSettings();\n                    break;\n                case 'openai':\n            await handleOpenAIModelSelectionCommand();\n            await handleEditOpenAIKeyCommand(); // Fragen wir gleich nach dem Key\n            break;\n        case 'anthropic':\n            await handleSelectAnthropicModelCommand();\n            await handleEditAnthropicKeyCommand(); // Fragen wir gleich nach dem Key\n            break;\n    }\n    \n    // UI nur aktualisieren, wenn Konfiguration erfolgreich war\n    if (configSuccess && providers) {\n        providers.statusProvider.refresh();\n        providers.quickActionsProvider.refresh();\n        providers.settingsProvider.refresh();\n    }\n}\n\n/**\n * Konfiguriert die Ollama-Einstellungen (Endpunkt und Modell) mit verbesserter UX.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Abbruch/Fehler.\n */\nasync function configureOllamaSettings() {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentEndpoint = config.get('ollama.endpoint') || 'http://localhost:11434/api/generate';\n        const currentModel = config.get('ollama.model') || 'llama3';\n        \n        // Konfiguration des Endpoints\n        const endpoint = await vscode.window.showInputBox({\n            placeHolder: 'http://localhost:11434/api/generate',\n            prompt: 'Ollama API-Endpunkt',\n            value: currentEndpoint,\n            validateInput: value => {\n                if (!value) return 'Der Endpunkt darf nicht leer sein';\n                if (!value.startsWith('http://') && !value.startsWith('https://')) {\n                    return 'Der Endpunkt muss mit http:// oder https:// beginnen';\n                }\n                // Einfache URL-Validierung (optional, könnte komplexer sein)\n                try {\n                    new URL(value);\n                } catch (e) {\n                    return 'Ungültige URL';\n                }\n                return null; // Kein Fehler\n            },\n            ignoreFocusOut: true\n        });\n        \n        // Abbruch durch Benutzer\n        if (endpoint === undefined) return false;\n\n        await config.update('ollama.endpoint', endpoint, vscode.ConfigurationTarget.Global);\n        \n        // Versuche, die Verbindung zu Ollama zu testen und Modelle zu laden\n        let availableModels = [];\n        let connectionError = null;\n        try {\n            const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Teste Verbindung zu Ollama und lade Modelle...', 5000);\n            const axios = require('axios');\n            // Verwende /api/tags zum Testen der Verbindung und Abrufen der Modelle\n            const tagsEndpoint = endpoint.replace(/\\/api\\/(generate|chat)$/, '/api/tags');\n            const response = await axios.get(tagsEndpoint, { timeout: 7000 }); // 7 Sekunden Timeout\n            statusBarMessage.dispose(); // Nachricht entfernen\n            \n            if (response.data && response.data.models) {\n                availableModels = response.data.models.map(model => model.name).sort();\n                vscode.window.showInformationMessage(`Verbindung zu Ollama erfolgreich! ${availableModels.length} Modelle gefunden.`);\n            } else {\n                vscode.window.showWarningMessage('Verbindung zu Ollama erfolgreich, aber keine Modelle gefunden.');\n            }\n        } catch (error) {\n            connectionError = error;\n            console.error('Fehler beim Testen der Ollama-Verbindung:', error);\n            vscode.window.showWarningMessage(\n                `Warnung: Konnte keine Verbindung zu Ollama herstellen (${error.message}). ` +\n                'Bitte stellen Sie sicher, dass Ollama läuft und der Endpunkt korrekt ist.'\n            );\n        }\n        \n        // Konfiguration des Modells\n        const popularModels = [\n            'llama3', 'mistral', 'mixtral', 'phi', 'gemma', 'codellama', 'orca-mini'\n        ];\n        \n        // Kombiniere populäre und verfügbare Modelle ohne Duplikate\n        const allModels = [...new Set([...availableModels, ...popularModels])].sort(); // Sortieren für bessere Übersicht\n        \n        // QuickPick für Modell-Auswahl\n        const quickPickItems = allModels.map(model => ({\n            label: model,\n            description: availableModels.includes(model) ? '$(check) Lokal verfügbar' : '$(cloud-download) Evtl. Download nötig',\n            detail: model === currentModel ? '(Aktuell ausgewählt)' : ''\n        }));\n        \n        const selectedModel = await vscode.window.showQuickPick(quickPickItems, {\n            placeHolder: 'Wählen Sie ein Ollama-Modell',\n            title: 'Ollama Modell auswählen',\n            ignoreFocusOut: true\n        });\n        \n        // Abbruch durch Benutzer\n        if (!selectedModel) return false;\n\n        await config.update('ollama.model', selectedModel.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Ollama-Modell auf \"${selectedModel.label}\" gesetzt.`);\n        \n        return true; // Erfolg\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Konfiguration von Ollama: ${error.message}`);\n        console.error('Fehler bei der Konfiguration von Ollama:', error);\n        return false; // Fehler\n    }\n}\n\n/**\n * Funktion zum Verwalten der OpenAI-Modellauswahl\n * Verbesserte Implementierung mit moderner Benutzeroberfläche\n * @returns {Promise<void>}\n */\nasync function handleOpenAIModelSelectionCommand() {\n    try {\n        // OpenAI-Modelle aus UI-Modul abrufen\n        const models = ui.getOpenAIModelOptions().map(option => ({\n            label: option.label,\n            description: option.value,\n            detail: option.value === 'gpt-4o' ? 'Empfohlen' : undefined\n        }));\n        \n        // Aktuelles Modell abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentModel = config.get('openai.model');\n        \n        // Modellauswahl anzeigen\n        const selectedModel = await vscode.window.showQuickPick(models, {\n            placeHolder: 'Wählen Sie ein OpenAI-Modell',\n            title: 'OpenAI-Modell auswählen',\n            matchOnDescription: true,\n            matchOnDetail: true\n        });\n        \n        if (selectedModel) {\n            // Konfiguration aktualisieren\n            await config.update('openai.model', selectedModel.description, vscode.ConfigurationTarget.Global);\n            vscode.window.showInformationMessage(`OpenAI-Modell auf \"${selectedModel.label}\" gesetzt.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der OpenAI-Modellauswahl: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Konfiguration der Trigger-Regeln.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers \n */\nasync function handleConfigureTriggersCommand(context, providers) {\n    const configOptions = [\n        // { label: 'Grafischer Trigger-Konfigurator öffnen', id: 'graphical', description: 'Visuelle Einstellung der Trigger' }, // Zukünftig?\n        { label: 'Trigger-Einstellungen bearbeiten', id: 'direct', description: 'Einzelne Trigger-Regeln anpassen' }\n    ];\n    \n    const selectedOption = await vscode.window.showQuickPick(configOptions, {\n        placeHolder: 'Wie möchten Sie die Trigger konfigurieren?',\n            title: 'Comitto - Trigger konfigurieren'\n        });\n        \n    if (!selectedOption) return;\n    \n    // if (selectedOption.id === 'graphical') {\n    //     showTriggerConfigWebview(context, providers); // Für zukünftige grafische UI\n    // } else\n     if (selectedOption.id === 'direct') {\n        // Menü zur Auswahl der spezifischen Trigger-Einstellung\n        const config = vscode.workspace.getConfiguration('comitto');\n        const rules = config.get('triggerRules');\n        \n        const triggerOptions = [\n            { label: `Datei-Anzahl Schwellenwert: ${rules.fileCountThreshold}`, id: 'comitto.editFileCountThreshold' },\n            { label: `Änderungs-Anzahl Schwellenwert: ${rules.minChangeCount}`, id: 'comitto.editMinChangeCount' },\n            { label: `Zeit-Schwellwert (Minuten): ${rules.timeThresholdMinutes}`, id: 'comitto.editTimeThreshold' },\n            { label: `Trigger bei Speichern: ${rules.onSave ? 'Ja' : 'Nein'}`, id: 'comitto.toggleOnSave' },\n            { label: `Intervall-Trigger: ${rules.onInterval ? `Ja (alle ${rules.intervalMinutes} Min.)` : 'Nein'}`, id: 'comitto.toggleOnInterval' },\n            { label: `Intervall-Dauer bearbeiten`, id: 'comitto.editIntervalMinutes', disabled: !rules.onInterval }, // Nur wenn Intervall aktiv\n            { label: `Trigger bei Branch-Wechsel: ${rules.onBranchSwitch ? 'Ja' : 'Nein'}`, id: 'comitto.toggleOnBranchSwitch' },\n            { label: 'Dateimuster bearbeiten', id: 'comitto.editFilePatterns' },\n            { label: 'Spezifische Dateien bearbeiten', id: 'comitto.editSpecificFiles' }\n        ];\n        \n        const selectedTrigger = await vscode.window.showQuickPick(\n             triggerOptions.filter(opt => !opt.disabled), // Deaktivierte Optionen ausblenden\n             {\n                placeHolder: 'Welche Trigger-Einstellung möchten Sie bearbeiten?',\n                title: 'Comitto - Trigger-Regel bearbeiten'\n             }\n        );\n        \n        if (selectedTrigger && selectedTrigger.id) {\n            vscode.commands.executeCommand(selectedTrigger.id);\n        }\n    }\n}\n\n/**\n * Zeigt eine einfache Benutzeroberfläche für grundlegende Funktionen.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers \n */\nfunction showSimpleUI(context, providers) {\n    try {\n        // Neues Panel erstellen\n        const panel = vscode.window.createWebviewPanel(\n            'comittoSimpleUI',\n            'Comitto: Einfache Benutzeroberfläche',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(context.extensionUri, 'resources')\n                ]\n            }\n        );\n        \n        // Konfiguration auslesen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const autoCommitEnabled = config.get('autoCommitEnabled');\n        const providerName = ui.getProviderDisplayName(config.get('aiProvider'));\n        \n        // HTML für das Webview generieren und setzen\n        panel.webview.html = generateSimpleUIHTML(autoCommitEnabled, providerName, context);\n        \n        // Nachrichten vom Webview verarbeiten\n        panel.webview.onDidReceiveMessage(\n            async (message) => {\n                try {\n                    switch (message.command) {\n                        case 'toggleAutoCommit':\n                            const newEnabled = !autoCommitEnabled;\n                            await config.update('autoCommitEnabled', newEnabled, vscode.ConfigurationTarget.Global);\n                            // UI-Aktualisierung (wird automatisch durch Konfigurationsänderung ausgelöst)\n                            break;\n                        case 'performManualCommit':\n                            vscode.commands.executeCommand('comitto.performManualCommit');\n                            break;\n                        case 'selectProvider':\n                            vscode.commands.executeCommand('comitto.configureAIProvider');\n                            break;\n                        case 'configureTriggers':\n                            vscode.commands.executeCommand('comitto.configureTriggers');\n                            break;\n                        case 'openDashboard':\n                            vscode.commands.executeCommand('comitto.showDashboard');\n                            break;\n                        case 'openSettings':\n                            vscode.commands.executeCommand('comitto.openSettings');\n                            break;\n                    }\n                } catch (error) {\n                    vscode.window.showErrorMessage(`Fehler bei der Verarbeitung der SimpleUI-Aktion: ${error.message}`);\n                }\n            },\n            undefined,\n            context.subscriptions\n        );\n    } catch (error) {\n        console.error('Fehler beim Öffnen der einfachen Benutzeroberfläche:', error);\n        vscode.window.showErrorMessage(`Fehler beim Öffnen der einfachen Benutzeroberfläche: ${error.message}`);\n    }\n}\n\n/**\n * Generiert das HTML für die einfache Benutzeroberfläche.\n * @param {boolean} autoCommitEnabled \n * @param {string} providerName \n * @param {vscode.ExtensionContext} context\n * @returns {string} \n */\nfunction generateSimpleUIHTML(autoCommitEnabled, providerName, context) {\n    // Pfade zu Ressourcen erstellen\n    const simpleUIJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'simpleUI.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'icon.svg');\n\n    // Webview URIs erstellen\n    let panel = context.globalState.get('comittoSimpleUIPanel');\n    if (!panel) return \"<div>Simple UI konnte nicht geladen werden.</div>\";\n\n    const simpleUIJsWebviewUri = panel.webview.asWebviewUri(simpleUIJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n\n    // Version aus package.json lesen\n    let version = '0.9.5'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n\n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto - Einfache Bedienung</title>\n        \n        <style nonce=\"${nonce}\">\n            /* Spezifische Inline-Styles für diese Ansicht */\n            .animated-bg {\n                background: linear-gradient(-45deg, #6366f1, #4f46e5, #3b82f6, #0ea5e9);\n                background-size: 400% 400%;\n                animation: animated-bg 15s ease infinite;\n            }\n            \n            .status-box {\n                border-radius: 16px;\n                padding: 1rem;\n                margin: 1.5rem 0;\n                text-align: center;\n                font-size: 1.25rem;\n                font-weight: 500;\n                transition: all 0.3s ease;\n            }\n            \n            .provider-card {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                padding: 1rem;\n                border-radius: 12px;\n                background: rgba(255, 255, 255, 0.1);\n                margin-bottom: 1rem;\n            }\n            \n            .provider-icon {\n                font-size: 2rem;\n                width: 48px;\n                height: 48px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: 12px;\n                background: rgba(99, 102, 241, 0.2);\n            }\n        </style>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container animated-bg\">\n            <!-- Header mit Logo -->\n            <div class=\"header flex items-center justify-center py-6\">\n                <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-16 w-16 floating-element\"/>\n                <h1 class=\"text-3xl font-bold ml-4 typing\">Comitto</h1>\n            </div>\n            \n            <!-- Status-Anzeige -->\n            <div class=\"status-box glass-container ${autoCommitEnabled ? 'bg-green-900 bg-opacity-20' : 'bg-red-900 bg-opacity-20'} border ${autoCommitEnabled ? 'border-green-500' : 'border-red-500'} shadow-lg\">\n                <div class=\"flex items-center justify-center\">\n                    <span class=\"status-indicator ${autoCommitEnabled ? 'status-active pulse' : 'status-inactive'} mr-2\"></span>\n                    <span>Automatische Commits: <strong>${autoCommitEnabled ? 'AKTIVIERT' : 'DEAKTIVIERT'}</strong></span>\n                </div>\n            </div>\n            \n            <!-- Aktions-Buttons -->\n            <div class=\"action-buttons flex flex-col gap-4 mt-8\">\n                <button id=\"toggleBtn\" class=\"btn ${autoCommitEnabled ? 'btn-danger' : 'btn-secondary'} hover-lift w-full text-lg py-4\" data-enabled=\"${autoCommitEnabled}\">\n                    <span class=\"icon text-2xl\">${autoCommitEnabled ? '🚫' : '✅'}</span>\n                    ${autoCommitEnabled ? 'Auto-Commit deaktivieren' : 'Auto-Commit aktivieren'}\n                </button>\n                \n                <button id=\"manualCommitBtn\" class=\"btn hover-lift w-full text-lg py-4\">\n                    <span class=\"icon text-2xl\">💾</span>\n                    Manuellen Commit ausführen\n                </button>\n            </div>\n            \n            <!-- KI-Provider Info -->\n            <div class=\"info-box glass-container mt-8 p-4 rounded-xl shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                    <span class=\"icon mr-2\">🧠</span> KI-Provider\n                </h2>\n                <div class=\"provider-card\">\n                    <div class=\"provider-icon\">🤖</div>\n                    <div class=\"flex-1\">\n                        <p>Aktiver Provider:</p>\n                        <p class=\"text-lg font-semibold\">${providerName}</p>\n                    </div>\n                    <button id=\"configureAIBtn\" class=\"btn btn-icon\">\n                        <span class=\"icon\">⚙️</span>\n                    </button>\n                </div>\n            </div>\n            \n            <!-- Weitere Aktionen -->\n            <div class=\"info-box glass-container mt-6 p-4 rounded-xl shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                    <span class=\"icon mr-2\">⚡</span> Weitere Aktionen\n                </h2>\n                <div class=\"grid grid-cols-1 gap-3\">\n                    <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">⚙️</span> Trigger konfigurieren\n                    </button>\n                    <button id=\"openDashboardBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">📊</span> Dashboard öffnen\n                    </button>\n                    <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                        <span class=\"icon\">🔧</span> Alle Einstellungen\n                    </button>\n                </div>\n            </div>\n            \n            <!-- Footer -->\n            <div class=\"footer mt-8 mb-4 text-center opacity-70\">\n                <p>Comitto v${version}</p>\n            </div>\n        </div>\n        \n        <!-- Simple UI JavaScript -->\n        <script nonce=\"${nonce}\" src=\"${simpleUIJsWebviewUri}\"></script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert das HTML für das Dashboard (Webview).\n * @param {vscode.ExtensionContext} context\n * @returns {string} HTML-Inhalt\n */\nfunction generateDashboardHTML(context) {\n    // Bestehendes Panel abrufen\n    let panel = context.globalState.get('comittoDashboardPanel');\n    if (!panel || !panel.webview) {\n        console.error('Dashboard-Panel nicht gefunden oder webview nicht verfügbar');\n        // Das Panel sollte bereits erstellt worden sein, bevor diese Funktion aufgerufen wird\n        // Statt undefined zurückzugeben, geben wir eine Fehlermeldung zurück\n        return `<html><body><h1>Fehler beim Initialisieren des Dashboards</h1>\n                <p>Bitte schließen Sie das Dashboard und versuchen Sie es erneut zu öffnen.</p></body></html>`;\n    }\n    \n    const config = vscode.workspace.getConfiguration('comitto');\n    const enabled = config.get('autoCommitEnabled');\n    const provider = config.get('aiProvider');\n    const rules = config.get('triggerRules');\n    const gitSettings = config.get('gitSettings');\n    const providerName = ui.getProviderDisplayName(provider);\n    const providerIcon = ui.getProviderIcon(provider); // Holen des Icons\n    \n    let providerModel = '';\n    switch (provider) {\n        case 'ollama': providerModel = config.get('ollama.model'); break;\n        case 'openai': providerModel = config.get('openai.model'); break;\n        case 'anthropic': providerModel = config.get('anthropic.model'); break;\n    }\n\n    // Pfade zu Ressourcen\n    const dashboardJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'dashboard.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'icon.svg');\n    \n    // Webview URIs erstellen\n    const dashboardJsWebviewUri = panel.webview.asWebviewUri(dashboardJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n    \n    // Version aus package.json lesen\n    let version = '0.9.6'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n    \n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto Dashboard</title>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container glass-container animated-bg\">\n            <div class=\"dashboard-header\">\n                <div class=\"flex items-center gap-4\">\n                    <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-12 w-12 floating-element\"/>\n                    <h1 class=\"dashboard-title typing\">Comitto Dashboard</h1>\n                </div>\n                <button id=\"refreshBtn\" class=\"btn btn-icon\" title=\"Aktualisieren\">\n                    <span class=\"icon\">🔄</span>\n                </button>\n            </div>\n            \n            <div class=\"flex justify-between items-center mb-6 fade-in\" style=\"animation-delay: 0.2s\">\n                <div class=\"status ${enabled ? 'status-enabled' : 'status-disabled'} flex items-center\">\n                    <span class=\"status-indicator ${enabled ? 'status-active' : 'status-inactive'}\"></span>\n                    <span><strong>Status:</strong> Comitto ist derzeit ${enabled ? 'aktiviert' : 'deaktiviert'}</span>\n                </div>\n                \n                <div class=\"flex gap-2\">\n                    <button id=\"commitBtn\" class=\"btn hover-lift\" title=\"Jetzt einen Commit mit KI generieren\">\n                        <span class=\"icon\">💾</span> Manueller Commit\n                    </button>\n                    <button id=\"toggleBtn\" class=\"btn ${enabled ? 'btn-danger' : 'btn-secondary'} hover-lift\" data-enabled=\"${enabled}\" title=\"Automatische Commits an-/ausschalten\">\n                        <span class=\"icon\">${enabled ? '🚫' : '✅'}</span> ${enabled ? 'Deaktivieren' : 'Aktivieren'}\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"dashboard fade-in\" style=\"animation-delay: 0.4s\">\n                <!-- KI-Konfiguration -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">${providerIcon.id ? `$(${providerIcon.id})` : '🧠'}</span> KI-Konfiguration\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${providerName}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <p class=\"mb-2\"><strong>Modell:</strong> ${providerModel || 'Nicht gesetzt'}</p>\n                        <div class=\"flex justify-center mt-4\">\n                            <button id=\"configureAIBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> KI konfigurieren\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Trigger-Regeln -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">⚙️</span> Trigger-Regeln\n                        </h2>\n                        <span class=\"badge ${rules.onSave || rules.onInterval ? 'badge-success' : 'badge-danger'}\">\n                            ${rules.onSave || rules.onInterval ? 'Aktiv' : 'Inaktiv'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Datei-Anzahl:</strong></p>\n                                <span class=\"badge\">${rules.fileCountThreshold}</span>\n                            </div>\n                            <div>\n                                <p><strong>Änderungs-Anzahl:</strong></p>\n                                <span class=\"badge\">${rules.minChangeCount}</span>\n                            </div>\n                            <div>\n                                <p><strong>Zeit-Schwellwert:</strong></p>\n                                <span class=\"badge\">${rules.timeThresholdMinutes} Min.</span>\n                            </div>\n                            <div>\n                                <p><strong>Aktive Trigger:</strong></p>\n                                <div class=\"flex flex-wrap gap-1\">\n                                    ${rules.onSave ? '<span class=\"badge badge-success\">Speichern</span>' : ''}\n                                    ${rules.onInterval ? `<span class=\"badge badge-success\">Intervall (${rules.intervalMinutes} Min.)</span>` : ''}\n                                    ${rules.onBranchSwitch ? '<span class=\"badge badge-success\">Branch-Wechsel</span>' : ''}\n                                    ${!rules.onSave && !rules.onInterval && !rules.onBranchSwitch ? '<span class=\"badge badge-danger\">Keine</span>' : ''}\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> Trigger konfigurieren\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Git-Einstellungen -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📝</span> Git-Einstellungen\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Auto-Push:</strong></p>\n                                <span class=\"badge ${gitSettings.autoPush ? 'badge-success' : 'badge-danger'}\">\n                                    ${gitSettings.autoPush ? 'Ja' : 'Nein'}\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Branch:</strong></p>\n                                <span class=\"badge tooltip\">\n                                    ${gitSettings.branch || 'Aktueller Branch'}\n                                    <span class=\"tooltip-text\">Aktiv für ${gitSettings.branch || 'aktuellen Branch'}</span>\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Commit-Stil:</strong></p>\n                                <span class=\"badge\">${gitSettings.commitMessageStyle}</span>\n                            </div>\n                            <div>\n                                <p><strong>Staging-Modus:</strong></p>\n                                <span class=\"badge\">${ui.getStageModeLabel(gitSettings.stageMode)}</span>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">🔧</span> Alle Einstellungen\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Aktivitätsübersicht -->\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📊</span> Aktivitätsübersicht\n                        </h2>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"h-40\">\n                            <canvas id=\"commitChart\"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"flex justify-center mt-4 fade-in\" style=\"animation-delay: 0.8s\">\n                <div class=\"badge\">Comitto v${version}</div>\n            </div>\n        </div>\n        \n        <!-- Chart.js (optional) -->\n        <script nonce=\"${nonce}\" src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\n        \n        <!-- Dashboard JavaScript -->\n        <script nonce=\"${nonce}\" src=\"${dashboardJsWebviewUri}\"></script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert eine Nonce für die Content Security Policy.\n * @returns {string} Eine zufällige Nonce.\n */\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\n/**\n * Funktion zum Verwalten der Commit-Nachrichtensprache\n * Verbesserte Implementierung mit Anpassung des Prompt-Templates\n * @returns {Promise<void>}\n */\nasync function handleCommitMessageLanguageCommand() {\n    try {\n        // Konfiguration abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings') || {};\n        \n        // Aktuell eingestellte Sprache abrufen\n        const currentLanguage = gitSettings.commitMessageLanguage || 'en';\n        \n        // Sprachoptionen definieren\n        const languageOptions = [\n            { label: 'Englisch', value: 'en', description: 'Commit-Nachrichten in englischer Sprache' },\n            { label: 'Deutsch', value: 'de', description: 'Commit-Nachrichten in deutscher Sprache' }\n        ];\n        \n        // Sprachauswahl anzeigen\n        const selectedLanguage = await vscode.window.showQuickPick(languageOptions, {\n            placeHolder: 'Wählen Sie die Sprache für Commit-Nachrichten',\n            title: 'Commit-Nachrichtensprache auswählen'\n        });\n        \n        if (selectedLanguage) {\n            // Git-Einstellungen aktualisieren\n            gitSettings.commitMessageLanguage = selectedLanguage.value;\n            await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n            \n            // Prompt-Template entsprechend anpassen\n            let promptTemplate = config.get('promptTemplate');\n            \n            // Je nach gewählter Sprache den Prompt-Template anpassen\n            if (selectedLanguage.value === 'de') {\n                // Wenn es bereits ein deutsches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('auf Deutsch')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generate a meaningful commit message in English/i,\n                        'Generiere eine aussagekräftige Commit-Nachricht auf Deutsch'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /using the Conventional Commits format/i,\n                        'im Format der Conventional Commits'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Keep it under 80 characters/i,\n                        'Halte sie unter 80 Zeichen'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Here is the diff of changes/i,\n                        'Hier ist das Diff der Änderungen'\n                    );\n                }\n            } else {\n                // Wenn es bereits ein englisches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('in English')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generiere eine aussagekräftige Commit-Nachricht auf Deutsch/i,\n                        'Generate a meaningful commit message in English'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /im Format der Conventional Commits/i,\n                        'using the Conventional Commits format'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Halte sie unter 80 Zeichen/i,\n                        'Keep it under 80 characters'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Hier ist das Diff der Änderungen/i,\n                        'Here is the diff of changes'\n                    );\n                }\n            }\n            \n            // Aktualisiertes Template speichern\n            await config.update('promptTemplate', promptTemplate, vscode.ConfigurationTarget.Global);\n            \n            vscode.window.showInformationMessage(\n                `Commit-Nachrichtensprache auf \"${selectedLanguage.label}\" gesetzt.`\n            );\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Spracheinstellung: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Staging-Modus.\n */\nasync function handleSelectStageModeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentMode = gitSettings.stageMode || 'all';\n\n    const modes = [\n        { label: 'Alle Änderungen', value: 'all', detail: 'Alle geänderten Dateien automatisch stagen (`git add .`)' },\n        { label: 'Spezifische Muster', value: 'specific', detail: 'Nur Dateien stagen, die bestimmten Mustern entsprechen' },\n        { label: 'Manuell auswählen', value: 'prompt', detail: 'Vor jedem Commit nach zu stagenden Dateien fragen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        modes.map(mode => ({ ...mode, description: currentMode === mode.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Staging-Modus auswählen',\n            title: 'Wie sollen Änderungen gestaged werden?',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        gitSettings.stageMode = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Staging-Modus auf \"${selected.label}\" gesetzt.`);\n        \n        // Wenn \"Spezifische Dateien\" ausgewählt wurde und keine Muster existieren, nach Mustern fragen\n        if (selected.value === 'specific' && (!gitSettings.specificStagingPatterns || gitSettings.specificStagingPatterns.length === 0)) {\n            await handleEditStagingPatternsCommand();\n        }\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten der Staging-Muster.\n */\nasync function handleEditStagingPatternsCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentPatterns = gitSettings.specificStagingPatterns || [];\n\n    const input = await vscode.window.showInputBox({\n        placeHolder: '*.js,*.json,src/**/*',\n        value: currentPatterns.join(','),\n        prompt: 'Kommagetrennte Glob-Muster für spezifisches Staging',\n        title: 'Staging-Muster bearbeiten',\n        ignoreFocusOut: true\n    });\n\n    if (input !== undefined) {\n        const patterns = input.split(',').map(p => p.trim()).filter(p => p);\n        gitSettings.specificStagingPatterns = patterns;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        if (patterns.length > 0) {\n            vscode.window.showInformationMessage(`Spezifische Staging-Muster aktualisiert: ${patterns.join(', ')}`);\n        } else {\n             vscode.window.showInformationMessage('Spezifische Staging-Muster entfernt.');\n        }\n       // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Alle Änderungen stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageAllCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Prüfe, ob es überhaupt Änderungen gibt\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen vorhanden.');\n            return true;\n        }\n\n        const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Stage alle Änderungen...', 2000);\n        await executeGitCommand('git add .', repoPath);\n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage('Alle Änderungen wurden gestaged.');\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen aller Änderungen: ${error.message}`);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Ausgewählte Dateien stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageSelectedCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Git-Status abrufen\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Geänderte Dateien parsen und für QuickPick vorbereiten\n        const changedFiles = statusOutput\n            .split('\\n')\n            .filter(line => line.trim() !== '')\n            .map(line => {\n                const status = line.substring(0, 2);\n                const filePath = line.substring(3).trim(); // Trimmen ist wichtig\n                return { \n                    status,\n                    filePath,\n                    label: `${ui.getStatusDescription(status)}: ${filePath}`,\n                    picked: !status.includes('?') // Vorauswahl aller Dateien außer untracked\n                };\n            });\n        \n        if (changedFiles.length === 0) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Dateien zur Auswahl anbieten\n        const selectedItems = await vscode.window.showQuickPick(changedFiles, {\n            placeHolder: 'Wählen Sie die zu stagenden Dateien aus',\n            canPickMany: true,\n            ignoreFocusOut: true,\n            title: 'Dateien für Staging auswählen'\n        });\n        \n        if (!selectedItems || selectedItems.length === 0) {\n            vscode.window.showInformationMessage('Keine Dateien zum Stagen ausgewählt.');\n            return false; // Benutzerabbruch\n        }\n        \n        const statusBarMessage = vscode.window.setStatusBarMessage(`$(sync~spin) Stage ${selectedItems.length} Datei(en)...`, 5000);\n        // Ausgewählte Dateien stagen\n        // Git add akzeptiert mehrere Dateien, sicherstellen, dass Pfade korrekt sind\n        const filesToStage = selectedItems.map(item => `\"${item.filePath}\"`).join(' ');\n        await executeGitCommand(`git add -- ${filesToStage}`, repoPath); // '--' trennt Optionen von Dateipfaden\n        \n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage(`${selectedItems.length} Datei(en) wurden gestaged.`);\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen ausgewählter Dateien: ${error.message}`);\n        console.error(\"Staging Error Details:\", error);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Themes.\n */\nasync function handleSelectThemeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const currentTheme = uiSettings.theme || 'auto';\n\n    const themes = [\n        { label: 'Hell', value: 'light', detail: 'Helles Theme für Comitto UI-Elemente' },\n        { label: 'Dunkel', value: 'dark', detail: 'Dunkles Theme für Comitto UI-Elemente' },\n        { label: 'Automatisch', value: 'auto', detail: 'Theme automatisch an VS Code anpassen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        themes.map(theme => ({...theme, description: currentTheme === theme.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Theme für Comitto auswählen',\n            title: 'Comitto Theme',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        uiSettings.theme = selected.value;\n        await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Comitto Theme auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Umschaltet eine Einstellung in den notifications-Einstellungen\n * @param {string} settingKey Der Schlüssel der Einstellung\n * @param {string} settingName Anzeigename der Einstellung für Benachrichtigungen\n */\nasync function handleToggleNotificationSettingCommand(settingKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const notifications = config.get('notifications') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(notifications[settingKey]);\n        \n        // Aktualisierte notifications erstellen\n        const updatedNotifications = { ...notifications, [settingKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('notifications', updatedNotifications, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen, wenn sie nicht gerade deaktiviert wurde\n        if (settingKey !== 'onError' || newValue) {\n            vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n// #endregion Spezifische Handler\n\nmodule.exports = {\n    registerCommands,\n    handleSelectThemeCommand,\n    handleStageSelectedCommand,\n    handleStageAllCommand,\n    handleOpenAIModelSelectionCommand,\n    handleCommitMessageLanguageCommand,\n    handleConfigureTriggersCommand,\n    showSimpleUI,\n    generateSimpleUIHTML,\n    generateDashboardHTML,\n    handleSelectStageModeCommand,\n    handleEditStagingPatternsCommand,\n    handleToggleGitSettingCommand,\n    handleToggleUISettingCommand,\n    handleToggleNotificationSettingCommand,\n    handleConfigureAIProviderCommand,\n    handleEditOpenAIKeyCommand,\n    handleSelectAnthropicModelCommand,\n    handleEditAnthropicKeyCommand,\n    handleEditPromptTemplateCommand\n}; ","module.exports = require(\"tty\");","module.exports = require(\"stream\");","module.exports = require(\"assert\");","module.exports = require(\"zlib\");","module.exports = require(\"events\");","module.exports = require(\"child_process\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"crypto\");","module.exports = require(\"url\");","module.exports = require(\"http\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [121,730], () => (__webpack_require__(286)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 121 ? \"vendor\" : chunkId) + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","installedChunks","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_unsupportedIterableToArray","_arrayLikeToArray","toString","Array","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","statusBarItem","fileWatcher","vscode","require","axios","path","exec","fs","ignore","ui","commands","_require2","executeGitCommand","getStatusText","changedFiles","Set","isCommitInProgress","lastCommitTime","gitignoreObj","uiProviders","intervalTimer","_activate","_callee2","context","hasGit","_context2","console","log","ensureResourceDirs","registerUI","window","createStatusBarItem","StatusBarAlignment","Left","text","tooltip","command","subscriptions","show","checkGitRepository","executeCommand","registerCommands","setupFileWatcher","disableFileWatcher","performAutoCommit","showNotification","loadGitignore","workspace","getConfiguration","get","undefined","onDidChangeConfiguration","_ref","_callee","event","currentConfig","gitAvailable","_context","affectsConfiguration","statusProvider","refresh","settingsProvider","quickActionsProvider","webviews","webview","visible","viewType","html","generateDashboardHTML","error","newEnabled","newProvider","generateSimpleUIHTML","getProviderDisplayName","_x9","setTimeout","showWelcomeNotification","_x2","_checkGitRepository","_callee3","workspaceFolders","repoPath","_context3","uri","fsPath","t0","dir","dirPath","Uri","joinPath","extensionUri","existsSync","mkdirSync","recursive","concat","currentVersion","extension","packageJSON","version","globalState","showInformationMessage","selection","update","showNotifications","activeTextEditor","gitSettings","useGitignore","repositoryPath","gitignorePath","join","gitignoreContent","readFileSync","add","triggerRules","filePatterns","createFileSystemWatcher","onDidChange","isFileIgnored","checkCommitTrigger","onDidCreate","onDidDelete","onInterval","minutes","intervalMinutes","clearInterval","setInterval","size","onTriggerFired","showErrorMessage","dispose","clear","filePath","includes","relativePath","relative","replace","ignores","rules","specificFiles","hasSpecificFileChanged","some","file","isArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","changed","hasMinChanges","minChangeCount","hasFileThreshold","fileCountThreshold","timeThresholdMs","timeThresholdMinutes","Date","now","getTime","_performAutoCommit","_callee4","isManualTrigger","config","gitStatus","diffOutput","fileList","commitMessage","notificationSettings","currentBranch","_notificationSettings","errorMessage","_args4","_context4","stageChanges","stageMode","trim","t1","message","warn","t2","generateCommitMessage","branch","t3","onCommit","autoPush","onPush","t4","onError","t5","t6","_x3","_stageChanges","_callee5","mode","gitStatusOutput","changedFilesList","selectedFiles","_iterator","_step","patterns","_iterator2","_step2","pattern","safePattern","_context5","split","filter","line","map","status","substring","showQuickPick","label","description","getStatusDescription","picked","canPickMany","placeHolder","_createForOfIteratorHelper","specificStagingPatterns","uiSettings","showWarningMessage","_x4","_x5","_generateCommitMessage","_callee6","aiProvider","changes","promptTemplate","language","maxDiffLength","shortenedDiff","fileChanges","_context6","commitMessageLanguage","toUpperCase","commitMessageStyle","fileChange","index","truncatedChange","generateWithOllama","generateWithOpenAI","generateWithAnthropic","_x6","_generateWithOllama","_callee7","prompt","endpoint","model","response","_error$response","_error$response2","_error$response3","_context7","post","stream","timeout","data","code","JSON","stringify","_x7","_generateWithOpenAI","_callee8","apiKey","_error$response4","_context8","messages","role","content","temperature","max_tokens","headers","choices","_x8","_generateWithAnthropic","_callee9","_error$response5","_context9","system","module","exports","activate","_x","deactivate","handleEditTriggerRuleCommand","_handleEditTriggerRuleCommand","_callee39","ruleKey","promptText","inputType","currentValue","valueToString","processedValue","_context39","_objectSpread","showInputBox","validateInput","num","parseInt","ConfigurationTarget","Global","handleToggleTriggerRuleCommand","_handleToggleTriggerRuleCommand","_callee40","settingName","newValue","updatedRules","_context40","_defineProperty","handleEditGitSettingCommand","_handleEditGitSettingCommand","_callee41","settingKey","_context41","handleToggleGitSettingCommand","_x10","_x11","_handleToggleGitSettingCommand","_callee42","_context42","handleSelectGitSettingCommand","_x12","_x13","_x14","_handleSelectGitSettingCommand","_callee43","options","selected","_context43","opt","ignoreFocusOut","handleToggleUISettingCommand","_x15","_x16","_handleToggleUISettingCommand","_callee44","_context44","handleEditOpenAIKeyCommand","_handleEditOpenAIKeyCommand","_callee45","_context45","password","handleSelectAnthropicModelCommand","_handleSelectAnthropicModelCommand","_callee46","currentModel","models","_context46","handleEditAnthropicKeyCommand","_handleEditAnthropicKeyCommand","_callee47","_context47","handleEditPromptTemplateCommand","_handleEditPromptTemplateCommand","_callee49","document","disposable","closeDisposable","_context49","openTextDocument","showTextDocument","onDidSaveTextDocument","_ref39","_callee48","doc","newContent","_context48","getText","_x24","onDidCloseTextDocument","handleShowDashboardCommand","_x17","_handleShowDashboardCommand","_callee51","panel","_context51","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","localResourceRoots","onDidReceiveMessage","_ref40","_callee50","enabled","_context50","_x25","handleConfigureAIProviderCommand","_x18","_handleConfigureAIProviderCommand","_callee52","providers","providerOptions","selectedProvider","configSuccess","_context52","id","title","configureOllamaSettings","handleOpenAIModelSelectionCommand","_configureOllamaSettings","_callee53","currentEndpoint","availableModels","statusBarMessage","tagsEndpoint","popularModels","allModels","quickPickItems","selectedModel","_context53","startsWith","URL","setStatusBarMessage","sort","_toConsumableArray","detail","_handleOpenAIModelSelectionCommand","_callee54","_context54","getOpenAIModelOptions","option","matchOnDescription","matchOnDetail","handleConfigureTriggersCommand","_x19","_x20","_handleConfigureTriggersCommand","_callee55","configOptions","selectedOption","triggerOptions","selectedTrigger","_context55","onSave","disabled","onBranchSwitch","showSimpleUI","autoCommitEnabled","providerName","_ref38","_callee38","_context38","_x21","simpleUIJsUri","styleUri","animationsUri","logoUri","simpleUIJsWebviewUri","asWebviewUri","styleWebviewUri","animationsWebviewUri","logoWebviewUri","nonce","getNonce","pkgPath","parse","cspSource","provider","providerIcon","getProviderIcon","providerModel","dashboardJsUri","dashboardJsWebviewUri","getStageModeLabel","Math","floor","possible","random","handleCommitMessageLanguageCommand","_handleCommitMessageLanguageCommand","_callee56","languageOptions","selectedLanguage","_context56","handleSelectStageModeCommand","_handleSelectStageModeCommand","_callee57","currentMode","modes","_context57","handleEditStagingPatternsCommand","_handleEditStagingPatternsCommand","_callee58","currentPatterns","input","_context58","_handleStageAllCommand","_callee59","workspaceFolder","_context59","_handleStageSelectedCommand","_callee60","statusOutput","selectedItems","filesToStage","_context60","item","handleSelectThemeCommand","_handleSelectThemeCommand","_callee61","currentTheme","themes","_context61","theme","handleToggleNotificationSettingCommand","_x22","_x23","_handleToggleNotificationSettingCommand","_callee62","notifications","updatedNotifications","_context62","registerCommand","shouldProceed","confirmBeforeCommit","modal","_callee10","_context10","_callee11","_context11","_callee12","_context12","_callee13","_context13","_callee14","_context14","_callee15","_context15","_callee16","_context16","_callee17","_context17","_callee18","_context18","_callee19","_context19","_callee20","_context20","_callee21","_context21","_callee22","_context22","_callee23","_context23","getCommands","cmds","_callee24","_context24","_callee25","_context25","_callee26","_context26","_callee27","_context27","_callee28","_context28","_callee29","_context29","_callee30","_context30","_callee31","_context31","_callee32","_context32","_callee33","_context33","_callee34","_context34","_callee35","_context35","_callee36","_context36","_callee37","_context37","handleStageSelectedCommand","handleStageAllCommand","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","x","__webpack_exports__","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","chunkId","all","reduce","promises","obj","prop","chunk","moreModules","modules","ids","runtime","installChunk"],"sourceRoot":""}