{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://comitto/webpack/runtime/chunk loaded","webpack://comitto/webpack/runtime/startup chunk dependencies","webpack://comitto/webpack/runtime/require chunk loading","webpack://comitto/./extension.js","webpack://comitto/external node-commonjs \"os\"","webpack://comitto/external commonjs \"vscode\"","webpack://comitto/./commands.js","webpack://comitto/external node-commonjs \"tty\"","webpack://comitto/external node-commonjs \"stream\"","webpack://comitto/external node-commonjs \"assert\"","webpack://comitto/external node-commonjs \"zlib\"","webpack://comitto/external node-commonjs \"events\"","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/external node-commonjs \"https\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/external node-commonjs \"crypto\"","webpack://comitto/external node-commonjs \"url\"","webpack://comitto/external node-commonjs \"http\"","webpack://comitto/external node-commonjs \"util\"","webpack://comitto/external node-commonjs \"fs\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/runtime/ensure chunk","webpack://comitto/webpack/runtime/get javascript chunk filename","webpack://comitto/webpack/runtime/hasOwnProperty shorthand","webpack://comitto/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t__webpack_require__.e(121);\n\t__webpack_require__.e(730);\n\treturn next();\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t217: 1,\n\t606: 1\n};\n\n__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\t__webpack_require__.O();\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","const vscode = require('vscode');\nconst axios = require('axios');\nconst { exec } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst ignore = require('ignore');\nconst ui = require('./ui');\nconst commands = require('./commands');\nconst { executeGitCommand, getStatusText, ComittoError, ErrorTypes, logError, getErrorLogs, withRetry, getDiagnosticInfo } = require('./utils');\nconst os = require('os');\nconst { WebviewPanel } = require('vscode');\n\n/**\n * @type {vscode.OutputChannel}\n */\nlet outputChannel;\n\n/**\n * @type {vscode.StatusBarItem}\n */\nlet statusBarItem;\n\n/**\n * @type {vscode.FileSystemWatcher}\n */\nlet fileWatcher;\n\n/**\n * @type {Set<string>}\n */\nlet changedFiles = new Set();\n\n/**\n * @type {boolean}\n */\nlet isCommitInProgress = false;\n\n/**\n * @type {Date|null}\n */\nlet lastCommitTime = null;\n\n/**\n * @type {Object}\n */\nlet gitignoreObj = null;\n\n/**\n * @type {Object}\n */\nlet uiProviders = null;\n\n/**\n * @type {NodeJS.Timeout}\n */\nlet intervalTimer = null;\n\n// Globale Variable für Debug-Logs\nlet debugLogs = [];\nconst MAX_DEBUG_LOGS = 100;\n\n/**\n * Fügt einen Eintrag zum Debug-Log hinzu\n * @param {string} message Die Nachricht\n * @param {string} type Der Typ des Logs (info, warning, error)\n */\nfunction addDebugLog(message, type = 'info') {\n    const timestamp = new Date().toISOString();\n    const logEntry = { timestamp, message, type };\n    \n    debugLogs.unshift(logEntry); // Am Anfang einfügen\n    \n    // Maximale Größe einhalten\n    if (debugLogs.length > MAX_DEBUG_LOGS) {\n        debugLogs = debugLogs.slice(0, MAX_DEBUG_LOGS);\n    }\n    \n    // In die Konsole schreiben\n    const consoleMethod = type === 'error' ? console.error : \n                         type === 'warning' ? console.warn : \n                         console.log;\n    consoleMethod(`[Comitto Debug] ${message}`);\n    \n    // Auf Webview-Updates verzichten, da dies Fehler verursacht\n    // Stattdessen werden wir die Debug-Logs beim Öffnen des Dashboards aktualisieren\n}\n\n/**\n * Verbesserte Debug-Protokollierungsfunktion\n */\nfunction debugLog(message, category = 'allgemein', level = 'info') {\n    const config = vscode.workspace.getConfiguration('comitto');\n    if (!config.get('debug')) return;\n    \n    const timestamp = new Date().toISOString();\n    const formattedMessage = `[${timestamp}] [${category}] [${level}] ${message}`;\n    \n    console.log(formattedMessage);\n    \n    // Debug-Ausgabe in Ausgabekanal\n    if (!outputChannel) {\n        outputChannel = vscode.window.createOutputChannel('Comitto Debug');\n    }\n    \n    outputChannel.appendLine(formattedMessage);\n    \n    // Bei Fehlern das Debug-Panel anzeigen\n    if (level === 'error') {\n        outputChannel.show(true);\n    }\n    \n    // Optional: In Datei protokollieren\n    try {\n        const logDir = path.join(process.env.HOME || process.env.USERPROFILE, '.comitto', 'logs');\n        if (!fs.existsSync(logDir)) {\n            fs.mkdirSync(logDir, { recursive: true });\n        }\n        \n        const logFile = path.join(logDir, `debug_${new Date().toISOString().split('T')[0]}.log`);\n        fs.appendFileSync(logFile, formattedMessage + '\\n');\n    } catch (e) {\n        console.error('Fehler beim Schreiben des Debug-Protokolls:', e);\n    }\n}\n\n/**\n * Fehlerbehandlungsfunktion für die Erweiterung\n * @param {Error|ComittoError} error - Der aufgetretene Fehler\n * @param {string} contextMessage - Kontextbezogene Nachricht\n * @param {boolean} showToUser - Ob der Fehler dem Benutzer angezeigt werden soll\n */\nasync function handleError(error, contextMessage = '', showToUser = true) {\n    // Sicherstellen, dass wir mit einem ComittoError arbeiten\n    const comittoError = error instanceof ComittoError ? error : \n        new ComittoError(\n            error.message || 'Unbekannter Fehler',\n            ErrorTypes.UNKNOWN,\n            error,\n            { context: contextMessage }\n        );\n    \n    // Fehler protokollieren\n    logError(comittoError);\n    \n    // Debug-Ausgabe\n    debugLog(\n        `Fehler: ${comittoError.message}${contextMessage ? ' - ' + contextMessage : ''}`,\n        'fehler',\n        'error'\n    );\n    \n    // Detaillierte Informationen in die Konsole schreiben\n    console.error('Detaillierter Fehler:', comittoError.toJSON());\n    \n    // Benutzerbenachrichtigung, falls erforderlich\n    if (showToUser) {\n        const viewDetailsButton = 'Details anzeigen';\n        const reportButton = 'Problem melden';\n        \n        const messagePrefix = contextMessage ? `${contextMessage}: ` : '';\n        const userMessage = await vscode.window.showErrorMessage(\n            `${messagePrefix}${comittoError.message}`, \n            viewDetailsButton,\n            reportButton\n        );\n        \n        if (userMessage === viewDetailsButton) {\n            // Details in neuem Fenster anzeigen\n            showErrorDetails(comittoError);\n        } else if (userMessage === reportButton) {\n            // Öffne GitHub Issues oder sende Fehlerbericht\n            const issueBody = encodeURIComponent(\n                `## Fehlerbeschreibung\\n${comittoError.message}\\n\\n` +\n                `## Kontext\\n${contextMessage || 'Nicht angegeben'}\\n\\n` +\n                `## Fehlerdetails\\n\\`\\`\\`json\\n${JSON.stringify(comittoError.toJSON(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                `## Diagnostische Informationen\\n\\`\\`\\`json\\n${JSON.stringify(getDiagnosticInfo(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                `## Schritte zur Reproduktion\\n\\n` +\n                `## Erwartetes Verhalten\\n\\n` +\n                `## VSCode-Version\\n${vscode.version}\\n\\n` +\n                `## Comitto-Version\\n${vscode.extensions.getExtension('publisher.comitto').packageJSON.version || 'Unbekannt'}`\n            );\n            \n            vscode.env.openExternal(\n                vscode.Uri.parse(`https://github.com/publisher/comitto/issues/new?body=${issueBody}&title=Fehler: ${encodeURIComponent(comittoError.message)}`)\n            );\n        }\n    }\n}\n\n/**\n * Zeigt detaillierte Fehlerinformationen in einem Webview-Panel an\n * @param {ComittoError} error - Der anzuzeigende Fehler\n */\nfunction showErrorDetails(error) {\n    const panel = vscode.window.createWebviewPanel(\n        'comittoErrorDetails',\n        'Comitto Fehlerdetails',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true\n        }\n    );\n    \n    const diagnosticInfo = getDiagnosticInfo();\n    \n    panel.webview.html = `\n        <!DOCTYPE html>\n        <html lang=\"de\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Comitto Fehlerdetails</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                h2 {\n                    margin-top: 20px;\n                    margin-bottom: 10px;\n                    border-bottom: 1px solid var(--vscode-editor-lineHighlightBorder);\n                    padding-bottom: 5px;\n                }\n                pre {\n                    background-color: var(--vscode-editor-background);\n                    padding: 15px;\n                    border-radius: 4px;\n                    overflow: auto;\n                }\n                .error-section {\n                    margin-bottom: 20px;\n                }\n                .label {\n                    font-weight: bold;\n                    margin-right: 10px;\n                }\n                .actions {\n                    margin-top: 20px;\n                }\n                button {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    margin-right: 10px;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n            </style>\n        </head>\n        <body>\n            <h1>Fehlerdetails</h1>\n            \n            <div class=\"error-section\">\n                <h2>Fehlerinformationen</h2>\n                <div><span class=\"label\">Typ:</span> ${error.type}</div>\n                <div><span class=\"label\">Nachricht:</span> ${error.message}</div>\n                <div><span class=\"label\">Zeitstempel:</span> ${error.timestamp.toISOString()}</div>\n            </div>\n            \n            <div class=\"error-section\">\n                <h2>Fehlerkontext</h2>\n                <pre>${JSON.stringify(error.context, null, 2)}</pre>\n            </div>\n            \n            ${error.originalError ? `\n                <div class=\"error-section\">\n                    <h2>Ursprünglicher Fehler</h2>\n                    <div><span class=\"label\">Typ:</span> ${error.originalError.name}</div>\n                    <div><span class=\"label\">Nachricht:</span> ${error.originalError.message}</div>\n                </div>\n            ` : ''}\n            \n            <div class=\"error-section\">\n                <h2>Stack-Trace</h2>\n                <pre>${error.stack}</pre>\n            </div>\n            \n            <div class=\"error-section\">\n                <h2>Diagnostische Informationen</h2>\n                <pre>${JSON.stringify(diagnosticInfo, null, 2)}</pre>\n            </div>\n            \n            <div class=\"actions\">\n                <button id=\"copyDetails\">Details kopieren</button>\n                <button id=\"reportIssue\">Problem melden</button>\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                document.getElementById('copyDetails').addEventListener('click', () => {\n                    const errorDetails = ${JSON.stringify(JSON.stringify({\n                        error: error.toJSON(),\n                        diagnosticInfo\n                    }, null, 2))};\n                    vscode.postMessage({\n                        command: 'copyToClipboard',\n                        text: errorDetails\n                    });\n                });\n                \n                document.getElementById('reportIssue').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'reportIssue',\n                        error: ${JSON.stringify(error.toJSON())}\n                    });\n                });\n            </script>\n        </body>\n        </html>\n    `;\n    \n    panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.command) {\n                case 'copyToClipboard':\n                    vscode.env.clipboard.writeText(message.text);\n                    vscode.window.showInformationMessage('Fehlerdetails wurden in die Zwischenablage kopiert');\n                    break;\n                case 'reportIssue':\n                    const issueBody = encodeURIComponent(\n                        `## Fehlerbeschreibung\\n${error.message}\\n\\n` +\n                        `## Fehlerdetails\\n\\`\\`\\`json\\n${JSON.stringify(error.toJSON(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                        `## Diagnostische Informationen\\n\\`\\`\\`json\\n${JSON.stringify(diagnosticInfo, null, 2)}\\n\\`\\`\\`\\n\\n` +\n                        `## Schritte zur Reproduktion\\n\\n` +\n                        `## Erwartetes Verhalten\\n\\n` +\n                        `## VSCode-Version\\n${vscode.version}\\n\\n` +\n                        `## Comitto-Version\\n${vscode.extensions.getExtension('publisher.comitto').packageJSON.version || 'Unbekannt'}`\n                    );\n                    \n                    vscode.env.openExternal(\n                        vscode.Uri.parse(`https://github.com/publisher/comitto/issues/new?body=${issueBody}&title=Fehler: ${encodeURIComponent(error.message)}`)\n                    );\n                    break;\n            }\n        },\n        undefined,\n        undefined\n    );\n}\n\n/**\n * Zeigt eine Liste der neuesten Fehlerprotokolle an\n */\nfunction showErrorLogs() {\n    const logs = getErrorLogs();\n    \n    const panel = vscode.window.createWebviewPanel(\n        'comittoErrorLogs',\n        'Comitto Fehlerprotokolle',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true\n        }\n    );\n    \n    panel.webview.html = `\n        <!DOCTYPE html>\n        <html lang=\"de\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Comitto Fehlerprotokolle</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                h1 {\n                    margin-bottom: 20px;\n                }\n                .log-entry {\n                    margin-bottom: 20px;\n                    padding: 15px;\n                    background-color: var(--vscode-editor-background);\n                    border-radius: 4px;\n                    border-left: 4px solid #e74c3c;\n                }\n                .log-entry-header {\n                    display: flex;\n                    justify-content: space-between;\n                    margin-bottom: 10px;\n                }\n                .log-type {\n                    font-weight: bold;\n                    color: #e74c3c;\n                }\n                .log-timestamp {\n                    color: var(--vscode-descriptionForeground);\n                }\n                .log-message {\n                    margin-bottom: 10px;\n                }\n                .log-details-button {\n                    background: none;\n                    border: 1px solid var(--vscode-button-background);\n                    color: var(--vscode-button-background);\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                }\n                .log-details {\n                    display: none;\n                    margin-top: 10px;\n                    padding: 10px;\n                    background-color: var(--vscode-editor-inactiveSelectionBackground);\n                    border-radius: 4px;\n                }\n                .log-details pre {\n                    white-space: pre-wrap;\n                    word-break: break-all;\n                }\n                .actions {\n                    margin-top: 20px;\n                }\n                button {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    margin-right: 10px;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n                .no-logs {\n                    margin: 30px 0;\n                    text-align: center;\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n            </style>\n        </head>\n        <body>\n            <h1>Fehlerprotokolle</h1>\n            \n            ${logs.length === 0 ? \n                '<div class=\"no-logs\">Keine Fehlerprotokolle vorhanden</div>' : \n                logs.map((log, index) => `\n                    <div class=\"log-entry\">\n                        <div class=\"log-entry-header\">\n                            <span class=\"log-type\">${log.type}</span>\n                            <span class=\"log-timestamp\">${log.timestamp}</span>\n                        </div>\n                        <div class=\"log-message\">${log.message}</div>\n                        <button class=\"log-details-button\" onclick=\"toggleDetails(${index})\">Details anzeigen</button>\n                        <div id=\"details-${index}\" class=\"log-details\">\n                            <pre>${JSON.stringify(log, null, 2)}</pre>\n                        </div>\n                    </div>\n                `).join('')\n            }\n            \n            <div class=\"actions\">\n                <button id=\"clearLogs\">Protokolle löschen</button>\n                <button id=\"exportLogs\">Protokolle exportieren</button>\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                function toggleDetails(index) {\n                    const details = document.getElementById('details-' + index);\n                    const button = details.previousElementSibling;\n                    \n                    if (details.style.display === 'block') {\n                        details.style.display = 'none';\n                        button.textContent = 'Details anzeigen';\n                    } else {\n                        details.style.display = 'block';\n                        button.textContent = 'Details ausblenden';\n                    }\n                }\n                \n                document.getElementById('clearLogs').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'clearLogs'\n                    });\n                });\n                \n                document.getElementById('exportLogs').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'exportLogs',\n                        logs: ${JSON.stringify(logs)}\n                    });\n                });\n            </script>\n        </body>\n        </html>\n    `;\n    \n    panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.command) {\n                case 'clearLogs':\n                    clearErrorLogs();\n                    vscode.window.showInformationMessage('Fehlerprotokolle wurden gelöscht');\n                    panel.dispose();\n                    break;\n                case 'exportLogs':\n                    vscode.window.showSaveDialog({\n                        defaultUri: vscode.Uri.file(path.join(os.homedir(), 'comitto_error_logs.json')),\n                        filters: {\n                            'JSON-Dateien': ['json']\n                        }\n                    }).then(fileUri => {\n                        if (fileUri) {\n                            fs.writeFileSync(fileUri.fsPath, JSON.stringify(message.logs, null, 2));\n                            vscode.window.showInformationMessage(`Fehlerprotokolle wurden nach ${fileUri.fsPath} exportiert`);\n                        }\n                    });\n                    break;\n            }\n        },\n        undefined,\n        undefined\n    );\n}\n\n/**\n * Hauptaktivierungsfunktion der Erweiterung.\n * @param {vscode.ExtensionContext} context\n */\nasync function activate(context) {\n    try {\n        debugLog('Comitto-Erweiterung wird aktiviert', 'aktivierung', 'info');\n        \n        addDebugLog('Die Erweiterung \"comitto\" wird aktiviert.', 'info');\n\n        // Sicherstellen, dass das Ressourcenverzeichnis existiert\n        ensureResourceDirs(context);\n\n        // UI-Komponenten registrieren\n        uiProviders = ui.registerUI(context);\n\n        // Statusleistenelement erstellen\n        statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n        statusBarItem.text = \"$(git-commit) Comitto: Initialisiere...\";\n        statusBarItem.tooltip = \"Comitto: Klicke zum Aktivieren/Deaktivieren oder manuellen Commit\";\n        statusBarItem.command = \"comitto.toggleAutoCommit\"; // Standardaktion\n        context.subscriptions.push(statusBarItem);\n        statusBarItem.show();\n\n        // Git-Status prüfen und Kontext setzen\n        const hasGit = await checkGitRepository(context);\n        vscode.commands.executeCommand('setContext', 'workspaceHasGit', hasGit);\n        \n        if (hasGit) {\n            addDebugLog('Git-Repository gefunden.', 'info');\n        } else {\n            addDebugLog('Kein Git-Repository gefunden. Einige Funktionen sind deaktiviert.', 'warning');\n        }\n\n        // Befehle zentral registrieren und Abhängigkeiten übergeben\n        commands.registerCommands(\n            context,\n            uiProviders,\n            statusBarItem,\n            setupFileWatcher,       // Funktion übergeben\n            disableFileWatcher,     // Funktion übergeben\n            performAutoCommit,      // Funktion übergeben\n            showNotification        // Funktion übergeben\n        );\n        \n        // .gitignore einlesen, wenn vorhanden und konfiguriert\n        loadGitignore();\n\n        // Initialen Status setzen und FileSystemWatcher/Timer ggf. starten\n        const config = vscode.workspace.getConfiguration('comitto');\n        if (config.get('autoCommitEnabled') && hasGit) {\n            setupFileWatcher(context);\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n            addDebugLog('Comitto wurde automatisch aktiviert.', 'info');\n        } else if (!hasGit) {\n            statusBarItem.text = \"$(warning) Comitto: Kein Git-Repo\";\n            statusBarItem.tooltip = \"Kein Git-Repository im aktuellen Workspace gefunden\";\n            statusBarItem.command = undefined; // Keine Aktion bei Klick\n        } else {\n            statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        }\n\n        // Debugging-Befehle registrieren\n        context.subscriptions.push(\n            vscode.commands.registerCommand('comitto.showErrorLogs', showErrorLogs),\n            vscode.commands.registerCommand('comitto.openDebugConsole', () => {\n                if (!outputChannel) {\n                    outputChannel = vscode.window.createOutputChannel('Comitto Debug');\n                }\n                outputChannel.show();\n            }),\n            vscode.commands.registerCommand('comitto.diagnosticInfo', async () => {\n                const info = getDiagnosticInfo();\n                const panel = vscode.window.createWebviewPanel(\n                    'comittoDiagnostics',\n                    'Comitto Diagnose',\n                    vscode.ViewColumn.One,\n                    { enableScripts: true }\n                );\n                \n                panel.webview.html = `\n                    <!DOCTYPE html>\n                    <html lang=\"de\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <title>Comitto Diagnose</title>\n                        <style>\n                            body { padding: 20px; font-family: var(--vscode-font-family); }\n                            pre { background-color: var(--vscode-editor-background); padding: 15px; }\n                            button {\n                                background-color: var(--vscode-button-background);\n                                color: var(--vscode-button-foreground);\n                                border: none;\n                                padding: 8px 16px;\n                                border-radius: 4px;\n                                cursor: pointer;\n                                margin-right: 10px;\n                            }\n                        </style>\n                    </head>\n                    <body>\n                        <h1>Comitto Diagnose</h1>\n                        <pre>${JSON.stringify(info, null, 2)}</pre>\n                        <button id=\"copyBtn\">In Zwischenablage kopieren</button>\n                        \n                        <script>\n                            const vscode = acquireVsCodeApi();\n                            document.getElementById('copyBtn').addEventListener('click', () => {\n                                vscode.postMessage({ command: 'copy', data: ${JSON.stringify(JSON.stringify(info, null, 2))} });\n                            });\n                        </script>\n                    </body>\n                    </html>\n                `;\n                \n                panel.webview.onDidReceiveMessage(message => {\n                    if (message.command === 'copy') {\n                        vscode.env.clipboard.writeText(message.data);\n                        vscode.window.showInformationMessage('Diagnostische Informationen in die Zwischenablage kopiert');\n                    }\n                });\n            })\n        );\n        \n        // Automatische Hintergrundüberwachung einrichten\n        setupAutoBackgroundMonitoring(context);\n        \n        // Eventuell kurze Verzögerung für initiale UI-Aktualisierung\n        setTimeout(() => {\n            if (uiProviders) {\n                uiProviders.statusProvider.refresh();\n                uiProviders.settingsProvider.refresh();\n                uiProviders.quickActionsProvider.refresh();\n            }\n        }, 1500);\n\n        // Willkommensnachricht anzeigen (einmalig)\n        showWelcomeNotification(context);\n\n        debugLog('Comitto-Erweiterung erfolgreich aktiviert', 'aktivierung', 'info');\n    } catch (error) {\n        handleError(error, 'Fehler beim Aktivieren der Erweiterung', true);\n    }\n}\n\n/**\n * Prüft, ob im Workspace ein Git-Repository vorhanden ist.\n * @param {vscode.ExtensionContext} context\n * @returns {Promise<boolean>}\n */\nasync function checkGitRepository(context) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders || workspaceFolders.length === 0) {\n        return false;\n    }\n    const repoPath = workspaceFolders[0].uri.fsPath;\n    try {\n        await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\n        console.log('Git-Repository gefunden.');\n        return true;\n    } catch (error) {\n        console.log('Kein Git-Repository gefunden oder Git nicht verfügbar.');\n        return false;\n    }\n}\n\n/**\n * Stellt sicher, dass die notwendigen Ressourcenverzeichnisse existieren.\n * @param {vscode.ExtensionContext} context \n */\nfunction ensureResourceDirs(context) {\n    const dirsToEnsure = ['resources', 'resources/ui'];\n    dirsToEnsure.forEach(dir => {\n        const dirPath = vscode.Uri.joinPath(context.extensionUri, dir).fsPath;\n        if (!fs.existsSync(dirPath)) {\n            try {\n                fs.mkdirSync(dirPath, { recursive: true });\n                console.log(`Verzeichnis erstellt: ${dirPath}`);\n            } catch (error) {\n                console.error(`Fehler beim Erstellen des Verzeichnisses ${dirPath}:`, error);\n            }\n        }\n    });\n}\n\n/**\n * Zeigt eine Willkommensnachricht beim ersten Start nach einer Installation/Update.\n * @param {vscode.ExtensionContext} context\n */\nfunction showWelcomeNotification(context) {\n    const currentVersion = context.extension.packageJSON.version;\n    const previousVersion = context.globalState.get('comitto.version');\n\n    if (previousVersion !== currentVersion) {\n        // Nach erstem Start oder Update anzeigen\n        vscode.window.showInformationMessage(\n            `Comitto v${currentVersion} wurde aktiviert! Konfigurieren Sie es über die Seitenleiste.`,\n            'Seitenleiste öffnen', 'Changelog anzeigen'\n        ).then(selection => {\n            if (selection === 'Seitenleiste öffnen') {\n                vscode.commands.executeCommand('workbench.view.extension.comitto-sidebar');\n            } else if (selection === 'Changelog anzeigen') {\n                // Prüfen, ob die Nachricht bereits angezeigt wurde\n                const hasShownWelcome = context.globalState.get('comitto.hasShownWelcome', false);\n                if (!hasShownWelcome) {\n                    vscode.window.showInformationMessage(\n                        'Comitto wurde aktiviert! Öffnen Sie die Comitto-Seitenleiste über das Icon in der Activity Bar.',\n                        'Öffnen', 'Nicht mehr anzeigen'\n                    ).then(selection => {\n                        if (selection === 'Öffnen') {\n                            vscode.commands.executeCommand('comitto-sidebar.focus');\n                        } else if (selection === 'Nicht mehr anzeigen') {\n                            context.globalState.update('comitto.hasShownWelcome', true);\n                        }\n                    });\n                }\n            }\n        });\n        // Version speichern\n        context.globalState.update('comitto.version', currentVersion);\n    }\n\n    // Status der UI anzeigen\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = config.get('uiSettings');\n    \n    if (uiSettings.showNotifications) {\n        setTimeout(() => {\n            if (vscode.window.activeTextEditor) {\n                vscode.window.showInformationMessage(\n                    'Comitto ist bereit! Verwenden Sie die Seitenleiste oder das $(git-commit) Symbol in der Statusleiste.',\n                    'Einstellungen öffnen', 'Dashboard anzeigen'\n                ).then(selection => {\n                    if (selection === 'Einstellungen öffnen') {\n                        vscode.commands.executeCommand('comitto.openSettings');\n                    } else if (selection === 'Dashboard anzeigen') {\n                        vscode.commands.executeCommand('comitto.showDashboard');\n                    }\n                });\n            }\n        }, 2000);\n    }\n}\n\n/**\n * .gitignore-Datei laden und Parser erstellen\n */\nfunction loadGitignore() {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) return;\n\n    const gitSettings = vscode.workspace.getConfiguration('comitto').get('gitSettings');\n    if (!gitSettings.useGitignore) {\n        gitignoreObj = null;\n        return;\n    }\n\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n    const gitignorePath = path.join(repoPath, '.gitignore');\n    \n    try {\n        if (fs.existsSync(gitignorePath)) {\n            const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');\n            gitignoreObj = ignore().add(gitignoreContent);\n        } else {\n            gitignoreObj = null;\n        }\n    } catch (error) {\n        console.error('Fehler beim Laden der .gitignore-Datei:', error);\n        gitignoreObj = null;\n    }\n}\n\n/**\n * FileSystemWatcher konfigurieren\n * @param {vscode.ExtensionContext} context\n */\nfunction setupFileWatcher(context) {\n    // Vorhandenen Watcher deaktivieren\n    disableFileWatcher();\n\n    // Neuen Watcher erstellen\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        vscode.window.showErrorMessage('Comitto: Kein Workspace gefunden.');\n        return;\n    }\n\n    const config = vscode.workspace.getConfiguration('comitto');\n    const triggerRules = config.get('triggerRules');\n    const filePatterns = triggerRules.filePatterns || ['**/*'];\n\n    fileWatcher = vscode.workspace.createFileSystemWatcher(filePatterns.length === 1 ? filePatterns[0] : '{' + filePatterns.join(',') + '}');\n    \n    // Auf Dateiereignisse reagieren\n    fileWatcher.onDidChange(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n    \n    fileWatcher.onDidCreate(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n    \n    fileWatcher.onDidDelete(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n\n    context.subscriptions.push(fileWatcher);\n\n    // Interval-Timer einrichten, falls aktiviert\n    if (triggerRules.onInterval) {\n        setupIntervalTrigger(triggerRules.intervalMinutes);\n    }\n}\n\n/**\n * Richtet einen Interval-Trigger für automatische Commits ein\n * @param {number} minutes Intervall in Minuten\n */\nfunction setupIntervalTrigger(minutes) {\n    // Bestehenden Timer löschen\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n        intervalTimer = null;\n    }\n    \n    // Neuen Timer einrichten\n    if (minutes > 0) {\n        const intervalMs = minutes * 60 * 1000;\n        intervalTimer = setInterval(() => {\n            if (vscode.workspace.getConfiguration('comitto').get('autoCommitEnabled') && changedFiles.size > 0) {\n                const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\n                if (notificationSettings.onTriggerFired) {\n                    showNotification('Intervall-Trigger aktiviert. Prüfe auf ausstehende Commits...', 'info');\n                }\n                checkCommitTrigger();\n            }\n        }, intervalMs);\n    }\n}\n\n/**\n * FileSystemWatcher deaktivieren\n */\nfunction disableFileWatcher() {\n    if (fileWatcher) {\n        fileWatcher.dispose();\n        fileWatcher = null;\n    }\n    \n    // Interval-Timer deaktivieren\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n        intervalTimer = null;\n    }\n    \n    changedFiles.clear();\n}\n\n/**\n * Überprüft, ob eine Datei ignoriert werden soll\n * @param {string} filePath Dateipfad\n * @returns {boolean}\n */\nfunction isFileIgnored(filePath) {\n    // Standardmäßig node_modules und .git ausschließen\n    if (filePath.includes('node_modules') || filePath.includes('.git')) {\n        return true;\n    }\n\n    // .gitignore-Regeln prüfen, wenn verfügbar\n    if (gitignoreObj) {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (workspaceFolders) {\n            const relativePath = path.relative(workspaceFolders[0].uri.fsPath, filePath)\n                .replace(/\\\\/g, '/');  // Pfadtrennzeichen normalisieren\n            \n            return gitignoreObj.ignores(relativePath);\n        }\n    }\n\n    return false;\n}\n\n/**\n * Prüft, ob die Bedingungen für ein Auto-Commit erfüllt sind\n */\nfunction checkCommitTrigger() {\n    // Wenn bereits ein Commit-Vorgang läuft, abbrechen\n    if (isCommitInProgress) {\n        return;\n    }\n\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = config.get('triggerRules');\n\n    // Prüfen, ob bestimmte Dateien geändert wurden\n    const specificFiles = rules.specificFiles || [];\n    const hasSpecificFileChanged = specificFiles.length > 0 && \n        specificFiles.some(file => [...changedFiles].some(changed => changed.includes(file)));\n\n    // Prüfen, ob die Mindestanzahl an Änderungen erreicht wurde\n    const hasMinChanges = changedFiles.size >= (rules.minChangeCount || 10);\n\n    // Prüfen, ob die Anzahl der geänderten Dateien den Schwellwert überschreitet\n    const hasFileThreshold = changedFiles.size >= (rules.fileCountThreshold || 3);\n\n    // Prüfen, ob genug Zeit seit dem letzten Commit vergangen ist\n    const timeThresholdMinutes = rules.timeThresholdMinutes || 30;\n    const timeThresholdMs = timeThresholdMinutes * 60 * 1000;\n    const hasTimeThresholdPassed = !lastCommitTime || \n        (Date.now() - lastCommitTime.getTime() >= timeThresholdMs);\n\n    // Commit auslösen, wenn die Bedingungen erfüllt sind\n    if (hasTimeThresholdPassed && (hasSpecificFileChanged || hasMinChanges || hasFileThreshold)) {\n        performAutoCommit();\n    }\n}\n\n/**\n * Führt den automatischen Commit-Prozess durch\n * @param {boolean} isManualTrigger Gibt an, ob der Commit manuell ausgelöst wurde\n * @param {number} retryCount Anzahl der bisherigen Versuche (für Retry-Logik)\n */\nasync function performAutoCommit(isManualTrigger = false, retryCount = 0) {\n    // Maximale Anzahl an Wiederholungsversuchen\n    const MAX_RETRIES = 3;\n    \n    try {\n        isCommitInProgress = true;\n        statusBarItem.text = \"$(sync~spin) Comitto: Commit wird vorbereitet...\";\n\n        // Git-Repository-Pfad bestimmen\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders) {\n            throw new Error('Kein Workspace gefunden.');\n        }\n\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings');\n        const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n        \n        try {\n            // Prüfen, ob Git initialisiert ist\n            try {\n                await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\n            } catch (error) {\n                throw new Error('Kein Git-Repository gefunden. Bitte initialisieren Sie zuerst ein Git-Repository.');\n            }\n            \n            // Dateien zum Staging hinzufügen\n            try {\n                await stageChanges(gitSettings.stageMode);\n            } catch (stageError) {\n                console.error('Fehler beim Stagen der Änderungen:', stageError);\n                showNotification(`Fehler beim Stagen: ${stageError.message}. Versuche Fallback-Methode...`, 'warning');\n                \n                // Fallback: Alle Änderungen stagen\n                await executeGitCommand('git add .', repoPath);\n            }\n            \n            // git status ausführen, um Änderungen zu erhalten\n            let gitStatus = '';\n            try {\n                gitStatus = await executeGitCommand('git status --porcelain', repoPath);\n            } catch (statusError) {\n                // Wenn git status fehlschlägt, versuchen wir es trotzdem weiter\n                console.warn('Fehler bei git status, versuche trotzdem fortzufahren:', statusError);\n                gitStatus = \"Fehler beim Abrufen des Status. Commit wird trotzdem versucht.\";\n            }\n            \n            if (!gitStatus.trim() && !isManualTrigger) {\n                isCommitInProgress = false;\n                statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n                changedFiles.clear();\n                return;\n            } else if (!gitStatus.trim() && isManualTrigger) {\n                throw new Error('Keine Änderungen zum Committen gefunden.');\n            }\n\n            // Änderungen abrufen für KI-Commit-Nachricht\n            let diffOutput = '';\n            try {\n                statusBarItem.text = \"$(sync~spin) Comitto: Diff wird berechnet...\";\n                diffOutput = await executeGitCommand('git diff --cached', repoPath);\n            } catch (diffError) {\n                // Bei Pufferüberlauf oder anderen Diff-Fehlern trotzdem weitermachen\n                console.warn('Fehler beim Abrufen des Diffs, versuche alternative Methode:', diffError);\n                \n                try {\n                    // Nur Liste der geänderten Dateien abrufen\n                    const fileList = await executeGitCommand('git diff --cached --name-status', repoPath);\n                    diffOutput = 'Diff konnte nicht vollständig abgerufen werden.\\nGeänderte Dateien:\\n' + fileList;\n                } catch (fileListError) {\n                    console.error('Auch die Dateiliste konnte nicht abgerufen werden:', fileListError);\n                    diffOutput = 'Diff-Inhalt konnte nicht abgerufen werden. Commit wird trotzdem versucht.';\n                }\n            }\n            \n            // Commit-Nachricht generieren\n            statusBarItem.text = \"$(sync~spin) Comitto: Generiere Commit-Nachricht...\";\n            let commitMessage = '';\n            \n            try {\n                commitMessage = await commands.generateCommitMessage(gitStatus, diffOutput);\n            } catch (messageError) {\n                console.error('Fehler bei der Commit-Nachricht-Generierung:', messageError);\n                \n                // Fallback-Nachricht mit Datum\n                const now = new Date();\n                const dateStr = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;\n                const timeStr = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n                \n                const gitSettings = config.get('gitSettings');\n                const language = gitSettings.commitMessageLanguage || 'en';\n                const style = gitSettings.commitMessageStyle || 'conventional';\n                \n                if (language === 'de') {\n                    commitMessage = style === 'conventional' ? \n                        `chore: Automatischer Commit vom ${dateStr} ${timeStr}` : \n                        `💾 Automatischer Commit vom ${dateStr} ${timeStr}`;\n                } else {\n                    commitMessage = style === 'conventional' ? \n                        `chore: automatic commit ${dateStr} ${timeStr}` : \n                        `💾 Automatic commit ${dateStr} ${timeStr}`;\n                }\n            }\n            \n            if (!commitMessage || commitMessage.trim().length === 0) {\n                commitMessage = \"chore: auto commit\";\n            }\n            \n            // Branch-Handling\n            try {\n                if (gitSettings.branch) {\n                    statusBarItem.text = \"$(sync~spin) Comitto: Prüfe Branch...\";\n                    \n                    // Aktuelle Branch bestimmen\n                    const currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\n                    \n                    // Nur wechseln, wenn nicht bereits auf dem Ziel-Branch\n                    if (currentBranch !== gitSettings.branch) {\n                        // Prüfen, ob der Branch existiert\n                        const branches = await executeGitCommand('git branch', repoPath);\n                        const branchExists = branches.includes(gitSettings.branch);\n                        \n                        if (branchExists) {\n                            // Zu existierendem Branch wechseln\n                            try {\n                                await executeGitCommand(`git checkout ${gitSettings.branch}`, repoPath);\n                                showNotification(`Zu Branch '${gitSettings.branch}' gewechselt.`, 'info');\n                            } catch (checkoutError) {\n                                // Fehler beim Checkout - möglicherweise ungespeicherte Änderungen\n                                showNotification(`Fehler beim Wechseln zu Branch '${gitSettings.branch}': ${checkoutError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n                            }\n                        } else {\n                            // Neuen Branch erstellen und wechseln\n                            try {\n                                await executeGitCommand(`git checkout -b ${gitSettings.branch}`, repoPath);\n                                showNotification(`Branch '${gitSettings.branch}' erstellt und ausgecheckt.`, 'info');\n                            } catch (createBranchError) {\n                                showNotification(`Fehler beim Erstellen des Branches '${gitSettings.branch}': ${createBranchError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n                            }\n                        }\n                    }\n                }\n            } catch (branchError) {\n                console.error('Fehler beim Branch-Handling:', branchError);\n                showNotification(`Fehler bei der Branch-Verwaltung: ${branchError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n            }\n            \n            // Git Commit durchführen\n            statusBarItem.text = \"$(sync~spin) Comitto: Führe Commit aus...\";\n            \n            try {\n                // Escapte Anführungszeichen für Shell\n                const escapedMessage = commitMessage.replace(/\"/g, '\\\\\"').replace(/`/g, \"'\");\n                await executeGitCommand(`git commit -m \"${escapedMessage}\"`, repoPath);\n                \n                // Benachrichtigungen anzeigen basierend auf den Einstellungen\n                const notificationSettings = config.get('notifications');\n                \n                if (!isManualTrigger && notificationSettings.onCommit) {\n                    showNotification(`Automatischer Commit durchgeführt: ${commitMessage}`, 'info');\n                } else if (isManualTrigger) {\n                    showNotification(`Manueller Commit durchgeführt: ${commitMessage}`, 'info');\n                }\n                \n                // Reset der Änderungsverfolgung\n                lastCommitTime = new Date();\n                changedFiles.clear();\n            } catch (commitError) {\n                console.error('Commit fehlgeschlagen:', commitError);\n                \n                // Wenn nichts zum Committen da ist, ist das kein echter Fehler\n                if (commitError.message.includes('nothing to commit')) {\n                    showNotification('Keine Änderungen zum Committen gefunden.', 'info');\n                    isCommitInProgress = false;\n                    statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n                    changedFiles.clear();\n                    return;\n                }\n                \n                // Bei anderen Fehlern versuchen, es noch einmal\n                if (retryCount < MAX_RETRIES) {\n                    showNotification(`Commit fehlgeschlagen: ${commitError.message}. Versuche es erneut...`, 'warning');\n                    setTimeout(() => {\n                        performAutoCommit(isManualTrigger, retryCount + 1);\n                    }, 2000); // 2 Sekunden Verzögerung vor dem Retry\n                    return;\n                } else {\n                    throw new Error(`Commit fehlgeschlagen nach ${MAX_RETRIES} Versuchen: ${commitError.message}`);\n                }\n            }\n            \n            // Automatischen Push ausführen, wenn konfiguriert\n            if (gitSettings.autoPush) {\n                try {\n                    await performAutoPush(repoPath);\n                } catch (pushError) {\n                    console.error('Push fehlgeschlagen:', pushError);\n                    showNotification(`Push fehlgeschlagen: ${pushError.message}`, 'error');\n                }\n            }\n            \n            // Statusleiste aktualisieren\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        } catch (error) {\n            console.error('Git-Befehl fehlgeschlagen:', error);\n            \n            // Fehlerbehandlung verbessern\n            let errorMessage = error.message;\n            if (errorMessage.includes('fatal: not a git repository')) {\n                errorMessage = 'Dieses Verzeichnis ist kein Git-Repository. Bitte initialisieren Sie zuerst ein Git-Repository.';\n            } else if (errorMessage.includes('fatal: unable to access')) {\n                errorMessage = 'Fehler beim Zugriff auf das Remote-Repository. Bitte prüfen Sie Ihre Netzwerkverbindung und Zugangsrechte.';\n            } else if (errorMessage.includes('maxBuffer') || errorMessage.includes('zu groß')) {\n                errorMessage = 'Zu viele oder zu große Änderungen für die automatische Verarbeitung. Bitte führen Sie einen manuellen Commit durch oder reduzieren Sie die Anzahl der Änderungen.';\n            }\n            \n            // Benachrichtigung anzeigen\n            const notificationSettings = config.get('notifications');\n            if (notificationSettings.onError) {\n                showNotification(`Git-Befehl fehlgeschlagen: ${errorMessage}`, 'error');\n            }\n            \n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n            throw error;\n        }\n    } catch (error) {\n        console.error('Comitto Fehler:', error);\n        \n        // Benachrichtigung anzeigen\n        const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\n        if (notificationSettings.onError) {\n            showNotification(`Comitto Fehler: ${error.message}`, 'error');\n        }\n        \n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n    } finally {\n        isCommitInProgress = false;\n    }\n}\n\n/**\n * Führt einen automatischen Push durch\n * @param {string} repoPath Der Pfad zum Git-Repository\n */\nasync function performAutoPush(repoPath) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const notificationSettings = config.get('notifications');\n    const MAX_PUSH_RETRIES = 2;\n    \n    statusBarItem.text = \"$(sync~spin) Comitto: Pushe Änderungen...\";\n    \n    // Aktuelle Branch bestimmen\n    let currentBranch;\n    try {\n        currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\n    } catch (error) {\n        throw new Error(`Fehler beim Ermitteln des aktuellen Branches: ${error.message}`);\n    }\n    \n    // Push-Optionen basierend auf Einstellungen\n    const gitSettings = config.get('gitSettings');\n    const pushOptions = gitSettings.pushOptions || '';\n    const pushCommand = `git push origin ${currentBranch} ${pushOptions}`.trim();\n    \n    let pushSuccess = false;\n    let pushError = null;\n    \n    // Versuche es mehrfach mit Push\n    for (let i = 0; i <= MAX_PUSH_RETRIES; i++) {\n        try {\n            await executeGitCommand(pushCommand, repoPath);\n            pushSuccess = true;\n            break;\n        } catch (error) {\n            pushError = error;\n            console.warn(`Push-Versuch ${i+1} fehlgeschlagen:`, error);\n            \n            // Bei bestimmten Fehlern erneut versuchen\n            if (error.message.includes('Connection timed out') || \n                error.message.includes('Could not resolve host') ||\n                error.message.includes('failed to push some refs')) {\n                \n                // Kurze Pause vor dem nächsten Versuch\n                if (i < MAX_PUSH_RETRIES) {\n                    await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1)));\n                    continue;\n                }\n            }\n            \n            // Bei anderen Fehlern oder nach allen Versuchen abbrechen\n            break;\n        }\n    }\n    \n    // Ergebnis verarbeiten\n    if (pushSuccess) {\n        if (notificationSettings.onPush) {\n            showNotification(`Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\n        }\n    } else if (pushError) {\n        // Versuche ein Pull bei bestimmten Fehlern\n        if (pushError.message.includes('failed to push some refs') || \n            pushError.message.includes('rejected') ||\n            pushError.message.includes('non-fast-forward')) {\n            \n            try {\n                showNotification('Push fehlgeschlagen. Versuche Pull...', 'warning');\n                await executeGitCommand(`git pull origin ${currentBranch}`, repoPath);\n                \n                // Erneut versuchen zu pushen\n                await executeGitCommand(pushCommand, repoPath);\n                \n                if (notificationSettings.onPush) {\n                    showNotification(`Pull & Push erfolgreich: Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\n                }\n            } catch (pullError) {\n                throw new Error(`Push fehlgeschlagen und Pull konnte nicht ausgeführt werden: ${pullError.message}`);\n            }\n        } else {\n            throw pushError;\n        }\n    }\n}\n\n/**\n * Führt das Staging von Dateien basierend auf dem konfigurieren Modus aus\n * @param {string} mode Der Staging-Modus ('all', 'specific', 'prompt')\n * @returns {Promise<void>}\n */\nasync function stageChanges(mode) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        throw new Error('Kein Workspace gefunden.');\n    }\n    \n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = config.get('gitSettings');\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n    \n    // Bei manuellem Modus Benutzer nach Dateien fragen\n    if (mode === 'prompt') {\n        // Git Status abrufen\n        const gitStatusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!gitStatusOutput.trim()) {\n            throw new Error('Keine Änderungen zum Stagen gefunden.');\n        }\n        \n        // Dateien parsen\n        const changedFilesList = gitStatusOutput.split('\\n')\n            .filter(line => line.trim().length > 0)\n            .map(line => {\n                const status = line.substring(0, 2).trim();\n                const filePath = line.substring(3).trim();\n                return { status, filePath };\n            });\n        \n        // Dateien zur Auswahl anbieten\n        const selectedFiles = await vscode.window.showQuickPick(\n            changedFilesList.map(file => ({\n                label: file.filePath,\n                description: ui.getStatusDescription(file.status),\n                picked: true // Standardmäßig alle auswählen\n            })),\n            {\n                canPickMany: true,\n                placeHolder: 'Dateien zum Stagen auswählen'\n            }\n        );\n        \n        if (!selectedFiles || selectedFiles.length === 0) {\n            throw new Error('Keine Dateien ausgewählt.');\n        }\n        \n        // Ausgewählte Dateien stagen\n        for (const file of selectedFiles) {\n            await executeGitCommand(`git add \"${file.label}\"`, repoPath);\n        }\n        \n        return;\n    }\n    \n    // Spezifische Dateien basierend auf Mustern stagen\n    if (mode === 'specific') {\n        const patterns = gitSettings.specificStagingPatterns || ['**/*.js', '**/*.ts', '**/*.json'];\n        \n        for (const pattern of patterns) {\n            try {\n                // Bei Windows können wir Probleme mit den Pfadtrennzeichen haben,\n                // daher verwenden wir ein sicheres Muster für die Ausführung\n                const safePattern = pattern.replace(/\\\\/g, '/');\n                await executeGitCommand(`git add \"${safePattern}\"`, repoPath);\n            } catch (error) {\n                console.error(`Fehler beim Stagen von Muster ${pattern}:`, error);\n                // Wir werfen den Fehler nicht weiter, sondern versuchen andere Muster\n            }\n        }\n        \n        return;\n    }\n    \n    // Standardmäßig alle Änderungen stagen\n    await executeGitCommand('git add .', repoPath);\n}\n\n/**\n * Zeigt eine Benachrichtigung an, wenn entsprechend konfiguriert,\n * und fügt sie immer zum Debug-Log hinzu\n * @param {string} message Die anzuzeigende Nachricht\n * @param {string} type Der Typ der Nachricht (info, warning, error)\n */\nfunction showNotification(message, type = 'info') {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = config.get('uiSettings');\n    const debug = config.get('debug');\n    \n    // Zum Debug-Log hinzufügen\n    addDebugLog(message, type);\n    \n    // Benachrichtigung anzeigen, wenn aktiviert\n    if (uiSettings && uiSettings.showNotifications) {\n        switch (type) {\n            case 'info':\n                vscode.window.showInformationMessage(message);\n                break;\n            case 'warning':\n                vscode.window.showWarningMessage(message);\n                break;\n            case 'error':\n                vscode.window.showErrorMessage(message);\n                break;\n            default:\n                vscode.window.showInformationMessage(message);\n        }\n    }\n    \n    // Status in der Statusleiste aktualisieren\n    if (type === 'error' && statusBarItem) {\n        const originalText = statusBarItem.text;\n        statusBarItem.text = \"$(error) Comitto: Fehler\";\n        \n        // Nach 3 Sekunden zurücksetzen\n        setTimeout(() => {\n            if (statusBarItem) {\n                statusBarItem.text = originalText;\n            }\n        }, 3000);\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit dem konfigurierten KI-Modell\n * @param {string} gitStatus Die Ausgabe von git status\n * @param {string} diffOutput Die Ausgabe von git diff\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateCommitMessage(gitStatus, diffOutput) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const aiProvider = config.get('aiProvider');\n    const gitSettings = config.get('gitSettings');\n    \n    // Änderungen in ein lesbares Format bringen\n    const changes = gitStatus.split('\\n')\n        .filter(line => line.trim().length > 0)\n        .map(line => {\n            const status = line.substring(0, 2).trim();\n            const filePath = line.substring(3).trim();\n            return `${getStatusText(status)} ${filePath}`;\n        })\n        .join('\\n');\n    \n    // Prompt-Vorlage mit Änderungen füllen\n    let promptTemplate = config.get('promptTemplate');\n    promptTemplate = promptTemplate.replace('{changes}', changes);\n    \n    // Sprache für die Commit-Nachricht einfügen\n    const language = gitSettings.commitMessageLanguage || 'de';\n    if (!promptTemplate.includes(language)) {\n        promptTemplate += `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\n    }\n    \n    // Commit-Stil einfügen\n    const style = gitSettings.commitMessageStyle || 'conventional';\n    if (style === 'conventional' && !promptTemplate.includes('conventional')) {\n        promptTemplate += `\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).`;\n    }\n    \n    // Diff-Informationen für komplexere Abrechnungen hinzufügen\n    if (diffOutput && diffOutput.length > 0) {\n        // Eine aggressiv gekürzte Version des Diffs anhängen, um den Kontext zu verbessern,\n        // aber nicht zu viel Token zu verwenden\n        const maxDiffLength = 2000; // Maximale Anzahl der Zeichen des Diffs reduziert auf 2000\n        \n        // Sehr große Diffs erkennen und Warnung ausgeben\n        if (diffOutput.length > 100000) {\n            console.warn(`Extrem großer Diff (${diffOutput.length} Zeichen) wird stark gekürzt.`);\n        }\n        \n        // Intelligente Kürzung: Nur die ersten Änderungen jeder Datei\n        let shortenedDiff = '';\n        \n        try {\n            // Aufteilen nach Dateiänderungen (beginnen mit 'diff --git')\n            const fileChanges = diffOutput.split('diff --git');\n            \n            // Die ersten Änderungen für jede Datei extrahieren (maximal 5 Dateien)\n            const maxFiles = 5;\n            const filesToInclude = fileChanges.slice(0, maxFiles);\n            \n            filesToInclude.forEach((fileChange, index) => {\n                if (index === 0 && !fileChange.trim()) return; // Erstes Element kann leer sein\n                \n                // Jede Dateiänderung auf maximal 400 Zeichen beschränken\n                const maxPerFile = 400;\n                const truncatedChange = fileChange.length > maxPerFile \n                    ? fileChange.substring(0, maxPerFile) + '...' \n                    : fileChange;\n                \n                shortenedDiff += (index > 0 ? 'diff --git' : '') + truncatedChange + '\\n';\n            });\n            \n            // Kürzen, wenn insgesamt zu lang\n            if (shortenedDiff.length > maxDiffLength) {\n                shortenedDiff = shortenedDiff.substring(0, maxDiffLength);\n            }\n            \n            shortenedDiff += `\\n[Diff wurde gekürzt, insgesamt ${diffOutput.length} Zeichen in ${fileChanges.length} Dateien]`;\n        } catch (error) {\n            console.error('Fehler beim Kürzen des Diffs:', error);\n            shortenedDiff = diffOutput.substring(0, maxDiffLength) + \n                `...\\n[Diff wurde einfach gekürzt, insgesamt ${diffOutput.length} Zeichen]`;\n        }\n        \n        promptTemplate += `\\n\\nHier ist ein Ausschnitt der konkreten Änderungen:\\n\\n${shortenedDiff}`;\n    }\n    \n    // Verschiedene KI-Provider unterstützen\n    switch (aiProvider) {\n        case 'ollama':\n            return await generateWithOllama(promptTemplate);\n        case 'openai':\n            return await generateWithOpenAI(promptTemplate);\n        case 'anthropic':\n            return await generateWithAnthropic(promptTemplate);\n        default:\n            throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit Ollama\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithOllama(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const endpoint = config.get('ollama').endpoint || 'http://localhost:11434/api/generate';\n    \n    // Backward-Kompatibilität: Prüfen, ob die fehlerhafte ollama-model Konfiguration verwendet wird\n    // und falls ja, diese auf die korrekte ollama Konfiguration übertragen\n    let ollamaConfig = config.get('ollama') || {};\n    let model = ollamaConfig.model;\n    const ollamaModelOld = config.get('ollama-model');\n    \n    if (!model && ollamaModelOld) {\n        // Alte, fehlerhafte Konfiguration gefunden, korrigieren\n        model = ollamaModelOld;\n        // Wert auf die korrekte Konfiguration übertragen\n        ollamaConfig.model = ollamaModelOld;\n        await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n        // Fehlerhafte Konfiguration zurücksetzen\n        await config.update('ollama-model', undefined, vscode.ConfigurationTarget.Global);\n        \n        showNotification('Korrektur der Ollama-Modell-Konfiguration durchgeführt.', 'info');\n    }\n    \n    // Fallback, falls kein Modell konfiguriert ist\n    model = model || 'granite3.3:2b';\n    \n    try {\n        // Statusleiste aktualisieren\n        updateStatusBarProgress('Ollama generiert', 0, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit Ollama (${model}) generiert...`, 'info', false);\n        \n        console.log(`Verwende Ollama-Modell: ${model} auf ${endpoint}`);\n        \n        // HTTP-Anfrage vorbereiten und Startzeit messen\n        const requestStart = Date.now();\n        \n        // Prüfen, ob der Endpunkt /api/generate enthält - verschiedene API-Pfade\n        const apiEndpoint = endpoint.endsWith('/api/generate') ? endpoint : \n                           (endpoint.endsWith('/') ? `${endpoint}api/generate` : `${endpoint}/api/generate`);\n        \n        const response = await axios.post(apiEndpoint, {\n            model: model,\n            prompt: prompt,\n            stream: false,\n            options: {\n                temperature: 0.3,\n                num_predict: 100\n            }\n        });\n        \n        const requestDuration = ((Date.now() - requestStart) / 1000).toFixed(2);\n        updateStatusBarProgress('Ollama generiert', 100, `Fertig in ${requestDuration}s`);\n        \n        let commitMessage = '';\n        \n        if (response.data && typeof response.data.response === 'string') {\n            commitMessage = response.data.response.trim();\n            \n            // Debugging-Informationen\n            const evalDuration = response.data.eval_duration ? \n                (response.data.eval_duration / 1000000000).toFixed(2) + 's' : 'n/a';\n            const totalDuration = response.data.total_duration ? \n                (response.data.total_duration / 1000000000).toFixed(2) + 's' : requestDuration + 's';\n            \n            console.log(`Ollama-Antwort erhalten. Eval-Zeit: ${evalDuration}, Gesamt-Zeit: ${totalDuration}`);\n            showNotification(`Commit-Nachricht mit Ollama generiert (${totalDuration}).`, 'info', false);\n            \n            // Entferne Anführungszeichen am Anfang und Ende\n            commitMessage = commitMessage.replace(/^[\"']|[\"']$/g, '');\n            \n            // Beschränke auf eine Zeile\n            const firstLine = commitMessage.split('\\n')[0];\n            if (firstLine.length > 5) { // Nur verwenden, wenn die erste Zeile sinnvoll ist\n                commitMessage = firstLine;\n            }\n            \n            // Kürze auf max. 72 Zeichen (Git-Konvention)\n            if (commitMessage.length > 72) {\n                commitMessage = commitMessage.substring(0, 72);\n            }\n            \n            return commitMessage;\n        } else {\n            throw new Error('Unerwartetes Antwortformat von Ollama');\n        }\n    } catch (error) {\n        console.error('Ollama API-Fehler:', error.response?.data || error.message);\n        \n        // Statusleiste aktualisieren\n        updateStatusBarProgress('Ollama-Fehler', -1);\n        \n        // Detaillierte Fehlermeldung\n        let errorMessage = 'Fehler bei der Kommunikation mit Ollama';\n        \n        if (error.code === 'ECONNREFUSED') {\n            errorMessage = 'Verbindung zu Ollama fehlgeschlagen. Bitte stellen Sie sicher, dass Ollama läuft und erreichbar ist.';\n        } else if (error.code === 'ETIMEDOUT' || error.code === 'TIMEOUT') {\n            errorMessage = 'Zeitüberschreitung bei der Anfrage an Ollama. Bitte prüfen Sie die Verbindung oder versuchen Sie ein kleineres Modell.';\n        } else if (error.response?.status === 404) {\n            errorMessage = `Das Ollama-Modell \"${model}\" wurde nicht gefunden. Bitte stellen Sie sicher, dass das Modell installiert ist.`;\n            \n            // Zusätzliche Hilfe zur Installation anbieten\n            showNotification(`Modell \"${model}\" nicht gefunden. Installieren Sie es mit: ollama pull ${model}`, 'warning');\n        } else if (error.response?.data) {\n            errorMessage = `Ollama-Fehler: ${error.response.data.error || JSON.stringify(error.response.data)}`;\n        } else {\n            errorMessage = `Ollama-Fehler: ${error.message}`;\n        }\n        \n        showNotification(errorMessage, 'error');\n        \n        // Fallback: Einfache, generische Commit-Nachricht\n        return \"chore: Änderungen commited\";\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit OpenAI\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithOpenAI(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const apiKey = config.get('openai.apiKey');\n    const model = config.get('openai.model');\n    \n    if (!apiKey) {\n        throw new Error('OpenAI API-Schlüssel nicht konfiguriert');\n    }\n    \n    try {\n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n            model: model,\n            messages: [\n                { role: 'system', content: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.' },\n                { role: 'user', content: prompt }\n            ],\n            temperature: 0.3,\n            max_tokens: 100\n        }, {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        if (response.data && response.data.choices && response.data.choices[0]) {\n            return response.data.choices[0].message.content.trim()\n                .replace(/^[\"']|[\"']$/g, '')\n                .replace(/\\n/g, ' ');\n        } else {\n            throw new Error('Unerwartetes Antwortformat von OpenAI');\n        }\n    } catch (error) {\n        console.error('OpenAI API-Fehler:', error.response?.data || error.message);\n        throw new Error(`Fehler bei der Kommunikation mit OpenAI: ${error.message}`);\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit Anthropic\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithAnthropic(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const apiKey = config.get('anthropic.apiKey');\n    const model = config.get('anthropic.model');\n    \n    if (!apiKey) {\n        throw new Error('Anthropic API-Schlüssel nicht konfiguriert');\n    }\n    \n    try {\n        const response = await axios.post('https://api.anthropic.com/v1/messages', {\n            model: model,\n            max_tokens: 100,\n            temperature: 0.3,\n            system: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.',\n            messages: [\n                { role: 'user', content: prompt }\n            ]\n        }, {\n            headers: {\n                'x-api-key': apiKey,\n                'anthropic-version': '2023-06-01',\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        if (response.data && response.data.content && response.data.content[0]) {\n            return response.data.content[0].text.trim()\n                .replace(/^[\"']|[\"']$/g, '')\n                .replace(/\\n/g, ' ');\n        } else {\n            throw new Error('Unerwartetes Antwortformat von Anthropic');\n        }\n    } catch (error) {\n        console.error('Anthropic API-Fehler:', error.response?.data || error.message);\n        throw new Error(`Fehler bei der Kommunikation mit Anthropic: ${error.message}`);\n    }\n}\n\n/**\n * Richtet eine automatische Hintergrundüberwachung ein\n * @param {vscode.ExtensionContext} context \n */\nfunction setupAutoBackgroundMonitoring(context) {\n    // Überwachung für Git-Status (alle 10 Minuten)\n    setInterval(async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            if (!config.get('autoCommitEnabled')) return;\n            \n            const debugSettings = config.get('debug') || {};\n            \n            // Git-Repository-Status prüfen\n            const hasGit = await checkGitRepository(context);\n            if (!hasGit) {\n                addDebugLog('Hintergrundprüfung: Kein aktives Git-Repository gefunden.', 'warning');\n                return;\n            }\n            \n            // Prüfen, ob ungespeicherte Änderungen vorliegen, die noch nicht committed wurden\n            const workspaceFolders = vscode.workspace.workspaceFolders;\n            if (!workspaceFolders) return;\n            \n            const repoPath = workspaceFolders[0].uri.fsPath;\n            const gitStatus = await executeGitCommand('git status --porcelain', repoPath);\n            \n            if (gitStatus.trim() && changedFiles.size === 0) {\n                // Es gibt Änderungen, die nicht in changedFiles erfasst wurden\n                addDebugLog('Hintergrundprüfung: Nicht erfasste Änderungen gefunden.', 'info');\n                \n                // Dateien dem Tracking hinzufügen\n                gitStatus.split('\\n')\n                    .filter(line => line.trim().length > 0)\n                    .forEach(line => {\n                        const filePath = line.substring(3).trim();\n                        if (filePath && !isFileIgnored(filePath)) {\n                            // Relativen Pfad erstellen, sicherstellen dass dieser valide ist\n                            const absolutePath = path.resolve(repoPath, filePath);\n                            changedFiles.add(absolutePath);\n                        }\n                    });\n                \n                if (debugSettings.extendedLogging) {\n                    addDebugLog(`Hintergrund-Synchronisierung: ${changedFiles.size} Dateien werden nun überwacht.`, 'info');\n                }\n                \n                // Trigger-Check ausführen\n                if (config.get('autoCommitEnabled')) {\n                    checkCommitTrigger();\n                }\n            }\n        } catch (error) {\n            console.error('Fehler bei der Hintergrundüberwachung:', error);\n            addDebugLog(`Fehler bei der Hintergrundüberwachung: ${error.message}`, 'error');\n        }\n    }, 10 * 60 * 1000); // 10 Minuten\n    \n    // Regelmäßiger Gesundheitscheck\n    setInterval(() => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            if (!config.get('autoCommitEnabled')) return;\n            \n            const debugSettings = config.get('debug') || {};\n            \n            // Prüfen, ob der Watcher noch aktiv ist\n            if (!fileWatcher && config.get('autoCommitEnabled')) {\n                addDebugLog('Gesundheitscheck: FileWatcher ist nicht aktiv. Starte neu...', 'warning');\n                setupFileWatcher(context);\n            }\n            \n            // Prüfen, ob der Interval-Timer noch aktiv ist\n            const triggerRules = config.get('triggerRules');\n            if (triggerRules.onInterval && !intervalTimer && config.get('autoCommitEnabled')) {\n                addDebugLog('Gesundheitscheck: Interval-Timer ist nicht aktiv. Starte neu...', 'warning');\n                setupIntervalTrigger(triggerRules.intervalMinutes);\n            }\n            \n            if (debugSettings.extendedLogging) {\n                addDebugLog('Gesundheitscheck durchgeführt.', 'info');\n            }\n        } catch (error) {\n            console.error('Fehler beim Gesundheitscheck:', error);\n            addDebugLog(`Fehler beim Gesundheitscheck: ${error.message}`, 'error');\n        }\n    }, 30 * 60 * 1000); // 30 Minuten\n}\n\nfunction deactivate() {\n    disableFileWatcher();\n    if (statusBarItem) {\n        statusBarItem.dispose();\n    }\n}\n\n// Notwendige Exporte für externe Module\nmodule.exports = {\n    activate,\n    deactivate,\n    generateWithOllama,\n    generateWithOpenAI,\n    generateWithAnthropic\n}; ","module.exports = require(\"os\");","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst ui = require('./ui'); // Importiere UI-Modul für Hilfsfunktionen\nconst { executeGitCommand, getStatusText } = require('./utils'); // Hinzufügen von getStatusText zum Import\nconst { generateWithOllama, generateWithOpenAI, generateWithAnthropic } = require('./extension');\nconst axios = require('axios');\n\n// Globale Variable für die Statusleiste, wird in registerCommands gesetzt\nglobal.statusBarItem = null;\n\n/**\n * Registriert die Befehle für die UI-Interaktionen\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers UI-Provider-Instanzen\n * @param {vscode.StatusBarItem} statusBarItem Das Statusleisten-Element\n * @param {Function} setupFileWatcher Funktion zum Einrichten des File Watchers\n * @param {Function} disableFileWatcher Funktion zum Deaktivieren des File Watchers\n * @param {Function} performAutoCommit Funktion zum Ausführen des Commits\n * @param {Function} showNotification Funktion zum Anzeigen von Benachrichtigungen\n */\nfunction registerCommands(context, providers, statusBarItem, setupFileWatcher, disableFileWatcher, performAutoCommit, showNotification) {\n    // Globale Statusleiste setzen\n    global.statusBarItem = statusBarItem;\n    // Globale showNotification-Funktion setzen\n    global.showNotification = showNotification;\n    \n    // #region Kernbefehle (vorher in extension.js)\n\n    // Befehl zum Öffnen der Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.openSettings', () => {\n        vscode.commands.executeCommand('workbench.action.openSettings', 'comitto');\n    }));\n\n    // Befehl zum Aktualisieren der Einstellungsansicht\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.refreshSettings', () => {\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        showNotification('Comitto-Einstellungen wurden aktualisiert.', 'info');\n    }));\n\n    // Befehl zum Aktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.enableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', true, vscode.ConfigurationTarget.Global);\n        setupFileWatcher(context); // Übergabe des Kontexts ist hier wichtig\n        statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind aktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Deaktivieren der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.disableAutoCommit', async () => {\n        await vscode.workspace.getConfiguration('comitto').update('autoCommitEnabled', false, vscode.ConfigurationTarget.Global);\n        disableFileWatcher();\n        statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.quickActionsProvider.refresh();\n        }\n        \n        const config = vscode.workspace.getConfiguration('comitto');\n        const uiSettings = config.get('uiSettings');\n        if (uiSettings && uiSettings.showNotifications) {\n            showNotification('Automatische Commits sind deaktiviert.', 'info');\n        }\n    }));\n\n    // Befehl zum Umschalten der automatischen Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoCommit', async () => {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const isEnabled = !config.get('autoCommitEnabled');\n        // Rufe die spezifischen enable/disable Befehle auf, um die Logik nicht zu duplizieren\n        if (isEnabled) {\n            await vscode.commands.executeCommand('comitto.enableAutoCommit');\n        } else {\n            await vscode.commands.executeCommand('comitto.disableAutoCommit');\n        }\n    }));\n\n    // Befehl zum manuellen Ausführen eines KI-generierten Commits\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.performManualCommit', async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            const uiSettings = config.get('uiSettings');\n            \n            // Optional Bestätigung anfordern\n            let shouldProceed = true;\n            if (uiSettings && uiSettings.confirmBeforeCommit) {\n                shouldProceed = await vscode.window.showInformationMessage(\n                    'Möchten Sie einen manuellen KI-Commit durchführen?',\n                    { modal: true }, // Macht das Dialogfeld modal\n                    'Ja'\n                ) === 'Ja';\n            }\n            \n            if (shouldProceed) {\n                await performAutoCommit(true); // 'true' signalisiert manuellen Trigger\n                // Die Erfolgsmeldung wird jetzt innerhalb von performAutoCommit angezeigt\n            }\n        } catch (error) {\n            showNotification(`Fehler beim manuellen Commit: ${error.message}`, 'error');\n        }\n    }));\n\n    // #endregion Kernbefehle\n\n    // #region UI & Konfigurationsbefehle\n\n    // KI-Provider auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAiProvider', async () => {\n        const providerOptions = [\n            { label: 'Ollama (lokal)', id: 'ollama' },\n            { label: 'OpenAI', id: 'openai' },\n            { label: 'Anthropic Claude', id: 'anthropic' }\n        ];\n        \n        const selected = await vscode.window.showQuickPick(providerOptions, {\n            placeHolder: 'KI-Provider auswählen',\n            title: 'Comitto - KI-Provider auswählen'\n        });\n        \n        if (selected) {\n            await vscode.workspace.getConfiguration('comitto').update('aiProvider', selected.id, vscode.ConfigurationTarget.Global);\n            if (providers) {\n                providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n            showNotification(`KI-Provider auf \"${selected.label}\" gesetzt.`, 'info');\n        }\n    }));\n\n    // Ollama-Modell bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaModel', async () => { ... }));\n\n    // Ollama-Endpoint bearbeiten (ersetzt durch configureOllamaSettings)\n    // context.subscriptions.push(vscode.commands.registerCommand('comitto.editOllamaEndpoint', async () => { ... }));\n\n    // Ollama-Einstellungen konfigurieren (neuer kombinierter Befehl)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureOllamaSettings', async () => {\n        const success = await configureOllamaSettings();\n        if (success && providers) {\n            providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n        }\n    }));\n\n    // OpenAI-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectOpenAIModel', async () => {\n        await handleOpenAIModelSelectionCommand(); // Ruft die dedizierte Funktion auf\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // OpenAI-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editOpenAIKey', async () => {\n        await handleEditOpenAIKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Modell auswählen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectAnthropicModel', async () => {\n        await handleSelectAnthropicModelCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Anthropic-Schlüssel bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editAnthropicKey', async () => {\n        await handleEditAnthropicKeyCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // #region Trigger-Regeln Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFileCountThreshold', async () => {\n        await handleEditTriggerRuleCommand('fileCountThreshold', 'Datei-Anzahl Schwellenwert', 'z.B. 3', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editMinChangeCount', async () => {\n        await handleEditTriggerRuleCommand('minChangeCount', 'Änderungs-Anzahl Schwellenwert', 'z.B. 10', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editTimeThreshold', async () => {\n        await handleEditTriggerRuleCommand('timeThresholdMinutes', 'Zeit-Schwellwert (Minuten)', 'z.B. 30', 'number');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editFilePatterns', async () => {\n        await handleEditTriggerRuleCommand('filePatterns', 'Dateimuster (kommagetrennt)', 'z.B. **/*.js, **/*.ts', 'patterns');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editSpecificFiles', async () => {\n        await handleEditTriggerRuleCommand('specificFiles', 'Spezifische Dateien (kommagetrennt)', 'z.B. package.json, README.md', 'files');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editIntervalMinutes', async () => {\n        await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall für Intervall-Trigger (Minuten)', 'z.B. 15', 'number');\n    }));\n\n    // Neue Toggle-Befehle für Trigger-Regeln\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnSave', async () => {\n        await handleToggleTriggerRuleCommand('onSave', 'Speichern-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnInterval', async () => {\n        await handleToggleTriggerRuleCommand('onInterval', 'Intervall-Trigger');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleOnBranchSwitch', async () => {\n        await handleToggleTriggerRuleCommand('onBranchSwitch', 'Branch-Wechsel-Trigger');\n    }));\n    // #endregion\n\n    // #region Git-Einstellungen Bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleAutoPush', async () => {\n        await handleToggleGitSettingCommand('autoPush', 'Auto-Push');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editBranch', async () => {\n        await handleEditGitSettingCommand('branch', 'Branch für Commits', 'Leer lassen für aktuellen Branch');\n    }));\n    \n    // Befehle zum Stagen von Änderungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.stageAll', async () => {\n        try {\n            await handleStageAllCommand();\n            if (providers) {\n                providers.statusProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n        } catch (error) {\n            showNotification(`Fehler beim Stagen aller Änderungen: ${error.message}`, 'error');\n        }\n    }));\n    \n    context.subscriptions.push(vscode.commands.registerCommand('comitto.stageSelected', async () => {\n        try {\n            await handleStageSelectedCommand();\n            if (providers) {\n                providers.statusProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n        } catch (error) {\n            showNotification(`Fehler beim Stagen ausgewählter Änderungen: ${error.message}`, 'error');\n        }\n    }));\n    \n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitLanguage', async () => {\n        await handleCommitMessageLanguageCommand(); // Behält eigene Logik wegen Prompt-Anpassung\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectCommitStyle', async () => {\n        await handleSelectGitSettingCommand('commitMessageStyle', 'Commit-Nachrichtenstil', [\n            { label: 'Conventional Commits', value: 'conventional' },\n            { label: 'Gitmoji', value: 'gitmoji' }\n        ]);\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleUseGitignore', async () => {\n        await handleToggleGitSettingCommand('useGitignore', 'Gitignore-Verwendung');\n        // Eventuell gitignore neu laden\n        const commandExists = await vscode.commands.getCommands(true).then(cmds => cmds.includes('comitto.internal.reloadGitignore'));\n        if (commandExists) {\n            vscode.commands.executeCommand('comitto.internal.reloadGitignore');\n        } else {\n            console.warn('Befehl comitto.internal.reloadGitignore nicht gefunden.');\n        }\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectStageMode', async () => {\n        await handleSelectStageModeCommand(); // Behält eigene Logik wegen Pattern-Frage\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editStagingPatterns', async () => {\n        await handleEditStagingPatternsCommand(); // Behält eigene Logik\n    }));\n    // #endregion\n\n    // #region UI-Einstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleSimpleMode', async () => {\n        await handleToggleUISettingCommand('simpleMode', 'Einfacher Modus');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleConfirmBeforeCommit', async () => {\n        await handleToggleUISettingCommand('confirmBeforeCommit', 'Bestätigung vor Commit');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleShowNotifications', async () => {\n        await handleToggleUISettingCommand('showNotifications', 'Benachrichtigungen anzeigen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.selectTheme', async () => {\n        await handleSelectThemeCommand();\n    }));\n    // #endregion\n\n    // #region Benachrichtigungseinstellungen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnCommit', async () => {\n        await handleToggleNotificationSettingCommand('onCommit', 'Commit-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnPush', async () => {\n        await handleToggleNotificationSettingCommand('onPush', 'Push-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnError', async () => {\n        await handleToggleNotificationSettingCommand('onError', 'Fehler-Benachrichtigungen');\n    }));\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.toggleNotificationOnTriggerFired', async () => {\n        await handleToggleNotificationSettingCommand('onTriggerFired', 'Trigger-Benachrichtigungen');\n    }));\n    // #endregion\n\n    // Prompt-Vorlage bearbeiten\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.editPromptTemplate', async () => {\n        await handleEditPromptTemplateCommand();\n        if (providers) providers.settingsProvider.refresh();\n    }));\n\n    // Dashboard anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showDashboard', async () => {\n        await handleShowDashboardCommand(context);\n    }));\n\n    // KI-Provider konfigurieren (kombiniert Auswahl und spezifische Konfig)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureAIProvider', async () => {\n        await handleConfigureAIProviderCommand(providers);\n    }));\n\n    // Trigger konfigurieren (grafisch oder direkt)\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.configureTriggers', async () => {\n        await handleConfigureTriggersCommand(context, providers);\n    }));\n\n    // Einfache Benutzeroberfläche anzeigen\n    context.subscriptions.push(vscode.commands.registerCommand('comitto.showSimpleUI', () => {\n        showSimpleUI(context, providers);\n    }));\n\n    // #endregion UI & Konfigurationsbefehle\n}\n\n// ==========================================================================\n// HILFSFUNKTIONEN FÜR BEFEHLE\n// ==========================================================================\n\n// #region Generische Handler für Einstellungen\n\n/**\n * Generischer Handler zum Bearbeiten einer Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n * @param {'number'|'patterns'|'files'} inputType Typ der Eingabe für Validierung/Parsing.\n */\nasync function handleEditTriggerRuleCommand(ruleKey, promptText, placeHolder, inputType) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = { ...config.get('triggerRules') }; // Kopie erstellen\n    const currentValue = rules[ruleKey];\n\n    let valueToString = '';\n    if (inputType === 'patterns' || inputType === 'files') {\n        valueToString = Array.isArray(currentValue) ? currentValue.join(', ') : '';\n    } else {\n        valueToString = currentValue !== undefined ? currentValue.toString() : '';\n    }\n\n        const value = await vscode.window.showInputBox({\n        value: valueToString,\n        prompt: promptText,\n        placeHolder: placeHolder,\n            validateInput: text => {\n            if (inputType === 'number') {\n                if (!text) return 'Eingabe darf nicht leer sein.';\n                const num = parseInt(text);\n                if (isNaN(num) || num < (ruleKey === 'intervalMinutes' || ruleKey === 'timeThresholdMinutes' ? 1 : 0)) {\n                    return 'Bitte geben Sie eine gültige positive Zahl ein.';\n                }\n            }\n            // Keine spezielle Validierung für patterns/files hier, erfolgt beim Speichern\n            return null;\n            }\n        });\n        \n        if (value !== undefined) {\n        let processedValue;\n        if (inputType === 'number') {\n            processedValue = parseInt(value);\n        } else if (inputType === 'patterns' || inputType === 'files') {\n            processedValue = value.split(',').map(p => p.trim()).filter(p => p.length > 0);\n            if (inputType === 'patterns' && processedValue.length === 0) {\n                processedValue = ['**/*']; // Standard, wenn leer\n            }\n        } else {\n            processedValue = value; // Fallback\n        }\n\n        rules[ruleKey] = processedValue;\n        await config.update('triggerRules', rules, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Trigger-Regel.\n * @param {string} ruleKey Schlüssel der Regel in `triggerRules`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleTriggerRuleCommand(ruleKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const triggerRules = config.get('triggerRules') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(triggerRules[ruleKey]);\n        \n        // Aktualisierte triggerRules erstellen\n        const updatedRules = { ...triggerRules, [ruleKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('triggerRules', updatedRules, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        \n        // Falls es der Intervall-Trigger ist und er aktiviert wurde, nach dem Intervall fragen\n        if (ruleKey === 'onInterval' && newValue && (!triggerRules.intervalMinutes || triggerRules.intervalMinutes <= 0)) {\n            await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall (Minuten)', 'z.B. 5', 'number');\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n/**\n * Generischer Handler zum Bearbeiten einer Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} promptText Text für die Eingabeaufforderung.\n * @param {string} placeHolder Platzhalter für die Eingabeaufforderung.\n */\nasync function handleEditGitSettingCommand(settingKey, promptText, placeHolder) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') }; // Kopie erstellen\n    const currentValue = gitSettings[settingKey];\n\n        const value = await vscode.window.showInputBox({\n        value: currentValue !== undefined ? currentValue.toString() : '',\n        prompt: promptText,\n        placeHolder: placeHolder,\n        });\n        \n        if (value !== undefined) {\n        gitSettings[settingKey] = value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${promptText} aktualisiert.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen Git-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleGitSettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const newValue = !gitSettings[settingKey];\n    gitSettings[settingKey] = newValue;\n    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n    vscode.window.showInformationMessage(`${settingName} ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n/**\n * Generischer Handler zum Auswählen einer Git-Einstellung aus einer Liste.\n * @param {string} settingKey Schlüssel der Einstellung in `gitSettings`.\n * @param {string} placeHolder Platzhalter für die QuickPick-Liste.\n * @param {Array<{label: string, value: any}>} options Auswahloptionen.\n */\nasync function handleSelectGitSettingCommand(settingKey, placeHolder, options) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentValue = gitSettings[settingKey];\n\n    const selected = await vscode.window.showQuickPick(\n        options.map(opt => ({ \n            ...opt,\n            description: currentValue === opt.value ? '(Aktuell)' : ''\n        })),\n        {\n            placeHolder: placeHolder,\n            ignoreFocusOut: true\n        }\n    );\n\n    if (selected) {\n        gitSettings[settingKey] = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`${placeHolder} auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Generischer Handler zum Umschalten einer booleschen UI-Einstellung.\n * @param {string} settingKey Schlüssel der Einstellung in `uiSettings`.\n * @param {string} settingName Name der Einstellung für die Benachrichtigung.\n */\nasync function handleToggleUISettingCommand(settingKey, settingName) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const newValue = !uiSettings[settingKey];\n    uiSettings[settingKey] = newValue;\n    await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n    \n    // Für Benachrichtigungen immer eine Nachricht zeigen\n    if (settingKey === 'showNotifications') {\n         vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    } else if (uiSettings.showNotifications) {\n        vscode.window.showInformationMessage(`${settingName} wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n    }\n    // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n}\n\n// #endregion\n\n// #region Spezifische Handler (Beibehaltene Logik)\n\n/**\n * Behandelt das Kommando zum Bearbeiten des OpenAI API-Schlüssels.\n */\nasync function handleEditOpenAIKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('openai.apiKey');\n        const value = await vscode.window.showInputBox({\n            value: currentValue,\n        prompt: 'Geben Sie Ihren OpenAI API-Schlüssel ein',\n        placeHolder: 'sk-...',\n        password: true,\n        ignoreFocusOut: true\n        });\n        \n        if (value !== undefined) {\n        await config.update('openai.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('OpenAI API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Anthropic-Modells.\n */\nasync function handleSelectAnthropicModelCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentModel = config.get('anthropic.model');\n    const models = [\n        'claude-3-haiku-20240307',\n        'claude-3-sonnet-20240229',\n        'claude-3-opus-20240229',\n        'claude-2.1',\n        'claude-2.0',\n        'claude-instant-1.2'\n    ];\n        \n        const selected = await vscode.window.showQuickPick(\n        models.map(name => ({\n            label: name,\n            description: name === currentModel ? '(Aktuell)' : ''\n        })),\n        { \n            placeHolder: 'Claude-Modell auswählen',\n            ignoreFocusOut: true\n        }\n        );\n        \n        if (selected) {\n        await config.update('anthropic.model', selected.label, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Anthropic-Modell auf ${selected.label} gesetzt.`);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten des Anthropic API-Schlüssels.\n */\nasync function handleEditAnthropicKeyCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('anthropic.apiKey');\n    const value = await vscode.window.showInputBox({\n        value: currentValue,\n        prompt: 'Geben Sie Ihren Anthropic API-Schlüssel ein',\n        placeHolder: 'sk-ant-...',\n        password: true,\n        ignoreFocusOut: true\n    });\n    \n    if (value !== undefined) {\n        await config.update('anthropic.apiKey', value, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage('Anthropic API-Schlüssel aktualisiert.');\n    }\n}\n\n/**\n * Behandelt das Kommando zur Bearbeitung der Prompt-Vorlage.\n */\nasync function handleEditPromptTemplateCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentValue = config.get('promptTemplate');\n        \n        // Temporäre Datei erstellen und öffnen\n    try {\n        const document = await vscode.workspace.openTextDocument({\n            content: currentValue,\n            language: 'markdown'\n        });\n        \n        await vscode.window.showTextDocument(document);\n        \n        // Listener für Speichern hinzufügen und nach erfolgreichem Speichern wieder entfernen\n        const disposable = vscode.workspace.onDidSaveTextDocument(async (doc) => {\n            if (doc === document) {\n                const newContent = doc.getText();\n                // Nur aktualisieren, wenn sich der Inhalt geändert hat\n                if (newContent !== currentValue) {\n                    await config.update('promptTemplate', newContent, vscode.ConfigurationTarget.Global);\n                vscode.window.showInformationMessage('Prompt-Vorlage wurde gespeichert.');\n                }\n                disposable.dispose(); // Listener entfernen\n                // Optional: Temporäres Dokument schließen?\n                // await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n            }\n        });\n        \n        // Listener für Schließen des Dokuments (ohne Speichern)\n        const closeDisposable = vscode.workspace.onDidCloseTextDocument(doc => {\n            if (doc === document) {\n                disposable.dispose(); // Auch den Speicher-Listener entfernen\n                closeDisposable.dispose();\n            }\n        });\n\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Öffnen der Prompt-Vorlage: ${error.message}`);\n        console.error('Fehler bei handleEditPromptTemplateCommand:', error);\n    }\n}\n\n/**\n * Behandelt das Kommando zum Anzeigen des Dashboards.\n * @param {vscode.ExtensionContext} context \n */\nasync function handleShowDashboardCommand(context) {\n    try {\n        // Neues Panel erstellen oder bestehendes anzeigen\n        let panel = context.globalState.get('comittoDashboardPanelInstance');\n        \n        if (panel && typeof panel.reveal === 'function') {\n            // Nur reveal aufrufen, wenn es eine Funktion ist\n            panel.reveal(vscode.ViewColumn.One);\n        } else {\n            // Wenn panel nicht existiert oder keine reveal-Methode hat, ein neues erstellen\n            if (panel) {\n                // Altes, ungültiges Panel aus dem State entfernen\n                context.globalState.update('comittoDashboardPanelInstance', undefined);\n                console.log('Ungültiges Dashboard-Panel gefunden und zurückgesetzt');\n            }\n            \n            panel = vscode.window.createWebviewPanel(\n                'comittoDashboard',\n                'Comitto Dashboard',\n                vscode.ViewColumn.One,\n                {\n                    enableScripts: true,\n                    retainContextWhenHidden: true, // Panel im Hintergrund halten\n                    localResourceRoots: [\n                        vscode.Uri.joinPath(context.extensionUri, 'resources')\n                    ]\n                }\n            );\n            \n            // Panel speichern\n            context.globalState.update('comittoDashboardPanelInstance', panel);\n            \n            // Beim Schließen das Panel aus dem State entfernen\n            panel.onDidDispose(\n                () => {\n                    context.globalState.update('comittoDashboardPanelInstance', undefined);\n                    panel = undefined;\n                },\n                null,\n                context.subscriptions\n            );\n            \n            // Ursprünglichen Nachrichtenhandler wieder hinzufügen\n            panel.webview.onDidReceiveMessage(\n                async (message) => {\n                    try {\n                        switch (message.command) {\n                            case 'refresh':\n                                try {\n                                    // Stelle sicher, dass das Panel noch existiert\n                                    const currentPanel = context.globalState.get('comittoDashboardPanelInstance');\n                                    if (currentPanel && typeof currentPanel.webview === 'object') {\n                                        currentPanel.webview.html = generateDashboardHTML(context, currentPanel);\n                                    } else {\n                                        console.warn(\"Versuch, HTML für ein nicht mehr existierendes Dashboard zu aktualisieren.\");\n                                    }\n                                } catch (error) {\n                                    console.error('Fehler beim Aktualisieren des Dashboards:', error);\n                                    vscode.window.showErrorMessage(`Fehler beim Aktualisieren des Dashboards: ${error.message}`);\n                                }\n                                break;\n                            case 'toggleAutoCommit':\n                                try {\n                                    const config = vscode.workspace.getConfiguration('comitto');\n                                    const enabled = !config.get('autoCommitEnabled');\n                                    await config.update('autoCommitEnabled', enabled, vscode.ConfigurationTarget.Global);\n                                    // Dashboard nach Aktualisierung neu laden\n                                    const currentPanel = context.globalState.get('comittoDashboardPanelInstance');\n                                    if (currentPanel && typeof currentPanel.webview === 'object') {\n                                        currentPanel.webview.html = generateDashboardHTML(context, currentPanel);\n                                    }\n                                } catch (error) {\n                                    console.error('Fehler beim Umschalten des Auto-Commit-Status:', error);\n                                    vscode.window.showErrorMessage(`Fehler beim Umschalten des Auto-Commit-Status: ${error.message}`);\n                                }\n                                break;\n                            case 'manualCommit':\n                                vscode.commands.executeCommand('comitto.performManualCommit');\n                                break;\n                            case 'openSettings':\n                                vscode.commands.executeCommand('comitto.openSettings');\n                                break;\n                            case 'configureProvider':\n                                vscode.commands.executeCommand('comitto.configureAIProvider');\n                                break;\n                            case 'configureTriggers':\n                                vscode.commands.executeCommand('comitto.configureTriggers');\n                                break;\n                        }\n                    } catch (error) {\n                        console.error('Fehler bei der Verarbeitung des Dashboard-Befehls:', error);\n                        if (panel && panel.webview && typeof panel.webview.postMessage === 'function') {\n                            panel.webview.postMessage({ \n                                type: 'error', \n                                content: `Fehler bei der Befehlsverarbeitung: ${error.message}` \n                            });\n                        }\n                    }\n                },\n                undefined,\n                context.subscriptions\n            );\n        }\n\n        // Gestyltes HTML setzen\n        try {\n            // Übergebe das Panel an generateDashboardHTML\n            panel.webview.html = generateDashboardHTML(context, panel); \n        } catch (error) {\n             console.error('Fehler beim Generieren des Dashboard-HTML:', error);\n             vscode.window.showErrorMessage(`Fehler beim Öffnen des Dashboards: ${error.message}`);\n             // Fallback-HTML setzen\n             panel.webview.html = `\n                <html><body><h1>Fehler beim Laden des Dashboards</h1><p>${error.message}</p></body></html>\n            `;\n        }\n        \n    } catch (error) {\n        console.error('Fehler beim Öffnen des Dashboards:', error);\n        vscode.window.showErrorMessage(`Fehler beim Öffnen des Comitto-Dashboards: ${error.message}`);\n    }\n}\n\n/**\n * Generiert das HTML für das Dashboard (Webview).\n * @param {vscode.ExtensionContext} context\n * @param {vscode.WebviewPanel} panel Das aktuelle Webview-Panel\n * @returns {string} HTML-Inhalt\n */\nfunction generateDashboardHTML(context, panel) { // panel hier als Argument hinzugefügt\n    if (!panel || !panel.webview) {\n        console.error('generateDashboardHTML: Panel oder Webview ist nicht verfügbar.');\n        return `<html><body><h1>Fehler beim Initialisieren des Dashboards</h1>\n                <p>Das Webview-Panel ist nicht verfügbar. Bitte schließen Sie das Dashboard und versuchen Sie es erneut.</p></body></html>`;\n    }\n    \n    const config = vscode.workspace.getConfiguration('comitto');\n    const enabled = config.get('autoCommitEnabled');\n    const provider = config.get('aiProvider');\n    const rules = config.get('triggerRules');\n    const gitSettings = config.get('gitSettings');\n    const providerName = ui.getProviderDisplayName(provider);\n    const providerIcon = ui.getProviderIcon(provider); // Holen des Icons\n    \n    let providerModel = '';\n    switch (provider) {\n        case 'ollama': providerModel = config.get('ollama.model'); break;\n        case 'openai': providerModel = config.get('openai.model'); break;\n        case 'anthropic': providerModel = config.get('anthropic.model'); break;\n    }\n\n    // Pfade zu Ressourcen\n    const dashboardJsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'dashboard.js');\n    const styleUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'styles.css');\n    const animationsUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'ui', 'animations.css');\n    const logoUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'icon.svg');\n    \n    // Webview URIs erstellen\n    const dashboardJsWebviewUri = panel.webview.asWebviewUri(dashboardJsUri);\n    const styleWebviewUri = panel.webview.asWebviewUri(styleUri);\n    const animationsWebviewUri = panel.webview.asWebviewUri(animationsUri);\n    const logoWebviewUri = panel.webview.asWebviewUri(logoUri);\n    \n    // Nonce für CSP\n    const nonce = getNonce();\n    \n    // Version aus package.json lesen\n    let version = '0.9.6'; // Aktuelle Version\n    try {\n        const pkgPath = vscode.Uri.joinPath(context.extensionUri, 'package.json').fsPath;\n        const pkg = JSON.parse(require('fs').readFileSync(pkgPath, 'utf8'));\n        version = pkg.version || version;\n    } catch (e) {\n        console.error(\"Fehler beim Lesen der package.json für Version\", e);\n    }\n    \n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <!-- Content Security Policy -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${panel.webview.cspSource} https://cdn.jsdelivr.net 'unsafe-inline'; font-src https://fonts.gstatic.com; img-src ${panel.webview.cspSource} https: data:; script-src 'nonce-${nonce}' https://cdn.jsdelivr.net; connect-src 'none';\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        \n        <!-- Tailwind CSS -->\n        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n        \n        <!-- Custom Styles -->\n        <link href=\"${styleWebviewUri}\" rel=\"stylesheet\">\n        <link href=\"${animationsWebviewUri}\" rel=\"stylesheet\">\n        \n        <!-- Google Fonts - Inter -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        \n        <title>Comitto Dashboard</title>\n    </head>\n    <body class=\"vscode-dark\">\n        <div class=\"container glass-container animated-bg\">\n            <div class=\"dashboard-header\">\n                <div class=\"flex items-center gap-4\">\n                    <img src=\"${logoWebviewUri}\" alt=\"Comitto Logo\" class=\"h-12 w-12 floating-element\"/>\n                    <h1 class=\"dashboard-title typing\">Comitto Dashboard</h1>\n                </div>\n                <button id=\"refreshBtn\" class=\"btn btn-icon\" title=\"Refresh\">\n                    <span class=\"icon\">🔄</span>\n                </button>\n            </div>\n            \n            <div class=\"flex justify-between items-center mb-6 fade-in\" style=\"animation-delay: 0.2s\">\n                <div class=\"status ${enabled ? 'status-enabled' : 'status-disabled'} flex items-center\">\n                    <span class=\"status-indicator ${enabled ? 'status-active' : 'status-inactive'}\"></span>\n                    <span><strong>Status:</strong> Comitto is currently ${enabled ? 'enabled' : 'disabled'}</span>\n                </div>\n                \n                <div class=\"flex gap-2\">\n                    <button id=\"commitBtn\" class=\"btn hover-lift\" title=\"Generate a commit now with AI\">\n                        <span class=\"icon\">💾</span> Manual Commit\n                    </button>\n                    <button id=\"toggleBtn\" class=\"btn ${enabled ? 'btn-danger' : 'btn-secondary'} hover-lift\" data-enabled=\"${enabled}\" title=\"Toggle automatic commits\">\n                        <span class=\"icon\">${enabled ? '🚫' : '✅'}</span> ${enabled ? 'Disable' : 'Enable'}\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"dashboard fade-in\" style=\"animation-delay: 0.4s\">\n                <!-- AI Configuration -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">${providerIcon.id ? `$(${providerIcon.id})` : '🧠'}</span> AI Configuration\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${providerName}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <p class=\"mb-2\"><strong>Model:</strong> ${providerModel || 'Not set'}</p>\n                        <div class=\"flex justify-center mt-4\">\n                            <button id=\"configureAIBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> Configure AI\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Trigger Rules -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">⚙️</span> Trigger Rules\n                        </h2>\n                        <span class=\"badge ${rules.onSave || rules.onInterval ? 'badge-success' : 'badge-danger'}\">\n                            ${rules.onSave || rules.onInterval ? 'Active' : 'Inactive'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>File Count:</strong></p>\n                                <span class=\"badge\">${rules.fileCountThreshold}</span>\n                            </div>\n                            <div>\n                                <p><strong>Change Count:</strong></p>\n                                <span class=\"badge\">${rules.minChangeCount}</span>\n                            </div>\n                            <div>\n                                <p><strong>Time Threshold:</strong></p>\n                                <span class=\"badge\">${rules.timeThresholdMinutes} Min.</span>\n                            </div>\n                            <div>\n                                <p><strong>Active Triggers:</strong></p>\n                                <div class=\"flex flex-wrap gap-1\">\n                                    ${rules.onSave ? '<span class=\"badge badge-success\">On Save</span>' : ''}\n                                    ${rules.onInterval ? `<span class=\"badge badge-success\">Interval (${rules.intervalMinutes} Min.)</span>` : ''}\n                                    ${rules.onBranchSwitch ? '<span class=\"badge badge-success\">Branch Switch</span>' : ''}\n                                    ${!rules.onSave && !rules.onInterval && !rules.onBranchSwitch ? '<span class=\"badge badge-danger\">None</span>' : ''}\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"configureTriggersBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> Configure Triggers\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Git Settings -->\n                <div class=\"card interactive\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📝</span> Git Settings\n                        </h2>\n                        <span class=\"badge badge-primary\">\n                            ${gitSettings.commitMessageLanguage === 'de' ? 'German' : 'English'}\n                        </span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n                            <div>\n                                <p><strong>Auto-Push:</strong></p>\n                                <span class=\"badge ${gitSettings.autoPush ? 'badge-success' : 'badge-danger'}\">\n                                    ${gitSettings.autoPush ? 'Yes' : 'No'}\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Branch:</strong></p>\n                                <span class=\"badge tooltip\">\n                                    ${gitSettings.branch || 'Current Branch'}\n                                    <span class=\"tooltip-text\">Active for ${gitSettings.branch || 'current branch'}</span>\n                                </span>\n                            </div>\n                            <div>\n                                <p><strong>Commit Style:</strong></p>\n                                <span class=\"badge\">${gitSettings.commitMessageStyle}</span>\n                            </div>\n                            <div>\n                                <p><strong>Staging Mode:</strong></p>\n                                <span class=\"badge\">${ui.getStageModeLabel(gitSettings.stageMode)}</span>\n                            </div>\n                        </div>\n                        <div class=\"flex justify-center\">\n                            <button id=\"openSettingsBtn\" class=\"btn btn-secondary hover-lift\">\n                                <span class=\"icon\">⚙️</span> Configure Git Settings\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Statistics (Placeholder) -->\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\">\n                            <span class=\"icon\">📊</span> Statistics\n                        </h2>\n                        <span class=\"badge badge-primary\" id=\"statsTimeframe\">Last 7 Days</span>\n                    </div>\n                    <div class=\"card-content\">\n                        <div id=\"statsContainer\" class=\"text-center\">\n                            <div class=\"flex justify-around mb-4\">\n                                <div>\n                                    <h3 class=\"text-xl font-bold\" id=\"commitCount\">-</h3>\n                                    <p class=\"text-sm text-gray-400\">Commits</p>\n                                </div>\n                                <div>\n                                    <h3 class=\"text-xl font-bold\" id=\"fileCount\">-</h3>\n                                    <p class=\"text-sm text-gray-400\">Files Changed</p>\n                                </div>\n                                <div>\n                                    <h3 class=\"text-xl font-bold\" id=\"changeCount\">-</h3>\n                                    <p class=\"text-sm text-gray-400\">Lines Changed</p>\n                                </div>\n                            </div>\n                            <div id=\"chart\" class=\"h-40\">\n                                <!-- Chart will be inserted here -->\n                                <div class=\"flex items-center justify-center h-full\">\n                                    <p class=\"text-gray-400 loading-dots\">Loading statistics</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"mt-6 text-center text-sm text-gray-500 fade-in\" style=\"animation-delay: 0.6s\">\n                <p>Comitto v${version} • <span class=\"hover-underline tooltip\">Made with ❤️<span class=\"tooltip-text\">Thank you for using Comitto!</span></span></p>\n            </div>\n        </div>\n        \n        <!-- Custom script with nonce -->\n        <script nonce=\"${nonce}\" src=\"${dashboardJsWebviewUri}\"></script>\n        \n        <script nonce=\"${nonce}\">\n            // Initialize VS Code API\n            const vscode = acquireVsCodeApi();\n        </script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Generiert eine Nonce für die Content Security Policy.\n * @returns {string} Eine zufällige Nonce.\n */\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\n/**\n * Funktion zum Verwalten der Commit-Nachrichtensprache\n * Verbesserte Implementierung mit Anpassung des Prompt-Templates\n * @returns {Promise<void>}\n */\nasync function handleCommitMessageLanguageCommand() {\n    try {\n        // Konfiguration abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings') || {};\n        \n        // Aktuell eingestellte Sprache abrufen\n        const currentLanguage = gitSettings.commitMessageLanguage || 'en';\n        \n        // Sprachoptionen definieren\n        const languageOptions = [\n            { label: 'Englisch', value: 'en', description: 'Commit-Nachrichten in englischer Sprache' },\n            { label: 'Deutsch', value: 'de', description: 'Commit-Nachrichten in deutscher Sprache' }\n        ];\n        \n        // Sprachauswahl anzeigen\n        const selectedLanguage = await vscode.window.showQuickPick(languageOptions, {\n            placeHolder: 'Wählen Sie die Sprache für Commit-Nachrichten',\n            title: 'Commit-Nachrichtensprache auswählen'\n        });\n        \n        if (selectedLanguage) {\n            // Git-Einstellungen aktualisieren\n            gitSettings.commitMessageLanguage = selectedLanguage.value;\n            await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n            \n            // Prompt-Template entsprechend anpassen\n            let promptTemplate = config.get('promptTemplate');\n            \n            // Je nach gewählter Sprache den Prompt-Template anpassen\n            if (selectedLanguage.value === 'de') {\n                // Wenn es bereits ein deutsches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('auf Deutsch')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generate a meaningful commit message in English/i,\n                        'Generiere eine aussagekräftige Commit-Nachricht auf Deutsch'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /using the Conventional Commits format/i,\n                        'im Format der Conventional Commits'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Keep it under 80 characters/i,\n                        'Halte sie unter 80 Zeichen'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Here is the diff of changes/i,\n                        'Hier ist das Diff der Änderungen'\n                    );\n                }\n            } else {\n                // Wenn es bereits ein englisches Template gibt, nicht ersetzen\n                if (!promptTemplate.includes('in English')) {\n                    promptTemplate = promptTemplate.replace(\n                        /Generiere eine aussagekräftige Commit-Nachricht auf Deutsch/i,\n                        'Generate a meaningful commit message in English'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /im Format der Conventional Commits/i,\n                        'using the Conventional Commits format'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Halte sie unter 80 Zeichen/i,\n                        'Keep it under 80 characters'\n                    );\n                    promptTemplate = promptTemplate.replace(\n                        /Hier ist das Diff der Änderungen/i,\n                        'Here is the diff of changes'\n                    );\n                }\n            }\n            \n            // Aktualisiertes Template speichern\n            await config.update('promptTemplate', promptTemplate, vscode.ConfigurationTarget.Global);\n            \n            vscode.window.showInformationMessage(\n                `Commit-Nachrichtensprache auf \"${selectedLanguage.label}\" gesetzt.`\n            );\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Spracheinstellung: ${error.message}`);\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Staging-Modus.\n */\nasync function handleSelectStageModeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentMode = gitSettings.stageMode || 'all';\n\n    const modes = [\n        { label: 'Alle Änderungen', value: 'all', detail: 'Alle geänderten Dateien automatisch stagen (`git add .`)' },\n        { label: 'Spezifische Muster', value: 'specific', detail: 'Nur Dateien stagen, die bestimmten Mustern entsprechen' },\n        { label: 'Manuell auswählen', value: 'prompt', detail: 'Vor jedem Commit nach zu stagenden Dateien fragen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        modes.map(mode => ({ ...mode, description: currentMode === mode.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Staging-Modus auswählen',\n            title: 'Wie sollen Änderungen gestaged werden?',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        gitSettings.stageMode = selected.value;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Staging-Modus auf \"${selected.label}\" gesetzt.`);\n        \n        // Wenn \"Spezifische Dateien\" ausgewählt wurde und keine Muster existieren, nach Mustern fragen\n        if (selected.value === 'specific' && (!gitSettings.specificStagingPatterns || gitSettings.specificStagingPatterns.length === 0)) {\n            await handleEditStagingPatternsCommand();\n        }\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Bearbeiten der Staging-Muster.\n */\nasync function handleEditStagingPatternsCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = { ...config.get('gitSettings') };\n    const currentPatterns = gitSettings.specificStagingPatterns || [];\n\n    const input = await vscode.window.showInputBox({\n        placeHolder: '*.js,*.json,src/**/*',\n        value: currentPatterns.join(','),\n        prompt: 'Kommagetrennte Glob-Muster für spezifisches Staging',\n        title: 'Staging-Muster bearbeiten',\n        ignoreFocusOut: true\n    });\n\n    if (input !== undefined) {\n        const patterns = input.split(',').map(p => p.trim()).filter(p => p);\n        gitSettings.specificStagingPatterns = patterns;\n        await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n        if (patterns.length > 0) {\n            vscode.window.showInformationMessage(`Spezifische Staging-Muster aktualisiert: ${patterns.join(', ')}`);\n        } else {\n             vscode.window.showInformationMessage('Spezifische Staging-Muster entfernt.');\n        }\n       // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Alle Änderungen stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageAllCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Prüfe, ob es überhaupt Änderungen gibt\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen vorhanden.');\n            return true;\n        }\n\n        const statusBarMessage = vscode.window.setStatusBarMessage('$(sync~spin) Stage alle Änderungen...', 2000);\n        await executeGitCommand('git add .', repoPath);\n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage('Alle Änderungen wurden gestaged.');\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen aller Änderungen: ${error.message}`);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zum Ausführen des \"Ausgewählte Dateien stagen\"-Befehls.\n * @returns {Promise<boolean>} True bei Erfolg, False bei Fehler/Abbruch.\n */\nasync function handleStageSelectedCommand() {\n    try {\n        const workspaceFolder = vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('Kein Workspace geöffnet.');\n            return false;\n        }\n        const repoPath = workspaceFolder.uri.fsPath;\n        \n        // Git-Status abrufen\n        const statusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!statusOutput.trim()) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Geänderte Dateien parsen und für QuickPick vorbereiten\n        const changedFiles = statusOutput\n            .split('\\n')\n            .filter(line => line.trim() !== '')\n            .map(line => {\n                const status = line.substring(0, 2);\n                const filePath = line.substring(3).trim(); // Trimmen ist wichtig\n                return { \n                    status,\n                    filePath,\n                    label: `${ui.getStatusDescription(status)}: ${filePath}`,\n                    picked: !status.includes('?') // Vorauswahl aller Dateien außer untracked\n                };\n            });\n        \n        if (changedFiles.length === 0) {\n            vscode.window.showInformationMessage('Keine Änderungen zum Stagen gefunden.');\n            return true;\n        }\n        \n        // Dateien zur Auswahl anbieten\n        const selectedItems = await vscode.window.showQuickPick(changedFiles, {\n            placeHolder: 'Wählen Sie die zu stagenden Dateien aus',\n            canPickMany: true,\n            ignoreFocusOut: true,\n            title: 'Dateien für Staging auswählen'\n        });\n        \n        if (!selectedItems || selectedItems.length === 0) {\n            vscode.window.showInformationMessage('Keine Dateien zum Stagen ausgewählt.');\n            return false; // Benutzerabbruch\n        }\n        \n        const statusBarMessage = vscode.window.setStatusBarMessage(`$(sync~spin) Stage ${selectedItems.length} Datei(en)...`, 5000);\n        // Ausgewählte Dateien stagen\n        // Git add akzeptiert mehrere Dateien, sicherstellen, dass Pfade korrekt sind\n        const filesToStage = selectedItems.map(item => `\"${item.filePath}\"`).join(' ');\n        await executeGitCommand(`git add -- ${filesToStage}`, repoPath); // '--' trennt Optionen von Dateipfaden\n        \n        statusBarMessage.dispose();\n        vscode.window.showInformationMessage(`${selectedItems.length} Datei(en) wurden gestaged.`);\n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Stagen ausgewählter Dateien: ${error.message}`);\n        console.error(\"Staging Error Details:\", error);\n        return false;\n    }\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des Themes.\n */\nasync function handleSelectThemeCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = { ...config.get('uiSettings') };\n    const currentTheme = uiSettings.theme || 'auto';\n\n    const themes = [\n        { label: 'Hell', value: 'light', detail: 'Helles Theme für Comitto UI-Elemente' },\n        { label: 'Dunkel', value: 'dark', detail: 'Dunkles Theme für Comitto UI-Elemente' },\n        { label: 'Automatisch', value: 'auto', detail: 'Theme automatisch an VS Code anpassen' }\n    ];\n\n    const selected = await vscode.window.showQuickPick(\n        themes.map(theme => ({...theme, description: currentTheme === theme.value ? '(Aktuell)' : ''})),\n        {\n            placeHolder: 'Theme für Comitto auswählen',\n            title: 'Comitto Theme',\n            ignoreFocusOut: true\n        });\n\n    if (selected) {\n        uiSettings.theme = selected.value;\n        await config.update('uiSettings', uiSettings, vscode.ConfigurationTarget.Global);\n        vscode.window.showInformationMessage(`Comitto Theme auf \"${selected.label}\" gesetzt.`);\n        // UI Refresh wird durch onDidChangeConfiguration ausgelöst\n    }\n}\n\n/**\n * Umschaltet eine Einstellung in den notifications-Einstellungen\n * @param {string} settingKey Der Schlüssel der Einstellung\n * @param {string} settingName Anzeigename der Einstellung für Benachrichtigungen\n */\nasync function handleToggleNotificationSettingCommand(settingKey, settingName) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const notifications = config.get('notifications') || {};\n        \n        // Aktuellen Wert umkehren (true -> false, false -> true)\n        const newValue = !(notifications[settingKey]);\n        \n        // Aktualisierte notifications erstellen\n        const updatedNotifications = { ...notifications, [settingKey]: newValue };\n        \n        // In die Konfiguration schreiben\n        await config.update('notifications', updatedNotifications, vscode.ConfigurationTarget.Global);\n        \n        // Benachrichtigung anzeigen, wenn sie nicht gerade deaktiviert wurde\n        if (settingKey !== 'onError' || newValue) {\n            vscode.window.showInformationMessage(`${settingName} wurden ${newValue ? 'aktiviert' : 'deaktiviert'}.`);\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Umschalten von ${settingName}: ${error.message}`);\n    }\n}\n\n// #endregion Spezifische Handler\n\n/**\n * Fehlerbehandlungsfunktion für bessere Benutzerfreundlichkeit und Debugging\n * @param {Error} error Der aufgetretene Fehler\n * @param {string} context Kontext, in dem der Fehler aufgetreten ist\n * @param {boolean} showNotification Ob eine Benachrichtigung angezeigt werden soll\n * @returns {string} Benutzerfreundliche Fehlermeldung\n */\nfunction handleError(error, context, showNotification = true) {\n    // Originalnachricht für Logging\n    const originalMessage = error.message || 'Unbekannter Fehler';\n    console.error(`Comitto Fehler [${context}]:`, error);\n    \n    // Benutzerfreundliche Fehlermeldung extrahieren\n    let userMessage = originalMessage;\n    \n    // Git-spezifische Fehler erkennen und übersetzen\n    if (originalMessage.includes('fatal: not a git repository')) {\n        userMessage = 'Dieses Verzeichnis ist kein Git-Repository. Bitte initialisieren Sie zuerst ein Git-Repository.';\n    } else if (originalMessage.includes('fatal: unable to access')) {\n        userMessage = 'Fehler beim Zugriff auf das Remote-Repository. Bitte prüfen Sie Ihre Netzwerkverbindung und Zugangsrechte.';\n    } else if (originalMessage.includes('maxBuffer') || originalMessage.includes('zu groß')) {\n        userMessage = 'Zu viele oder zu große Änderungen für die automatische Verarbeitung. Es wird versucht, mit einem kleineren Diff fortzufahren.';\n    } else if (originalMessage.includes('fatal: could not read')) {\n        userMessage = 'Fehler beim Lesen von Git-Objekten. Möglicherweise ist Ihr Repository beschädigt.';\n    } else if (originalMessage.includes('Permission denied')) {\n        userMessage = 'Zugriff verweigert. Bitte prüfen Sie Ihre Berechtigungen.';\n    } else if (originalMessage.includes('Authentication failed')) {\n        userMessage = 'Authentifizierung fehlgeschlagen. Bitte prüfen Sie Ihre Git-Credentials.';\n    } else if (originalMessage.includes('ENOENT')) {\n        userMessage = 'Datei oder Verzeichnis nicht gefunden.';\n    } else if (originalMessage.includes('ECONNREFUSED')) {\n        userMessage = 'Verbindung verweigert. Der Server ist möglicherweise nicht erreichbar.';\n    } else if (originalMessage.includes('ETIMEDOUT')) {\n        userMessage = 'Zeitüberschreitung bei der Verbindung. Bitte prüfen Sie Ihre Netzwerkverbindung.';\n    }\n    \n    // Anzeigen, falls gewünscht\n    if (showNotification) {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const notificationSettings = config.get('notifications');\n        if (notificationSettings && notificationSettings.onError) {\n            vscode.window.showErrorMessage(`${context}: ${userMessage}`);\n        }\n    }\n    \n    // Auch als detaillierteren Log ausgeben\n    console.warn(`Comitto [${context}] - Benutzerfreundlich: ${userMessage}`);\n    \n    return userMessage;\n}\n\n/**\n * Bereitet die KI-Prompt-Vorlage vor und passt sie an aktuelle Einstellungen an\n * @param {string} gitStatus Die Ausgabe von git status\n * @param {string} diffOutput Die Ausgabe von git diff\n * @returns {string} Die angepasste Prompt-Vorlage\n */\nfunction preparePromptTemplate(gitStatus, diffOutput) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = config.get('gitSettings');\n    \n    // Änderungen in ein lesbares Format bringen\n    const changes = gitStatus.split('\\n')\n        .filter(line => line.trim().length > 0)\n        .map(line => {\n            const status = line.substring(0, 2).trim();\n            const filePath = line.substring(3).trim();\n            return `${getStatusText(status)} ${filePath}`;\n        })\n        .join('\\n');\n    \n    // Prompt-Vorlage mit Änderungen füllen\n    let promptTemplate = config.get('promptTemplate');\n    promptTemplate = promptTemplate.replace('{changes}', changes);\n    \n    // Sprache für die Commit-Nachricht einfügen\n    const language = gitSettings.commitMessageLanguage || 'en';\n    const languageText = language === 'de' ? 'auf Deutsch' : 'in English';\n    \n    // Sicherstellen, dass die richtige Sprache im Prompt verwendet wird\n    if (promptTemplate.includes('auf Deutsch') && language !== 'de') {\n        promptTemplate = promptTemplate.replace('auf Deutsch', 'in English');\n    } else if (promptTemplate.includes('in English') && language === 'de') {\n        promptTemplate = promptTemplate.replace('in English', 'auf Deutsch');\n    } else if (!promptTemplate.toLowerCase().includes(languageText.toLowerCase())) {\n        promptTemplate += `\\nDie Commit-Nachricht soll ${languageText} sein.`;\n    }\n    \n    // Commit-Stil einfügen\n    const style = gitSettings.commitMessageStyle || 'conventional';\n    if (style === 'conventional' && !promptTemplate.toLowerCase().includes('conventional')) {\n        const conventionalText = language === 'de' \n            ? '\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).'\n            : '\\nUse the Conventional Commits format (feat, fix, docs, style, etc.).';\n        promptTemplate += conventionalText;\n    } else if (style === 'gitmoji' && !promptTemplate.toLowerCase().includes('gitmoji')) {\n        const gitmojiText = language === 'de'\n            ? '\\nVerwende Gitmojis am Anfang der Commit-Nachricht (z.B. 🐛 für Bugfixes, ✨ für neue Features).'\n            : '\\nUse Gitmojis at the beginning of the commit message (e.g. 🐛 for bugfixes, ✨ for new features).';\n        promptTemplate += gitmojiText;\n    }\n    \n    // Zusätzliche Anweisungen für englische Konventionen\n    if (language === 'en' && !promptTemplate.toLowerCase().includes('conventional git conventions')) {\n        promptTemplate += `\n\\nFollow these additional rules:\n1. Use imperative mood (\"Add feature\" not \"Added feature\")\n2. Don't capitalize the first word if using conventional commits format\n3. No period at the end\n4. Keep the message concise and under 72 characters if possible\n5. If needed, add more details after a blank line`;\n    }\n    \n    // Diff-Informationen für komplexere Abrechnungen hinzufügen\n    if (diffOutput && diffOutput.length > 0) {\n        // Eine aggressiv gekürzte Version des Diffs anhängen, um den Kontext zu verbessern,\n        // aber nicht zu viel Token zu verwenden\n        promptTemplate += `\\n\\n${processDiffForPrompt(diffOutput)}`;\n    }\n    \n    return promptTemplate;\n}\n\n/**\n * Prozessiert den Git-Diff für eine optimale Verwendung im Prompt\n * @param {string} diffOutput Der originale Diff-Output\n * @returns {string} Ein angepasster, gekürzter Diff\n */\nfunction processDiffForPrompt(diffOutput) {\n    // Maximale Anzahl der Zeichen des Diffs für den Prompt\n    const maxDiffLength = 3000;\n    \n    // Sehr große Diffs erkennen und Warnung ausgeben\n    if (diffOutput.length > 100000) {\n        console.warn(`Extrem großer Diff (${diffOutput.length} Zeichen) wird stark gekürzt.`);\n    }\n    \n    // Intelligente Kürzung: Nur die wichtigsten Änderungen\n    let shortenedDiff = '';\n    \n    try {\n        // Aufteilen nach Dateiänderungen (beginnen mit 'diff --git')\n        const fileChanges = diffOutput.split('diff --git');\n        \n        // Die ersten Änderungen für jede Datei extrahieren (maximal 8 Dateien)\n        const maxFiles = Math.min(8, fileChanges.length);\n        const filesToInclude = fileChanges.slice(0, maxFiles);\n        \n        filesToInclude.forEach((fileChange, index) => {\n            if (index === 0 && !fileChange.trim()) return; // Erstes Element kann leer sein\n            \n            // Dateiinformationen extrahieren\n            const fileNameMatch = fileChange.match(/a\\/(.+?) b\\//);\n            const fileName = fileNameMatch ? fileNameMatch[1] : 'unknown-file';\n            \n            // Jede Dateiänderung auf maximal 500 Zeichen beschränken\n            const maxPerFile = 500;\n            \n            // Nur die relevanten Änderungen erfassen (Zeilen mit + oder - am Anfang)\n            const changesOnly = fileChange\n                .split('\\n')\n                .filter(line => line.startsWith('+') || line.startsWith('-'))\n                .join('\\n')\n                .substring(0, maxPerFile);\n            \n            shortenedDiff += `\\n${index > 0 ? 'diff --git' : ''} a/${fileName} b/${fileName}\\n${changesOnly}`;\n            \n            if (changesOnly.length >= maxPerFile) {\n                shortenedDiff += '\\n...';\n            }\n        });\n        \n        // Kürzen, wenn insgesamt zu lang\n        if (shortenedDiff.length > maxDiffLength) {\n            shortenedDiff = shortenedDiff.substring(0, maxDiffLength);\n            shortenedDiff += '\\n...';\n        }\n        \n        shortenedDiff += `\\n[Diff wurde gekürzt, insgesamt ${diffOutput.length} Zeichen in ${fileChanges.length} Dateien]`;\n    } catch (error) {\n        console.error('Fehler beim intelligenten Kürzen des Diffs:', error);\n        shortenedDiff = diffOutput.substring(0, maxDiffLength) + \n            `\\n...\\n[Diff wurde einfach gekürzt, insgesamt ${diffOutput.length} Zeichen]`;\n    }\n    \n    // Final cleanup und Optimierung\n    return 'Hier ist ein Ausschnitt der konkreten Änderungen:\\n' + shortenedDiff;\n}\n\n// Ersetze die bestehende generateCommitMessage-Funktion mit dieser verbesserten Version\n/**\n * Generiert eine Commit-Nachricht mit dem konfigurierten KI-Modell\n * @param {string} gitStatus Die Ausgabe von git status\n * @param {string} diffOutput Die Ausgabe von git diff\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateCommitMessage(gitStatus, diffOutput) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const aiProvider = config.get('aiProvider');\n        \n        // Generierung des optimierten Prompts\n        const prompt = preparePromptTemplate(gitStatus, diffOutput);\n        \n        // Verschiedene KI-Provider unterstützen\n        let commitMessage = '';\n        switch (aiProvider) {\n            case 'ollama':\n                commitMessage = await generateWithOllama(prompt);\n                break;\n            case 'openai':\n                commitMessage = await generateWithOpenAI(prompt);\n                break;\n            case 'anthropic':\n                commitMessage = await generateWithAnthropic(prompt);\n                break;\n            default:\n                throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\n        }\n        \n        // Nachverarbeitung der Commit-Nachricht\n        return processCommitMessage(commitMessage);\n    } catch (error) {\n        // Fehlerbehandlung\n        handleError(error, 'Commit-Nachricht generieren');\n        \n        // Fallback: Einfache, generische Commit-Nachricht\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings');\n        const language = gitSettings.commitMessageLanguage || 'en';\n        const style = gitSettings.commitMessageStyle || 'conventional';\n        \n        // Basierend auf Sprache und Stil einen Fallback erzeugen\n        if (language === 'de') {\n            return style === 'conventional' ? \n                \"chore: Änderungen gespeichert\" : \n                \"💾 Änderungen gespeichert\";\n        } else {\n            return style === 'conventional' ? \n                \"chore: save changes\" : \n                \"💾 Save changes\";\n        }\n    }\n}\n\n/**\n * Nachverarbeitet die generierte Commit-Nachricht gemäß Projektkonventionen\n * @param {string} rawMessage Die rohe, generierte Nachricht\n * @returns {string} Die verarbeitete Nachricht\n */\nfunction processCommitMessage(rawMessage) {\n    if (!rawMessage) return \"chore: auto commit\";\n    \n    // Leerzeichen und Anführungszeichen entfernen\n    let message = rawMessage.trim()\n        .replace(/^[\"']|[\"']$/g, '')  // Entfernt Anführungszeichen am Anfang und Ende\n        .replace(/\\n/g, ' ');  // Ersetzt Zeilenumbrüche durch Leerzeichen\n    \n    // Übliche Probleme korrigieren\n    message = message\n        // Doppelte Leerzeichen entfernen\n        .replace(/\\s+/g, ' ')\n        // Löscht \"Commit-Nachricht:\" oder \"Commit message:\" am Anfang\n        .replace(/^(commit[- ]message:?\\s*)/i, '')\n        // Entfernt Backticks (wenn die KI Code-Formatierung verwendet)\n        .replace(/^```|```$/g, '');\n    \n    // Korrekturen für Conventional Commits Format\n    const conventionalMatch = message.match(/^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\([\\w-]+\\))?:\\s*(.+)/i);\n    if (conventionalMatch) {\n        // Stellt sicher, dass der Typ kleingeschrieben ist\n        const type = conventionalMatch[1].toLowerCase();\n        // Behält den Scope bei, wenn vorhanden\n        const scope = conventionalMatch[2] || '';\n        // Rest der Nachricht\n        const content = conventionalMatch[3];\n        // Baut die Nachricht neu zusammen\n        message = `${type}${scope}: ${content}`;\n    }\n    \n    // Punkt am Ende entfernen (Konvention)\n    message = message.replace(/\\.$/, '');\n    \n    // Längenbegrenzung (72 Zeichen für erste Zeile)\n    if (message.length > 72) {\n        message = message.substring(0, 69) + '...';\n    }\n    \n    return message;\n}\n\n/**\n * Behandelt das Kommando zur Auswahl des OpenAI-Modells.\n */\nasync function handleOpenAIModelSelectionCommand() {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const currentModel = config.get('openai.model');\n    \n    // Statusbar aktualisieren\n    if (global.statusBarItem) {\n        global.statusBarItem.text = \"$(sync~spin) Comitto: Lade verfügbare Modelle...\";\n    }\n    \n    // Modelle von der OpenAI API abfragen\n    try {\n        const apiKey = config.get('openai.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('OpenAI API-Schlüssel nicht konfiguriert');\n        }\n        \n        // Verfügbare Modelle von der OpenAI API abrufen\n        const response = await axios.get('https://api.openai.com/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        // Statusleiste zurücksetzen\n        if (global.statusBarItem) {\n            global.statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        }\n        \n        if (!response.data || !response.data.data) {\n            throw new Error('Unerwartetes Antwortformat von OpenAI');\n        }\n        \n        // Filtere nur ChatGPT-kompatible Modelle\n        const chatModels = response.data.data\n            .filter(model => \n                model.id.includes('gpt-') && \n                !model.id.includes('-vision-') && \n                !model.id.includes('instruct')\n            )\n            .map(model => model.id)\n            .sort((a, b) => {\n                // GPT-4 Modelle zuerst\n                if (a.includes('gpt-4') && !b.includes('gpt-4')) return -1;\n                if (!a.includes('gpt-4') && b.includes('gpt-4')) return 1;\n                // Dann nach Version sortieren\n                return b.localeCompare(a);\n            });\n        \n        // Füge die statischen Optionen hinzu, falls diese nicht in der API-Antwort enthalten sind\n        const staticModels = [\n            'gpt-4o', 'gpt-4o-mini', 'gpt-4', 'gpt-4-turbo', \n            'gpt-3.5-turbo', 'gpt-3.5-turbo-0125'\n        ];\n        \n        staticModels.forEach(model => {\n            if (!chatModels.includes(model)) {\n                chatModels.unshift(model);\n            }\n        });\n        \n        // Entferne Duplikate\n        const uniqueModels = [...new Set(chatModels)];\n        \n        const selected = await vscode.window.showQuickPick(\n            uniqueModels.map(name => ({\n                label: name,\n                description: name === currentModel ? '(Aktuell)' : ''\n            })),\n            { \n                placeHolder: 'OpenAI-Modell auswählen',\n                ignoreFocusOut: true\n            }\n        );\n        \n        if (selected) {\n            await config.update('openai.model', selected.label, vscode.ConfigurationTarget.Global);\n            vscode.window.showInformationMessage(`OpenAI-Modell auf ${selected.label} gesetzt.`);\n        }\n    } catch (error) {\n        // Statusleiste zurücksetzen\n        if (global.statusBarItem) {\n            global.statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n        }\n        \n        console.error('Fehler beim Laden der OpenAI-Modelle:', error);\n        vscode.window.showWarningMessage(`Fehler beim Laden der Modelle: ${error.message}. Verwende Standard-Liste.`);\n        \n        // Fallback auf statische Liste\n        const models = [\n            'gpt-4o', 'gpt-4o-mini', 'gpt-4', 'gpt-4-turbo',\n            'gpt-4-0125-preview', 'gpt-4-1106-preview',\n            'gpt-4-vision-preview', 'gpt-3.5-turbo',\n            'gpt-3.5-turbo-0125', 'gpt-3.5-turbo-1106'\n        ];\n        \n        const selected = await vscode.window.showQuickPick(\n            models.map(name => ({\n                label: name,\n                description: name === currentModel ? '(Aktuell)' : ''\n            })),\n            { \n                placeHolder: 'OpenAI-Modell auswählen',\n                ignoreFocusOut: true\n            }\n        );\n        \n        if (selected) {\n            await config.update('openai.model', selected.label, vscode.ConfigurationTarget.Global);\n            vscode.window.showInformationMessage(`OpenAI-Modell auf ${selected.label} gesetzt.`);\n        }\n    }\n}\n\n/**\n * Funktion zum Konfigurieren des KI-Providers (kombiniert Auswahl und spezifische Einstellungen)\n * @param {Object} providers UI-Provider-Instanzen\n */\nasync function handleConfigureAIProviderCommand(providers) {\n    try {\n        // Konfiguration abrufen\n        const config = vscode.workspace.getConfiguration('comitto');\n        const currentProvider = config.get('aiProvider');\n        \n        // Provider-Optionen definieren\n        const providerOptions = [\n            { label: 'Ollama (lokal)', id: 'ollama', description: currentProvider === 'ollama' ? '(Aktuell)' : '' },\n            { label: 'OpenAI', id: 'openai', description: currentProvider === 'openai' ? '(Aktuell)' : '' },\n            { label: 'Anthropic Claude', id: 'anthropic', description: currentProvider === 'anthropic' ? '(Aktuell)' : '' }\n        ];\n        \n        // Provider auswählen\n        const selectedProvider = await vscode.window.showQuickPick(providerOptions, {\n            placeHolder: 'KI-Provider auswählen',\n            title: 'Comitto - KI-Provider konfigurieren'\n        });\n        \n        if (selectedProvider) {\n            // Provider ändern, falls nötig\n            if (selectedProvider.id !== currentProvider) {\n                await config.update('aiProvider', selectedProvider.id, vscode.ConfigurationTarget.Global);\n                vscode.window.showInformationMessage(`KI-Provider auf \"${selectedProvider.label}\" gesetzt.`);\n            }\n            \n            // Spezifische Provider-Einstellungen konfigurieren\n            switch (selectedProvider.id) {\n                case 'ollama':\n                    await configureOllamaSettings();\n                    break;\n                case 'openai':\n                    await handleOpenAIModelSelectionCommand();\n                    await handleEditOpenAIKeyCommand();\n                    break;\n                case 'anthropic':\n                    await handleSelectAnthropicModelCommand();\n                    await handleEditAnthropicKeyCommand();\n                    break;\n            }\n            \n            // UI aktualisieren, falls Provider bereitgestellt wurden\n            if (providers) {\n                providers.statusProvider.refresh();\n                providers.settingsProvider.refresh();\n                providers.quickActionsProvider.refresh();\n            }\n        }\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der KI-Provider-Konfiguration: ${error.message}`);\n    }\n}\n\n/**\n * Konfiguriert die Ollama-spezifischen Einstellungen\n * @returns {Promise<boolean>} Erfolgsstatus\n */\nasync function configureOllamaSettings() {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        \n        // Backward-Kompatibilität: Prüfen, ob die fehlerhafte ollama-model Konfiguration verwendet wird\n        let ollamaConfig = config.get('ollama') || {};\n        let ollamaModel = ollamaConfig.model;\n        const ollamaModelOld = config.get('ollama-model');\n        \n        if (!ollamaModel && ollamaModelOld) {\n            // Alte, fehlerhafte Konfiguration gefunden, korrigieren\n            ollamaModel = ollamaModelOld;\n            // Wert auf die korrekte Konfiguration übertragen\n            ollamaConfig.model = ollamaModelOld;\n            await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n            // Fehlerhafte Konfiguration zurücksetzen\n            await config.update('ollama-model', undefined, vscode.ConfigurationTarget.Global);\n            \n            vscode.window.showInformationMessage('Korrektur der Ollama-Modell-Konfiguration durchgeführt.');\n        }\n        \n        // Ollama-Einstellungen abrufen\n        const currentModel = ollamaModel || 'granite3.3:2b';\n        const currentEndpoint = ollamaConfig.endpoint || 'http://localhost:11434';\n        \n        // Auswahloption für Konfiguration\n        const options = [\n            { label: 'Ollama-Modell ändern', id: 'model', description: `Aktuell: ${currentModel}` },\n            { label: 'Ollama-Endpoint ändern', id: 'endpoint', description: `Aktuell: ${currentEndpoint}` }\n        ];\n        \n        const selected = await vscode.window.showQuickPick(options, {\n            placeHolder: 'Ollama-Einstellung konfigurieren',\n            title: 'Comitto - Ollama-Einstellungen'\n        });\n        \n        if (!selected) return false;\n        \n        if (selected.id === 'model') {\n            // Statusleiste aktualisieren\n            if (global.statusBarItem) {\n                global.statusBarItem.text = \"$(sync~spin) Comitto: Lade verfügbare Modelle...\";\n            }\n            \n            // Verfügbare Modelle von Ollama abrufen\n            let availableModels = [];\n            try {\n                const response = await axios.get(`${currentEndpoint}/api/tags`);\n                if (response.data && response.data.models) {\n                    availableModels = response.data.models.map(model => model.name);\n                    vscode.window.showInformationMessage(`${availableModels.length} Ollama-Modelle gefunden.`);\n                }\n            } catch (error) {\n                console.error('Fehler beim Abrufen der Ollama-Modelle:', error);\n                vscode.window.showWarningMessage(`Keine Ollama-Modelle gefunden: ${error.message}. Verwende Standard-Liste.`);\n            } finally {\n                // Statusleiste zurücksetzen\n                if (global.statusBarItem) {\n                    global.statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n                }\n            }\n            \n            // Standardmodelle als Fallback oder Ergänzung\n            const defaultModels = [\n                'granite3.3:2b', 'llama3', 'llama3:8b', 'llama3:70b',\n                'llama2', 'llama2:13b', 'llama2:70b',\n                'mistral', 'mistral:7b-instruct-v0.2',\n                'orca-mini', 'vicuna', 'codellama', 'phi'\n            ];\n            \n            // Kombiniere verfügbare und Standard-Modelle, entferne Duplikate\n            const allModels = [...new Set([...availableModels, ...defaultModels])];\n            \n            // Sortiere Modelle: Stellt \"granite3.3:2b\" an erste Stelle, dann den Rest alphabetisch\n            allModels.sort((a, b) => {\n                if (a === 'granite3.3:2b') return -1;\n                if (b === 'granite3.3:2b') return 1;\n                return a.localeCompare(b);\n            });\n            \n            const result = await vscode.window.showQuickPick(\n                [\n                    ...allModels.map(m => ({ label: m, description: m === currentModel ? '(Aktuell)' : '' })),\n                    { label: 'Benutzerdefiniert...', description: 'Eigenen Modellnamen eingeben' }\n                ],\n                {\n                    placeHolder: 'Ollama-Modell auswählen',\n                    title: 'Comitto - Ollama-Modell'\n                }\n            );\n            \n            if (result) {\n                if (result.label === 'Benutzerdefiniert...') {\n                    const customModel = await vscode.window.showInputBox({\n                        prompt: 'Geben Sie den Namen des Ollama-Modells ein',\n                        value: currentModel,\n                        placeHolder: 'z.B. granite3.3:2b'\n                    });\n                    \n                    if (customModel) {\n                        const ollamaConfig = config.get('ollama') || {};\n                        ollamaConfig.model = customModel;\n                        await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n                        vscode.window.showInformationMessage(`Ollama-Modell auf \"${customModel}\" gesetzt.`);\n                    }\n                } else {\n                    const ollamaConfig = config.get('ollama') || {};\n                    ollamaConfig.model = result.label;\n                    await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n                    vscode.window.showInformationMessage(`Ollama-Modell auf \"${result.label}\" gesetzt.`);\n                }\n            }\n        } else if (selected.id === 'endpoint') {\n            const endpoint = await vscode.window.showInputBox({\n                prompt: 'Geben Sie den Ollama-Endpoint ein',\n                value: currentEndpoint,\n                placeHolder: 'z.B. http://localhost:11434'\n            });\n            \n            if (endpoint) {\n                // Einfache Validierung\n                if (!endpoint.startsWith('http://') && !endpoint.startsWith('https://')) {\n                    vscode.window.showWarningMessage('Der Endpoint sollte mit http:// oder https:// beginnen.');\n                    return false;\n                }\n                \n                const ollamaConfig = config.get('ollama') || {};\n                ollamaConfig.endpoint = endpoint;\n                await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n                vscode.window.showInformationMessage(`Ollama-Endpoint auf \"${endpoint}\" gesetzt.`);\n            }\n        }\n        \n        return true;\n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Ollama-Konfiguration: ${error.message}`);\n        return false;\n    }\n}\n\n/**\n * Vereinfachte Benutzeroberfläche für schnelle Aktionen anzeigen\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers UI-Provider-Instanzen\n */\nasync function showSimpleUI(context, providers) {\n    try {\n        // Panel erstellen oder vorhandenes Panel verwenden\n        let panel = context.globalState.get('comittoSimpleUIPanel');\n        \n        if (panel) {\n            panel.reveal(vscode.ViewColumn.One);\n        } else {\n            panel = vscode.window.createWebviewPanel(\n                'comittoSimpleUI',\n                'Comitto',\n                vscode.ViewColumn.One,\n                {\n                    enableScripts: true,\n                    retainContextWhenHidden: true\n                }\n            );\n            \n            // Panel speichern\n            context.globalState.update('comittoSimpleUIPanel', panel);\n            \n            // Beim Schließen das Panel aus dem State entfernen\n            panel.onDidDispose(\n                () => {\n                    context.globalState.update('comittoSimpleUIPanel', undefined);\n                },\n                null,\n                context.subscriptions\n            );\n            \n            // Nachrichtenhandler hinzufügen\n            panel.webview.onDidReceiveMessage(\n                async (message) => {\n                    switch (message.command) {\n                        case 'commit':\n                            vscode.commands.executeCommand('comitto.performManualCommit');\n                            break;\n                        case 'toggle':\n                            const config = vscode.workspace.getConfiguration('comitto');\n                            const enabled = !config.get('autoCommitEnabled');\n                            await config.update('autoCommitEnabled', enabled, vscode.ConfigurationTarget.Global);\n                            // UI aktualisieren\n                            panel.webview.html = generateSimpleUIHTML(context);\n                            break;\n                        case 'stage':\n                            vscode.commands.executeCommand('comitto.stageAll');\n                            break;\n                        case 'settings':\n                            vscode.commands.executeCommand('comitto.openSettings');\n                            break;\n                        case 'dashboard':\n                            vscode.commands.executeCommand('comitto.showDashboard');\n                            break;\n                    }\n                },\n                undefined,\n                context.subscriptions\n            );\n        }\n        \n        // HTML setzen\n        panel.webview.html = generateSimpleUIHTML(context);\n        \n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler beim Anzeigen der einfachen Benutzeroberfläche: ${error.message}`);\n    }\n}\n\n/**\n * Generiert das HTML für die vereinfachte Benutzeroberfläche\n * @param {vscode.ExtensionContext} context \n * @returns {string} HTML-Inhalt\n */\nfunction generateSimpleUIHTML(context) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const enabled = config.get('autoCommitEnabled');\n    const provider = config.get('aiProvider');\n    const providerName = ui.getProviderDisplayName(provider);\n    \n    return `\n    <!DOCTYPE html>\n    <html lang=\"de\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Comitto</title>\n        <style>\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n                padding: 15px;\n                color: var(--vscode-foreground);\n                background-color: var(--vscode-editor-background);\n            }\n            .container {\n                max-width: 400px;\n                margin: 0 auto;\n                padding: 15px;\n                border-radius: 8px;\n                background-color: var(--vscode-editor-background);\n                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            }\n            h1 {\n                text-align: center;\n                margin-bottom: 20px;\n                color: var(--vscode-editor-foreground);\n            }\n            .status {\n                display: flex;\n                align-items: center;\n                margin-bottom: 15px;\n                padding: 10px;\n                border-radius: 5px;\n                background: ${enabled ? 'rgba(0, 150, 0, 0.1)' : 'rgba(150, 0, 0, 0.1)'};\n            }\n            .status-indicator {\n                width: 12px;\n                height: 12px;\n                border-radius: 50%;\n                margin-right: 10px;\n                background-color: ${enabled ? '#00c853' : '#ff3d00'};\n                box-shadow: 0 0 8px ${enabled ? 'rgba(0, 200, 83, 0.8)' : 'rgba(255, 61, 0, 0.8)'};\n            }\n            .button-group {\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                gap: 10px;\n                margin-bottom: 15px;\n            }\n            button {\n                padding: 10px;\n                border: none;\n                border-radius: 5px;\n                background-color: var(--vscode-button-background);\n                color: var(--vscode-button-foreground);\n                cursor: pointer;\n                font-weight: 600;\n                transition: background-color 0.2s;\n            }\n            button:hover {\n                background-color: var(--vscode-button-hoverBackground);\n            }\n            .main-button {\n                grid-column: span 2;\n                padding: 12px;\n                background-color: #0078D4;\n                color: white;\n                font-size: 1.1em;\n            }\n            .toggle-button {\n                background-color: ${enabled ? '#e53935' : '#43a047'};\n            }\n            .footer {\n                margin-top: 20px;\n                text-align: center;\n                font-size: 0.9em;\n                color: var(--vscode-descriptionForeground);\n            }\n            .info {\n                margin-top: 15px;\n                padding: 10px;\n                border-radius: 5px;\n                background-color: var(--vscode-editor-inactiveSelectionBackground);\n                font-size: 0.9em;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>Comitto</h1>\n            \n            <div class=\"status\">\n                <div class=\"status-indicator\"></div>\n                <div>Status: ${enabled ? 'Aktiviert' : 'Deaktiviert'}</div>\n            </div>\n            \n            <button class=\"main-button\" id=\"commitBtn\">Manuelles Commit 💾</button>\n            \n            <div class=\"button-group\">\n                <button class=\"toggle-button\" id=\"toggleBtn\">\n                    ${enabled ? 'Deaktivieren 🚫' : 'Aktivieren ✅'}\n                </button>\n                <button id=\"stageBtn\">Alle Änderungen stagen 📋</button>\n            </div>\n            \n            <div class=\"button-group\">\n                <button id=\"settingsBtn\">Einstellungen ⚙️</button>\n                <button id=\"dashboardBtn\">Dashboard 📊</button>\n            </div>\n            \n            <div class=\"info\">\n                <p><strong>KI-Provider:</strong> ${providerName}</p>\n            </div>\n            \n            <div class=\"footer\">\n                <p>Comitto - Automatisierte KI-Commits</p>\n            </div>\n        </div>\n        \n        <script>\n            (function() {\n                const vscode = acquireVsCodeApi();\n                \n                document.getElementById('commitBtn').addEventListener('click', () => {\n                    vscode.postMessage({ command: 'commit' });\n                });\n                \n                document.getElementById('toggleBtn').addEventListener('click', () => {\n                    vscode.postMessage({ command: 'toggle' });\n                });\n                \n                document.getElementById('stageBtn').addEventListener('click', () => {\n                    vscode.postMessage({ command: 'stage' });\n                });\n                \n                document.getElementById('settingsBtn').addEventListener('click', () => {\n                    vscode.postMessage({ command: 'settings' });\n                });\n                \n                document.getElementById('dashboardBtn').addEventListener('click', () => {\n                    vscode.postMessage({ command: 'dashboard' });\n                });\n            })();\n        </script>\n    </body>\n    </html>\n    `;\n}\n\n/**\n * Konfiguriert Trigger-Regeln über eine Benutzeroberfläche oder direkt.\n * @param {vscode.ExtensionContext} context \n * @param {Object} providers UI-Provider-Instanzen\n * @returns {Promise<void>}\n */\nasync function handleConfigureTriggersCommand(context, providers) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const rules = config.get('triggerRules');\n        \n        // Optionen für die Konfiguration von Triggern\n        const options = [\n            { label: 'Bei Speichern auslösen', id: 'onSave', picked: rules.onSave, detail: 'Commits werden beim Speichern ausgelöst' },\n            { label: 'Periodisch auslösen', id: 'onInterval', picked: rules.onInterval, detail: 'Commits werden in regelmäßigen Abständen ausgelöst' },\n            { label: 'Bei Branch-Wechsel auslösen', id: 'onBranchSwitch', picked: rules.onBranchSwitch, detail: 'Commits werden beim Wechsel des Branches ausgelöst' },\n            { label: 'Schwellenwerte konfigurieren...', id: 'thresholds', detail: 'Datei-Anzahl, Änderungen und Zeit konfigurieren' },\n            { label: 'Dateimuster konfigurieren...', id: 'patterns', detail: 'Bestimmte Dateitypen überwachen' }\n        ];\n        \n        const result = await vscode.window.showQuickPick(options, {\n            placeHolder: 'Trigger-Regeln konfigurieren',\n            title: 'Comitto - Trigger-Konfiguration',\n            canPickMany: true\n        });\n        \n        if (!result) return;\n        \n        // Verarbeitung der Auswahl\n        const updatedRules = { ...rules };\n        \n        // Boolesche Trigger-Optionen direkt setzen\n        for (const item of result) {\n            if (['onSave', 'onInterval', 'onBranchSwitch'].includes(item.id)) {\n                updatedRules[item.id] = true;\n            }\n        }\n        \n        // Nicht ausgewählte boolesche Optionen ausschalten\n        for (const key of ['onSave', 'onInterval', 'onBranchSwitch']) {\n            if (!result.some(item => item.id === key)) {\n                updatedRules[key] = false;\n            }\n        }\n        \n        // Aktualisierte Regeln speichern\n        await config.update('triggerRules', updatedRules, vscode.ConfigurationTarget.Global);\n        \n        // Zusätzliche Konfigurationen für ausgewählte Optionen\n        for (const item of result) {\n            if (item.id === 'thresholds') {\n                await configureThresholds(updatedRules);\n            } else if (item.id === 'patterns') {\n                await configureFilePatterns(updatedRules);\n            } else if (item.id === 'onInterval' && updatedRules.onInterval) {\n                // Intervall-Dauer konfigurieren, wenn Intervall-Trigger aktiviert ist\n                await handleEditTriggerRuleCommand('intervalMinutes', 'Intervall (Minuten)', 'z.B. 5', 'number');\n            }\n        }\n        \n        // UI aktualisieren\n        if (providers) {\n            providers.statusProvider.refresh();\n            providers.settingsProvider.refresh();\n        }\n        \n    } catch (error) {\n        vscode.window.showErrorMessage(`Fehler bei der Trigger-Konfiguration: ${error.message}`);\n    }\n}\n\n// Notwendige Exporte für externe Module\nmodule.exports = {\n    registerCommands,\n    generateCommitMessage,\n    handleError\n}; ","module.exports = require(\"tty\");","module.exports = require(\"stream\");","module.exports = require(\"assert\");","module.exports = require(\"zlib\");","module.exports = require(\"events\");","module.exports = require(\"child_process\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"crypto\");","module.exports = require(\"url\");","module.exports = require(\"http\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [121,730], () => (__webpack_require__(1449)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 121 ? \"vendor\" : chunkId) + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","installedChunks","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_unsupportedIterableToArray","_arrayLikeToArray","toString","Array","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","outputChannel","statusBarItem","fileWatcher","vscode","require","axios","path","exec","fs","ignore","ui","commands","_require2","executeGitCommand","ComittoError","getStatusText","ErrorTypes","logError","getErrorLogs","getDiagnosticInfo","withRetry","os","changedFiles","WebviewPanel","Set","isCommitInProgress","lastCommitTime","gitignoreObj","uiProviders","intervalTimer","debugLogs","addDebugLog","message","undefined","logEntry","timestamp","Date","toISOString","unshift","console","error","warn","log","concat","debugLog","category","level","workspace","getConfiguration","get","formattedMessage","window","createOutputChannel","appendLine","show","logDir","join","process","env","HOME","USERPROFILE","existsSync","mkdirSync","recursive","logFile","split","appendFileSync","handleError","_x","_handleError","_callee2","contextMessage","showToUser","comittoError","viewDetailsButton","reportButton","messagePrefix","userMessage","issueBody","_args2","_context2","UNKNOWN","context","toJSON","showErrorMessage","showErrorDetails","encodeURIComponent","JSON","stringify","version","extensions","getExtension","packageJSON","openExternal","Uri","parse","panel","createWebviewPanel","ViewColumn","One","enableScripts","diagnosticInfo","webview","html","originalError","stack","onDidReceiveMessage","command","clipboard","writeText","text","showInformationMessage","showErrorLogs","logs","map","index","clearErrorLogs","dispose","showSaveDialog","defaultUri","file","homedir","filters","fileUri","writeFileSync","fsPath","_activate","_callee4","hasGit","_context4","ensureResourceDirs","registerUI","createStatusBarItem","StatusBarAlignment","Left","tooltip","subscriptions","checkGitRepository","executeCommand","registerCommands","setupFileWatcher","disableFileWatcher","performAutoCommit","showNotification","loadGitignore","registerCommand","_callee3","info","_context3","data","setupAutoBackgroundMonitoring","setTimeout","statusProvider","refresh","settingsProvider","quickActionsProvider","showWelcomeNotification","t0","_x3","_checkGitRepository","_callee5","workspaceFolders","repoPath","_context5","uri","dir","dirPath","joinPath","extensionUri","currentVersion","extension","globalState","selection","update","showNotifications","activeTextEditor","gitSettings","useGitignore","repositoryPath","gitignorePath","gitignoreContent","readFileSync","add","triggerRules","filePatterns","createFileSystemWatcher","onDidChange","isFileIgnored","checkCommitTrigger","onDidCreate","onDidDelete","onInterval","setupIntervalTrigger","intervalMinutes","minutes","clearInterval","setInterval","size","onTriggerFired","clear","filePath","includes","relativePath","relative","replace","ignores","rules","specificFiles","hasSpecificFileChanged","some","isArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","changed","hasMinChanges","minChangeCount","hasFileThreshold","fileCountThreshold","timeThresholdMs","timeThresholdMinutes","now","getTime","_performAutoCommit","_callee6","isManualTrigger","retryCount","MAX_RETRIES","config","gitStatus","diffOutput","fileList","commitMessage","dateStr","timeStr","_gitSettings","language","style","escapedMessage","notificationSettings","errorMessage","_args6","_context6","stageChanges","stageMode","t1","t2","trim","t3","t4","generateCommitMessage","t5","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","commitMessageLanguage","commitMessageStyle","branch","t6","t7","t8","onCommit","t9","autoPush","performAutoPush","t10","t11","onError","t12","_x4","_performAutoPush","_callee7","MAX_PUSH_RETRIES","currentBranch","pushOptions","pushCommand","pushSuccess","pushError","_loop","_ret","_context8","_context7","onPush","_x5","_stageChanges","_callee8","mode","gitStatusOutput","changedFilesList","selectedFiles","_iterator","_step","patterns","_iterator2","_step2","pattern","safePattern","_context9","filter","line","status","substring","showQuickPick","label","description","getStatusDescription","picked","canPickMany","placeHolder","_createForOfIteratorHelper","specificStagingPatterns","uiSettings","showWarningMessage","originalText","_generateWithOllama","_callee10","prompt","endpoint","ollamaConfig","model","ollamaModelOld","requestStart","apiEndpoint","response","requestDuration","evalDuration","totalDuration","firstLine","_error$response","_error$response2","_error$response3","_context11","ConfigurationTarget","Global","updateStatusBarProgress","endsWith","post","stream","options","temperature","num_predict","toFixed","eval_duration","total_duration","code","_generateWithOpenAI","_callee11","apiKey","_error$response4","_context12","messages","role","content","max_tokens","headers","choices","_generateWithAnthropic","_callee12","_error$response5","_context13","system","_callee","debugSettings","_context","absolutePath","extendedLogging","module","exports","activate","_x2","deactivate","generateWithOllama","_x8","generateWithOpenAI","_x9","generateWithAnthropic","_x10","_require","handleEditTriggerRuleCommand","_handleEditTriggerRuleCommand","_callee41","ruleKey","promptText","inputType","currentValue","valueToString","processedValue","_context41","_objectSpread","showInputBox","validateInput","num","parseInt","handleToggleTriggerRuleCommand","_x6","_handleToggleTriggerRuleCommand","_callee42","settingName","newValue","updatedRules","_context42","_defineProperty","handleEditGitSettingCommand","_x7","_handleEditGitSettingCommand","_callee43","settingKey","_context43","handleToggleGitSettingCommand","_x11","_handleToggleGitSettingCommand","_callee44","_context44","handleSelectGitSettingCommand","_x12","_x13","_x14","_handleSelectGitSettingCommand","_callee45","selected","_context45","opt","ignoreFocusOut","handleToggleUISettingCommand","_x15","_x16","_handleToggleUISettingCommand","_callee46","_context46","handleEditOpenAIKeyCommand","_handleEditOpenAIKeyCommand","_callee47","_context47","password","handleSelectAnthropicModelCommand","_handleSelectAnthropicModelCommand","_callee48","currentModel","models","_context48","handleEditAnthropicKeyCommand","_handleEditAnthropicKeyCommand","_callee49","_context49","handleEditPromptTemplateCommand","_handleEditPromptTemplateCommand","_callee51","document","disposable","closeDisposable","_context51","openTextDocument","showTextDocument","onDidSaveTextDocument","_ref41","_callee50","doc","newContent","_context50","getText","_x27","onDidCloseTextDocument","handleShowDashboardCommand","_x17","_handleShowDashboardCommand","_callee53","_context53","reveal","retainContextWhenHidden","localResourceRoots","onDidDispose","_ref42","_callee52","currentPanel","enabled","_currentPanel","_context52","generateDashboardHTML","postMessage","_x28","provider","providerName","getProviderDisplayName","providerIcon","getProviderIcon","providerModel","dashboardJsUri","styleUri","animationsUri","logoUri","dashboardJsWebviewUri","asWebviewUri","styleWebviewUri","animationsWebviewUri","logoWebviewUri","nonce","possible","Math","floor","random","getNonce","pkgPath","cspSource","id","onSave","onBranchSwitch","getStageModeLabel","handleCommitMessageLanguageCommand","_handleCommitMessageLanguageCommand","_callee54","languageOptions","selectedLanguage","promptTemplate","_context54","title","handleSelectStageModeCommand","_handleSelectStageModeCommand","_callee55","currentMode","modes","_context55","detail","handleEditStagingPatternsCommand","_handleEditStagingPatternsCommand","_callee56","currentPatterns","input","_context56","handleStageAllCommand","_handleStageAllCommand","_callee57","workspaceFolder","statusBarMessage","_context57","setStatusBarMessage","handleStageSelectedCommand","_handleStageSelectedCommand","_callee58","statusOutput","selectedItems","filesToStage","_context58","item","handleSelectThemeCommand","_handleSelectThemeCommand","_callee59","currentTheme","themes","_context59","theme","handleToggleNotificationSettingCommand","_x18","_x19","_handleToggleNotificationSettingCommand","_callee60","notifications","updatedNotifications","_context60","originalMessage","preparePromptTemplate","changes","languageText","toLowerCase","maxDiffLength","shortenedDiff","fileChanges","maxFiles","min","fileChange","fileNameMatch","match","fileName","changesOnly","startsWith","processDiffForPrompt","_generateCommitMessage","_callee61","aiProvider","_config","_context61","processCommitMessage","rawMessage","conventionalMatch","scope","handleOpenAIModelSelectionCommand","_handleOpenAIModelSelectionCommand","_callee62","chatModels","uniqueModels","_selected","_context62","global","sort","b","localeCompare","_toConsumableArray","handleConfigureAIProviderCommand","_x22","_handleConfigureAIProviderCommand","_callee63","providers","currentProvider","providerOptions","selectedProvider","_context63","configureOllamaSettings","_configureOllamaSettings","_callee64","ollamaModel","currentEndpoint","availableModels","defaultModels","allModels","result","customModel","_ollamaConfig","_ollamaConfig2","_ollamaConfig3","_context64","m","_showSimpleUI","_callee66","_context66","_ref43","_callee65","_context65","generateSimpleUIHTML","_x29","handleConfigureTriggersCommand","_x25","_x26","_handleConfigureTriggersCommand","_callee67","_i","_arr","_item","_context68","err","key","_context67","configureThresholds","configureFilePatterns","shouldProceed","confirmBeforeCommit","modal","_callee9","_context10","_callee13","_callee14","_context14","_callee15","_context15","_callee16","_context16","_callee17","_context17","_callee18","_context18","_callee19","_context19","_callee20","_context20","_callee21","_context21","_callee22","_context22","_callee23","_context23","_callee24","_context24","_callee25","_context25","_callee26","_context26","getCommands","cmds","_callee27","_context27","_callee28","_context28","_callee29","_context29","_callee30","_context30","_callee31","_context31","_callee32","_context32","_callee33","_context33","_callee34","_context34","_callee35","_context35","_callee36","_context36","_callee37","_context37","_callee38","_context38","_callee39","_context39","_callee40","_context40","_x23","_x24","showSimpleUI","_x20","_x21","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","chunkId","all","reduce","promises","obj","prop","chunk","moreModules","modules","ids","runtime","installChunk"],"sourceRoot":""}