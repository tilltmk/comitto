{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://comitto/webpack/runtime/chunk loaded","webpack://comitto/webpack/runtime/startup chunk dependencies","webpack://comitto/webpack/runtime/require chunk loading","webpack://comitto/./extension.js","webpack://comitto/external node-commonjs \"os\"","webpack://comitto/external commonjs \"vscode\"","webpack://comitto/./commands.js","webpack://comitto/external node-commonjs \"tty\"","webpack://comitto/external node-commonjs \"stream\"","webpack://comitto/external node-commonjs \"assert\"","webpack://comitto/external node-commonjs \"zlib\"","webpack://comitto/external node-commonjs \"events\"","webpack://comitto/external node-commonjs \"child_process\"","webpack://comitto/external node-commonjs \"https\"","webpack://comitto/external node-commonjs \"path\"","webpack://comitto/external node-commonjs \"crypto\"","webpack://comitto/external node-commonjs \"url\"","webpack://comitto/external node-commonjs \"http\"","webpack://comitto/external node-commonjs \"util\"","webpack://comitto/external node-commonjs \"fs\"","webpack://comitto/webpack/bootstrap","webpack://comitto/webpack/runtime/ensure chunk","webpack://comitto/webpack/runtime/get javascript chunk filename","webpack://comitto/webpack/runtime/hasOwnProperty shorthand","webpack://comitto/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t__webpack_require__.e(121);\n\t__webpack_require__.e(730);\n\treturn next();\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t217: 1,\n\t606: 1\n};\n\n__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\t__webpack_require__.O();\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","const vscode = require('vscode');\nconst axios = require('axios');\nconst { exec } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst ignore = require('ignore');\nconst ui = require('./ui');\nconst commands = require('./commands');\nconst { executeGitCommand, getStatusText, ComittoError, ErrorTypes, logError, getErrorLogs, withRetry, getDiagnosticInfo, updateStatusBarProgress } = require('./utils');\nconst os = require('os');\nconst { WebviewPanel } = require('vscode');\n\n/**\n * @type {vscode.OutputChannel}\n */\nlet outputChannel;\n\n/**\n * @type {vscode.StatusBarItem}\n */\nlet statusBarItem;\n\n/**\n * @type {vscode.FileSystemWatcher}\n */\nlet fileWatcher;\n\n/**\n * @type {Set<string>}\n */\nlet changedFiles = new Set();\n\n/**\n * @type {boolean}\n */\nlet isCommitInProgress = false;\n\n/**\n * @type {Date|null}\n */\nlet lastCommitTime = null;\n\n/**\n * @type {Object}\n */\nlet gitignoreObj = null;\n\n/**\n * @type {Object}\n */\nlet uiProviders = null;\n\n/**\n * @type {NodeJS.Timeout}\n */\nlet intervalTimer = null;\n\n// Globale Variable für Debug-Logs\nlet debugLogs = [];\nconst MAX_DEBUG_LOGS = 100;\n\n/**\n * Fügt einen Eintrag zum Debug-Log hinzu\n * @param {string} message Die Nachricht\n * @param {string} type Der Typ des Logs (info, warning, error)\n */\nfunction addDebugLog(message, type = 'info') {\n    const timestamp = new Date().toISOString();\n    const logEntry = { timestamp, message, type };\n    \n    debugLogs.unshift(logEntry); // Am Anfang einfügen\n    \n    // Maximale Größe einhalten\n    if (debugLogs.length > MAX_DEBUG_LOGS) {\n        debugLogs = debugLogs.slice(0, MAX_DEBUG_LOGS);\n    }\n    \n    // In die Konsole schreiben\n    const consoleMethod = type === 'error' ? console.error : \n                         type === 'warning' ? console.warn : \n                         console.log;\n    consoleMethod(`[Comitto Debug] ${message}`);\n    \n    // An LogsViewProvider weiterleiten, falls verfügbar\n    if (uiProviders && uiProviders.logsProvider) {\n        uiProviders.logsProvider.addLog(message, type);\n    }\n    \n    // Auf Webview-Updates verzichten, da dies Fehler verursacht\n    // Stattdessen werden wir die Debug-Logs beim Öffnen des Dashboards aktualisieren\n}\n\n/**\n * Verbesserte Debug-Protokollierungsfunktion\n */\nfunction debugLog(message, category = 'allgemein', level = 'info') {\n    const config = vscode.workspace.getConfiguration('comitto');\n    if (!config.get('debug')) return;\n    \n    const timestamp = new Date().toISOString();\n    const formattedMessage = `[${timestamp}] [${category}] [${level}] ${message}`;\n    \n    console.log(formattedMessage);\n    \n    // Debug-Ausgabe in Ausgabekanal\n    if (!outputChannel) {\n        outputChannel = vscode.window.createOutputChannel('Comitto Debug');\n    }\n    \n    outputChannel.appendLine(formattedMessage);\n    \n    // Bei Fehlern das Debug-Panel anzeigen\n    if (level === 'error') {\n        outputChannel.show(true);\n    }\n    \n    // Optional: In Datei protokollieren\n    try {\n        const logDir = path.join(process.env.HOME || process.env.USERPROFILE, '.comitto', 'logs');\n        if (!fs.existsSync(logDir)) {\n            fs.mkdirSync(logDir, { recursive: true });\n        }\n        \n        const logFile = path.join(logDir, `debug_${new Date().toISOString().split('T')[0]}.log`);\n        fs.appendFileSync(logFile, formattedMessage + '\\n');\n    } catch (e) {\n        console.error('Fehler beim Schreiben des Debug-Protokolls:', e);\n    }\n}\n\n/**\n * Fehlerbehandlungsfunktion für die Erweiterung\n * @param {Error|ComittoError} error - Der aufgetretene Fehler\n * @param {string} contextMessage - Kontextbezogene Nachricht\n * @param {boolean} showToUser - Ob der Fehler dem Benutzer angezeigt werden soll\n */\nasync function handleError(error, contextMessage = '', showToUser = true) {\n    // Sicherstellen, dass wir mit einem ComittoError arbeiten\n    const comittoError = error instanceof ComittoError ? error : \n        new ComittoError(\n            error.message || 'Unbekannter Fehler',\n            ErrorTypes.UNKNOWN,\n            error,\n            { context: contextMessage }\n        );\n    \n    // Fehler protokollieren\n    logError(comittoError);\n    \n    // Debug-Ausgabe\n    debugLog(\n        `Fehler: ${comittoError.message}${contextMessage ? ' - ' + contextMessage : ''}`,\n        'fehler',\n        'error'\n    );\n    \n    // Detaillierte Informationen in die Konsole schreiben\n    console.error('Detaillierter Fehler:', comittoError.toJSON());\n    \n    // Benutzerbenachrichtigung, falls erforderlich\n    if (showToUser) {\n        const viewDetailsButton = 'Details anzeigen';\n        const reportButton = 'Problem melden';\n        \n        const messagePrefix = contextMessage ? `${contextMessage}: ` : '';\n        const userMessage = await vscode.window.showErrorMessage(\n            `${messagePrefix}${comittoError.message}`, \n            viewDetailsButton,\n            reportButton\n        );\n        \n        if (userMessage === viewDetailsButton) {\n            // Details in neuem Fenster anzeigen\n            showErrorDetails(comittoError);\n        } else if (userMessage === reportButton) {\n            // Öffne GitHub Issues oder sende Fehlerbericht\n            const issueBody = encodeURIComponent(\n                `## Fehlerbeschreibung\\n${comittoError.message}\\n\\n` +\n                `## Kontext\\n${contextMessage || 'Nicht angegeben'}\\n\\n` +\n                `## Fehlerdetails\\n\\`\\`\\`json\\n${JSON.stringify(comittoError.toJSON(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                `## Diagnostische Informationen\\n\\`\\`\\`json\\n${JSON.stringify(getDiagnosticInfo(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                `## Schritte zur Reproduktion\\n\\n` +\n                `## Erwartetes Verhalten\\n\\n` +\n                `## VSCode-Version\\n${vscode.version}\\n\\n` +\n                `## Comitto-Version\\n${vscode.extensions.getExtension('publisher.comitto').packageJSON.version || 'Unbekannt'}`\n            );\n            \n            vscode.env.openExternal(\n                vscode.Uri.parse(`https://github.com/publisher/comitto/issues/new?body=${issueBody}&title=Fehler: ${encodeURIComponent(comittoError.message)}`)\n            );\n        }\n    }\n}\n\n/**\n * Zeigt detaillierte Fehlerinformationen in einem Webview-Panel an\n * @param {ComittoError} error - Der anzuzeigende Fehler\n */\nfunction showErrorDetails(error) {\n    const panel = vscode.window.createWebviewPanel(\n        'comittoErrorDetails',\n        'Comitto Fehlerdetails',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true\n        }\n    );\n    \n    const diagnosticInfo = getDiagnosticInfo();\n    \n    panel.webview.html = `\n        <!DOCTYPE html>\n        <html lang=\"de\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Comitto Fehlerdetails</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                h2 {\n                    margin-top: 20px;\n                    margin-bottom: 10px;\n                    border-bottom: 1px solid var(--vscode-editor-lineHighlightBorder);\n                    padding-bottom: 5px;\n                }\n                pre {\n                    background-color: var(--vscode-editor-background);\n                    padding: 15px;\n                    border-radius: 4px;\n                    overflow: auto;\n                }\n                .error-section {\n                    margin-bottom: 20px;\n                }\n                .label {\n                    font-weight: bold;\n                    margin-right: 10px;\n                }\n                .actions {\n                    margin-top: 20px;\n                }\n                button {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    margin-right: 10px;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n            </style>\n        </head>\n        <body>\n            <h1>Fehlerdetails</h1>\n            \n            <div class=\"error-section\">\n                <h2>Fehlerinformationen</h2>\n                <div><span class=\"label\">Typ:</span> ${error.type}</div>\n                <div><span class=\"label\">Nachricht:</span> ${error.message}</div>\n                <div><span class=\"label\">Zeitstempel:</span> ${error.timestamp.toISOString()}</div>\n            </div>\n            \n            <div class=\"error-section\">\n                <h2>Fehlerkontext</h2>\n                <pre>${JSON.stringify(error.context, null, 2)}</pre>\n            </div>\n            \n            ${error.originalError ? `\n                <div class=\"error-section\">\n                    <h2>Ursprünglicher Fehler</h2>\n                    <div><span class=\"label\">Typ:</span> ${error.originalError.name}</div>\n                    <div><span class=\"label\">Nachricht:</span> ${error.originalError.message}</div>\n                </div>\n            ` : ''}\n            \n            <div class=\"error-section\">\n                <h2>Stack-Trace</h2>\n                <pre>${error.stack}</pre>\n            </div>\n            \n            <div class=\"error-section\">\n                <h2>Diagnostische Informationen</h2>\n                <pre>${JSON.stringify(diagnosticInfo, null, 2)}</pre>\n            </div>\n            \n            <div class=\"actions\">\n                <button id=\"copyDetails\">Details kopieren</button>\n                <button id=\"reportIssue\">Problem melden</button>\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                document.getElementById('copyDetails').addEventListener('click', () => {\n                    const errorDetails = ${JSON.stringify(JSON.stringify({\n                        error: error.toJSON(),\n                        diagnosticInfo\n                    }, null, 2))};\n                    vscode.postMessage({\n                        command: 'copyToClipboard',\n                        text: errorDetails\n                    });\n                });\n                \n                document.getElementById('reportIssue').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'reportIssue',\n                        error: ${JSON.stringify(error.toJSON())}\n                    });\n                });\n            </script>\n        </body>\n        </html>\n    `;\n    \n    panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.command) {\n                case 'copyToClipboard':\n                    vscode.env.clipboard.writeText(message.text);\n                    vscode.window.showInformationMessage('Fehlerdetails wurden in die Zwischenablage kopiert');\n                    break;\n                case 'reportIssue':\n                    const issueBody = encodeURIComponent(\n                        `## Fehlerbeschreibung\\n${error.message}\\n\\n` +\n                        `## Fehlerdetails\\n\\`\\`\\`json\\n${JSON.stringify(error.toJSON(), null, 2)}\\n\\`\\`\\`\\n\\n` +\n                        `## Diagnostische Informationen\\n\\`\\`\\`json\\n${JSON.stringify(diagnosticInfo, null, 2)}\\n\\`\\`\\`\\n\\n` +\n                        `## Schritte zur Reproduktion\\n\\n` +\n                        `## Erwartetes Verhalten\\n\\n` +\n                        `## VSCode-Version\\n${vscode.version}\\n\\n` +\n                        `## Comitto-Version\\n${vscode.extensions.getExtension('publisher.comitto').packageJSON.version || 'Unbekannt'}`\n                    );\n                    \n                    vscode.env.openExternal(\n                        vscode.Uri.parse(`https://github.com/publisher/comitto/issues/new?body=${issueBody}&title=Fehler: ${encodeURIComponent(error.message)}`)\n                    );\n                    break;\n            }\n        },\n        undefined,\n        undefined\n    );\n}\n\n/**\n * Zeigt eine Liste der neuesten Fehlerprotokolle an\n */\nfunction showErrorLogs() {\n    const logs = getErrorLogs();\n    \n    const panel = vscode.window.createWebviewPanel(\n        'comittoErrorLogs',\n        'Comitto Fehlerprotokolle',\n        vscode.ViewColumn.One,\n        {\n            enableScripts: true\n        }\n    );\n    \n    panel.webview.html = `\n        <!DOCTYPE html>\n        <html lang=\"de\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Comitto Fehlerprotokolle</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                h1 {\n                    margin-bottom: 20px;\n                }\n                .log-entry {\n                    margin-bottom: 20px;\n                    padding: 15px;\n                    background-color: var(--vscode-editor-background);\n                    border-radius: 4px;\n                    border-left: 4px solid #e74c3c;\n                }\n                .log-entry-header {\n                    display: flex;\n                    justify-content: space-between;\n                    margin-bottom: 10px;\n                }\n                .log-type {\n                    font-weight: bold;\n                    color: #e74c3c;\n                }\n                .log-timestamp {\n                    color: var(--vscode-descriptionForeground);\n                }\n                .log-message {\n                    margin-bottom: 10px;\n                }\n                .log-details-button {\n                    background: none;\n                    border: 1px solid var(--vscode-button-background);\n                    color: var(--vscode-button-background);\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                }\n                .log-details {\n                    display: none;\n                    margin-top: 10px;\n                    padding: 10px;\n                    background-color: var(--vscode-editor-inactiveSelectionBackground);\n                    border-radius: 4px;\n                }\n                .log-details pre {\n                    white-space: pre-wrap;\n                    word-break: break-all;\n                }\n                .actions {\n                    margin-top: 20px;\n                }\n                button {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    margin-right: 10px;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n                .no-logs {\n                    margin: 30px 0;\n                    text-align: center;\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n            </style>\n        </head>\n        <body>\n            <h1>Fehlerprotokolle</h1>\n            \n            ${logs.length === 0 ? \n                '<div class=\"no-logs\">Keine Fehlerprotokolle vorhanden</div>' : \n                logs.map((log, index) => `\n                    <div class=\"log-entry\">\n                        <div class=\"log-entry-header\">\n                            <span class=\"log-type\">${log.type}</span>\n                            <span class=\"log-timestamp\">${log.timestamp}</span>\n                        </div>\n                        <div class=\"log-message\">${log.message}</div>\n                        <button class=\"log-details-button\" onclick=\"toggleDetails(${index})\">Details anzeigen</button>\n                        <div id=\"details-${index}\" class=\"log-details\">\n                            <pre>${JSON.stringify(log, null, 2)}</pre>\n                        </div>\n                    </div>\n                `).join('')\n            }\n            \n            <div class=\"actions\">\n                <button id=\"clearLogs\">Protokolle löschen</button>\n                <button id=\"exportLogs\">Protokolle exportieren</button>\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                function toggleDetails(index) {\n                    const details = document.getElementById('details-' + index);\n                    const button = details.previousElementSibling;\n                    \n                    if (details.style.display === 'block') {\n                        details.style.display = 'none';\n                        button.textContent = 'Details anzeigen';\n                    } else {\n                        details.style.display = 'block';\n                        button.textContent = 'Details ausblenden';\n                    }\n                }\n                \n                document.getElementById('clearLogs').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'clearLogs'\n                    });\n                });\n                \n                document.getElementById('exportLogs').addEventListener('click', () => {\n                    vscode.postMessage({\n                        command: 'exportLogs',\n                        logs: ${JSON.stringify(logs)}\n                    });\n                });\n            </script>\n        </body>\n        </html>\n    `;\n    \n    panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.command) {\n                case 'clearLogs':\n                    clearErrorLogs();\n                    vscode.window.showInformationMessage('Fehlerprotokolle wurden gelöscht');\n                    panel.dispose();\n                    break;\n                case 'exportLogs':\n                    vscode.window.showSaveDialog({\n                        defaultUri: vscode.Uri.file(path.join(os.homedir(), 'comitto_error_logs.json')),\n                        filters: {\n                            'JSON-Dateien': ['json']\n                        }\n                    }).then(fileUri => {\n                        if (fileUri) {\n                            fs.writeFileSync(fileUri.fsPath, JSON.stringify(message.logs, null, 2));\n                            vscode.window.showInformationMessage(`Fehlerprotokolle wurden nach ${fileUri.fsPath} exportiert`);\n                        }\n                    });\n                    break;\n            }\n        },\n        undefined,\n        undefined\n    );\n}\n\n/**\n * Hauptaktivierungsfunktion der Erweiterung.\n * @param {vscode.ExtensionContext} context\n */\nasync function activate(context) {\n    try {\n        debugLog('Comitto-Erweiterung wird aktiviert', 'aktivierung', 'info');\n        \n        addDebugLog('Die Erweiterung \"comitto\" wird aktiviert.', 'info');\n\n        // Sicherstellen, dass das Ressourcenverzeichnis existiert\n        ensureResourceDirs(context);\n\n        // UI-Komponenten registrieren\n        const mainViewProvider = new ui.MainViewProvider(context);\n        const logsViewProvider = new ui.LogsViewProvider(context);\n        const dashboardProvider = new ui.DashboardProvider(context);\n        const simpleUIProvider = new ui.SimpleUIProvider(context);\n        \n        // Tree Views registrieren\n        const mainTreeView = vscode.window.createTreeView('comitto-main', {\n            treeDataProvider: mainViewProvider,\n            showCollapseAll: true\n        });\n        \n        const logsTreeView = vscode.window.createTreeView('comitto-logs', {\n            treeDataProvider: logsViewProvider,\n            showCollapseAll: false\n        });\n        \n        context.subscriptions.push(mainTreeView, logsTreeView);\n        \n        // UI-Provider-Objekt für die Befehle\n        uiProviders = {\n            mainProvider: mainViewProvider,\n            logsProvider: logsViewProvider,\n            dashboardProvider: dashboardProvider,\n            simpleUIProvider: simpleUIProvider,\n            // Für Kompatibilität mit bestehenden Befehlen\n            statusProvider: mainViewProvider,\n            settingsProvider: mainViewProvider,\n            quickActionsProvider: mainViewProvider\n        };\n\n        // Statusleistenelement erstellen\n        statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n        statusBarItem.text = \"$(git-commit) Comitto: Initialisiere...\";\n        statusBarItem.tooltip = \"Comitto: Klicke zum Aktivieren/Deaktivieren oder manuellen Commit\";\n        statusBarItem.command = \"comitto.toggleAutoCommit\"; // Standardaktion\n        context.subscriptions.push(statusBarItem);\n        statusBarItem.show();\n\n        // Git-Status prüfen und Kontext setzen\n        const hasGit = await checkGitRepository(context);\n        vscode.commands.executeCommand('setContext', 'workspaceHasGit', hasGit);\n        \n        if (hasGit) {\n            addDebugLog('Git-Repository gefunden.', 'info');\n        } else {\n            addDebugLog('Kein Git-Repository gefunden. Einige Funktionen sind deaktiviert.', 'warning');\n        }\n\n        // Befehle zentral registrieren und Abhängigkeiten übergeben\n        commands.registerCommands(\n            context,\n            uiProviders,\n            statusBarItem,\n            setupFileWatcher,       // Funktion übergeben\n            disableFileWatcher,     // Funktion übergeben\n            performAutoCommit,      // Funktion übergeben\n            showNotification        // Funktion übergeben\n        );\n        \n        // clearLogs Command registrieren\n        context.subscriptions.push(\n            vscode.commands.registerCommand('comitto.clearLogs', () => {\n                uiProviders.logsProvider.clearLogs();\n                showNotification('Debug-Logs gelöscht', 'info');\n            })\n        );\n        \n        // .gitignore einlesen, wenn vorhanden und konfiguriert\n        loadGitignore();\n\n        // Initialen Status setzen und FileSystemWatcher/Timer ggf. starten\n        const config = vscode.workspace.getConfiguration('comitto');\n        if (config.get('autoCommitEnabled') && hasGit) {\n            setupFileWatcher(context);\n            statusBarItem.text = \"$(sync~spin) Comitto: Aktiv\";\n            addDebugLog('Comitto wurde automatisch aktiviert.', 'info');\n        } else if (!hasGit) {\n            statusBarItem.text = \"$(warning) Comitto: Kein Git-Repo\";\n            statusBarItem.tooltip = \"Kein Git-Repository im aktuellen Workspace gefunden\";\n            statusBarItem.command = undefined; // Keine Aktion bei Klick\n        } else {\n            statusBarItem.text = \"$(git-commit) Comitto: Inaktiv\";\n        }\n\n        // Debugging-Befehle registrieren\n        context.subscriptions.push(\n            vscode.commands.registerCommand('comitto.showErrorLogs', showErrorLogs),\n            vscode.commands.registerCommand('comitto.openDebugConsole', () => {\n                if (!outputChannel) {\n                    outputChannel = vscode.window.createOutputChannel('Comitto Debug');\n                }\n                outputChannel.show();\n            }),\n            vscode.commands.registerCommand('comitto.diagnosticInfo', async () => {\n                const info = getDiagnosticInfo();\n                const panel = vscode.window.createWebviewPanel(\n                    'comittoDiagnostics',\n                    'Comitto Diagnose',\n                    vscode.ViewColumn.One,\n                    { enableScripts: true }\n                );\n                \n                panel.webview.html = `\n                    <!DOCTYPE html>\n                    <html lang=\"de\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <title>Comitto Diagnose</title>\n                        <style>\n                            body { padding: 20px; font-family: var(--vscode-font-family); }\n                            pre { background-color: var(--vscode-editor-background); padding: 15px; }\n                            button {\n                                background-color: var(--vscode-button-background);\n                                color: var(--vscode-button-foreground);\n                                border: none;\n                                padding: 8px 16px;\n                                border-radius: 4px;\n                                cursor: pointer;\n                                margin-right: 10px;\n                            }\n                        </style>\n                    </head>\n                    <body>\n                        <h1>Comitto Diagnose</h1>\n                        <pre>${JSON.stringify(info, null, 2)}</pre>\n                        <button id=\"copyBtn\">In Zwischenablage kopieren</button>\n                        \n                        <script>\n                            const vscode = acquireVsCodeApi();\n                            document.getElementById('copyBtn').addEventListener('click', () => {\n                                vscode.postMessage({ command: 'copy', data: ${JSON.stringify(JSON.stringify(info, null, 2))} });\n                            });\n                        </script>\n                    </body>\n                    </html>\n                `;\n                \n                panel.webview.onDidReceiveMessage(message => {\n                    if (message.command === 'copy') {\n                        vscode.env.clipboard.writeText(message.data);\n                        vscode.window.showInformationMessage('Diagnostische Informationen in die Zwischenablage kopiert');\n                    }\n                });\n            })\n        );\n        \n        // Automatische Hintergrundüberwachung einrichten\n        setupAutoBackgroundMonitoring(context);\n        \n        // Eventuell kurze Verzögerung für initiale UI-Aktualisierung\n        setTimeout(() => {\n            if (uiProviders) {\n                uiProviders.statusProvider.refresh();\n                uiProviders.settingsProvider.refresh();\n                uiProviders.quickActionsProvider.refresh();\n            }\n        }, 1500);\n\n        // Willkommensnachricht anzeigen (einmalig)\n        showWelcomeNotification(context);\n\n        debugLog('Comitto-Erweiterung erfolgreich aktiviert', 'aktivierung', 'info');\n    } catch (error) {\n        handleError(error, 'Fehler beim Aktivieren der Erweiterung', true);\n    }\n}\n\n/**\n * Prüft, ob im Workspace ein Git-Repository vorhanden ist.\n * @param {vscode.ExtensionContext} context\n * @returns {Promise<boolean>}\n */\nasync function checkGitRepository(context) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders || workspaceFolders.length === 0) {\n        return false;\n    }\n    const repoPath = workspaceFolders[0].uri.fsPath;\n    try {\n        await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\n        console.log('Git-Repository gefunden.');\n        return true;\n    } catch (error) {\n        console.log('Kein Git-Repository gefunden oder Git nicht verfügbar.');\n        return false;\n    }\n}\n\n/**\n * Stellt sicher, dass die notwendigen Ressourcenverzeichnisse existieren.\n * @param {vscode.ExtensionContext} context \n */\nfunction ensureResourceDirs(context) {\n    const dirsToEnsure = ['resources', 'resources/ui'];\n    dirsToEnsure.forEach(dir => {\n        const dirPath = vscode.Uri.joinPath(context.extensionUri, dir).fsPath;\n        if (!fs.existsSync(dirPath)) {\n            try {\n                fs.mkdirSync(dirPath, { recursive: true });\n                console.log(`Verzeichnis erstellt: ${dirPath}`);\n            } catch (error) {\n                console.error(`Fehler beim Erstellen des Verzeichnisses ${dirPath}:`, error);\n            }\n        }\n    });\n}\n\n/**\n * Zeigt eine Willkommensnachricht beim ersten Start nach einer Installation/Update.\n * @param {vscode.ExtensionContext} context\n */\nfunction showWelcomeNotification(context) {\n    const currentVersion = context.extension.packageJSON.version;\n    const previousVersion = context.globalState.get('comitto.version');\n\n    if (previousVersion !== currentVersion) {\n        // Nach erstem Start oder Update anzeigen\n        vscode.window.showInformationMessage(\n            `Comitto v${currentVersion} wurde aktiviert! Konfigurieren Sie es über die Seitenleiste.`,\n            'Seitenleiste öffnen', 'Changelog anzeigen'\n        ).then(selection => {\n            if (selection === 'Seitenleiste öffnen') {\n                vscode.commands.executeCommand('workbench.view.extension.comitto-sidebar');\n            } else if (selection === 'Changelog anzeigen') {\n                // Prüfen, ob die Nachricht bereits angezeigt wurde\n                const hasShownWelcome = context.globalState.get('comitto.hasShownWelcome', false);\n                if (!hasShownWelcome) {\n                    vscode.window.showInformationMessage(\n                        'Comitto wurde aktiviert! Öffnen Sie die Comitto-Seitenleiste über das Icon in der Activity Bar.',\n                        'Öffnen', 'Nicht mehr anzeigen'\n                    ).then(selection => {\n                        if (selection === 'Öffnen') {\n                            vscode.commands.executeCommand('comitto-sidebar.focus');\n                        } else if (selection === 'Nicht mehr anzeigen') {\n                            context.globalState.update('comitto.hasShownWelcome', true);\n                        }\n                    });\n                }\n            }\n        });\n        // Version speichern\n        context.globalState.update('comitto.version', currentVersion);\n    }\n\n    // Status der UI anzeigen\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = config.get('uiSettings');\n    \n    if (uiSettings.showNotifications) {\n        setTimeout(() => {\n            if (vscode.window.activeTextEditor) {\n                vscode.window.showInformationMessage(\n                    'Comitto ist bereit! Verwenden Sie die Seitenleiste oder das $(git-commit) Symbol in der Statusleiste.',\n                    'Einstellungen öffnen', 'Dashboard anzeigen'\n                ).then(selection => {\n                    if (selection === 'Einstellungen öffnen') {\n                        vscode.commands.executeCommand('comitto.openSettings');\n                    } else if (selection === 'Dashboard anzeigen') {\n                        vscode.commands.executeCommand('comitto.showDashboard');\n                    }\n                });\n            }\n        }, 2000);\n    }\n}\n\n/**\n * .gitignore-Datei laden und Parser erstellen\n */\nfunction loadGitignore() {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) return;\n\n    const gitSettings = vscode.workspace.getConfiguration('comitto').get('gitSettings');\n    if (!gitSettings.useGitignore) {\n        gitignoreObj = null;\n        return;\n    }\n\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n    const gitignorePath = path.join(repoPath, '.gitignore');\n    \n    try {\n        if (fs.existsSync(gitignorePath)) {\n            const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');\n            gitignoreObj = ignore().add(gitignoreContent);\n        } else {\n            gitignoreObj = null;\n        }\n    } catch (error) {\n        console.error('Fehler beim Laden der .gitignore-Datei:', error);\n        gitignoreObj = null;\n    }\n}\n\n/**\n * FileSystemWatcher konfigurieren\n * @param {vscode.ExtensionContext} context\n */\nfunction setupFileWatcher(context) {\n    // Vorhandenen Watcher deaktivieren\n    disableFileWatcher();\n\n    // Neuen Watcher erstellen\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        vscode.window.showErrorMessage('Comitto: Kein Workspace gefunden.');\n        return;\n    }\n\n    const config = vscode.workspace.getConfiguration('comitto');\n    const triggerRules = config.get('triggerRules');\n    const filePatterns = triggerRules.filePatterns || ['**/*'];\n\n    fileWatcher = vscode.workspace.createFileSystemWatcher(filePatterns.length === 1 ? filePatterns[0] : '{' + filePatterns.join(',') + '}');\n    \n    // Auf Dateiereignisse reagieren\n    fileWatcher.onDidChange(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n    \n    fileWatcher.onDidCreate(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n    \n    fileWatcher.onDidDelete(uri => {\n        if (!isFileIgnored(uri.fsPath)) {\n            changedFiles.add(uri.fsPath);\n            checkCommitTrigger();\n        }\n    });\n\n    context.subscriptions.push(fileWatcher);\n\n    // Interval-Timer einrichten, falls aktiviert\n    if (triggerRules.onInterval) {\n        setupIntervalTrigger(triggerRules.intervalMinutes);\n    }\n}\n\n/**\n * Richtet einen Interval-Trigger für automatische Commits ein\n * @param {number} minutes Intervall in Minuten\n */\nfunction setupIntervalTrigger(minutes) {\n    // Bestehenden Timer löschen\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n        intervalTimer = null;\n    }\n    \n    // Neuen Timer einrichten\n    if (minutes > 0) {\n        const intervalMs = minutes * 60 * 1000;\n        intervalTimer = setInterval(() => {\n            if (vscode.workspace.getConfiguration('comitto').get('autoCommitEnabled') && changedFiles.size > 0) {\n                const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\n                if (notificationSettings.onTriggerFired) {\n                    showNotification('Intervall-Trigger aktiviert. Prüfe auf ausstehende Commits...', 'info');\n                }\n                checkCommitTrigger();\n            }\n        }, intervalMs);\n    }\n}\n\n/**\n * FileSystemWatcher deaktivieren\n */\nfunction disableFileWatcher() {\n    if (fileWatcher) {\n        fileWatcher.dispose();\n        fileWatcher = null;\n    }\n    \n    // Interval-Timer deaktivieren\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n        intervalTimer = null;\n    }\n    \n    changedFiles.clear();\n}\n\n/**\n * Überprüft, ob eine Datei ignoriert werden soll\n * @param {string} filePath Dateipfad\n * @returns {boolean}\n */\nfunction isFileIgnored(filePath) {\n    // Standardmäßig node_modules und .git ausschließen\n    if (filePath.includes('node_modules') || filePath.includes('.git')) {\n        return true;\n    }\n\n    // .gitignore-Regeln prüfen, wenn verfügbar\n    if (gitignoreObj) {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (workspaceFolders) {\n            const relativePath = path.relative(workspaceFolders[0].uri.fsPath, filePath)\n                .replace(/\\\\/g, '/');  // Pfadtrennzeichen normalisieren\n            \n            return gitignoreObj.ignores(relativePath);\n        }\n    }\n\n    return false;\n}\n\n/**\n * Prüft, ob die Bedingungen für ein Auto-Commit erfüllt sind\n */\nfunction checkCommitTrigger() {\n    // Wenn bereits ein Commit-Vorgang läuft, abbrechen\n    if (isCommitInProgress) {\n        return;\n    }\n\n    const config = vscode.workspace.getConfiguration('comitto');\n    const rules = config.get('triggerRules');\n\n    // Prüfen, ob bestimmte Dateien geändert wurden\n    const specificFiles = rules.specificFiles || [];\n    const hasSpecificFileChanged = specificFiles.length > 0 && \n        specificFiles.some(file => [...changedFiles].some(changed => changed.includes(file)));\n\n    // Prüfen, ob die Mindestanzahl an Änderungen erreicht wurde\n    const hasMinChanges = changedFiles.size >= (rules.minChangeCount || 10);\n\n    // Prüfen, ob die Anzahl der geänderten Dateien den Schwellwert überschreitet\n    const hasFileThreshold = changedFiles.size >= (rules.fileCountThreshold || 3);\n\n    // Prüfen, ob genug Zeit seit dem letzten Commit vergangen ist\n    const timeThresholdMinutes = rules.timeThresholdMinutes || 30;\n    const timeThresholdMs = timeThresholdMinutes * 60 * 1000;\n    const hasTimeThresholdPassed = !lastCommitTime || \n        (Date.now() - lastCommitTime.getTime() >= timeThresholdMs);\n\n    // Commit auslösen, wenn die Bedingungen erfüllt sind\n    if (hasTimeThresholdPassed && (hasSpecificFileChanged || hasMinChanges || hasFileThreshold)) {\n        performAutoCommit();\n    }\n}\n\n/**\n * Führt den automatischen Commit-Prozess durch\n * @param {boolean} isManualTrigger Gibt an, ob der Commit manuell ausgelöst wurde\n * @param {number} retryCount Anzahl der bisherigen Versuche (für Retry-Logik)\n */\nasync function performAutoCommit(isManualTrigger = false, retryCount = 0) {\n    // Maximale Anzahl an Wiederholungsversuchen\n    const MAX_RETRIES = 3;\n    \n    try {\n        isCommitInProgress = true;\n        updateStatusBarProgress(statusBarItem, 'Commit vorbereiten', 5, 'Starte Prozess');\n\n        // Git-Repository-Pfad bestimmen\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders) {\n            throw new Error('Kein Workspace gefunden.');\n        }\n\n        const config = vscode.workspace.getConfiguration('comitto');\n        const gitSettings = config.get('gitSettings');\n        const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n        \n        try {\n            // Prüfen, ob Git initialisiert ist\n            try {\n                await executeGitCommand('git rev-parse --is-inside-work-tree', repoPath);\n                updateStatusBarProgress(statusBarItem, 'Commit vorbereiten', 10, 'Git-Repo geprüft');\n            } catch (error) {\n                throw new Error('Kein Git-Repository gefunden. Bitte initialisieren Sie zuerst ein Git-Repository.');\n            }\n            \n            // Dateien zum Staging hinzufügen\n            try {\n                updateStatusBarProgress(statusBarItem, 'Änderungen stagen', 20, gitSettings.stageMode);\n                await stageChanges(gitSettings.stageMode);\n                updateStatusBarProgress(statusBarItem, 'Staging abgeschlossen', 30);\n            } catch (stageError) {\n                console.error('Fehler beim Stagen der Änderungen:', stageError);\n                showNotification(`Fehler beim Stagen: ${stageError.message}. Versuche Fallback-Methode...`, 'warning');\n                \n                // Fallback: Alle Änderungen stagen\n                await executeGitCommand('git add .', repoPath);\n                updateStatusBarProgress(statusBarItem, 'Staging (Fallback)', 30);\n            }\n            \n            // git status ausführen, um Änderungen zu erhalten\n            let gitStatus = '';\n            try {\n                updateStatusBarProgress(statusBarItem, 'Status abrufen', 35);\n                gitStatus = await executeGitCommand('git status --porcelain', repoPath);\n            } catch (statusError) {\n                // Wenn git status fehlschlägt, versuchen wir es trotzdem weiter\n                console.warn('Fehler bei git status, versuche trotzdem fortzufahren:', statusError);\n                gitStatus = \"Fehler beim Abrufen des Status. Commit wird trotzdem versucht.\";\n            }\n            \n            if (!gitStatus.trim() && !isManualTrigger) {\n                isCommitInProgress = false;\n                updateStatusBarProgress(statusBarItem, 'Keine Änderungen', 100);\n                changedFiles.clear();\n                return;\n            } else if (!gitStatus.trim() && isManualTrigger) {\n                throw new Error('Keine Änderungen zum Committen gefunden.');\n            }\n\n            // Änderungen abrufen für KI-Commit-Nachricht\n            let diffOutput = '';\n            try {\n                updateStatusBarProgress(statusBarItem, 'Diff berechnen', 40);\n                diffOutput = await executeGitCommand('git diff --cached', repoPath);\n                updateStatusBarProgress(statusBarItem, 'Diff berechnet', 50);\n            } catch (diffError) {\n                // Bei Pufferüberlauf oder anderen Diff-Fehlern trotzdem weitermachen\n                console.warn('Fehler beim Abrufen des Diffs, versuche alternative Methode:', diffError);\n                \n                try {\n                    // Nur Liste der geänderten Dateien abrufen\n                    updateStatusBarProgress(statusBarItem, 'Diff (Alternative)', 45);\n                    const fileList = await executeGitCommand('git diff --cached --name-status', repoPath);\n                    diffOutput = 'Diff konnte nicht vollständig abgerufen werden.\\nGeänderte Dateien:\\n' + fileList;\n                    updateStatusBarProgress(statusBarItem, 'Diff (Alternativ) berechnet', 50);\n                } catch (fileListError) {\n                    console.error('Auch die Dateiliste konnte nicht abgerufen werden:', fileListError);\n                    diffOutput = 'Diff-Inhalt konnte nicht abgerufen werden. Commit wird trotzdem versucht.';\n                }\n            }\n            \n            // Commit-Nachricht generieren\n            let commitMessage = '';\n            updateStatusBarProgress(statusBarItem, 'Generiere Commit-Nachricht', 50);\n            \n            try {\n                // KI-Funktionen übergeben\n                commitMessage = await commands.generateCommitMessage(gitStatus, diffOutput, \n                    generateWithOllama, generateWithOpenAI, generateWithAnthropic);\n                updateStatusBarProgress(statusBarItem, 'Commit-Nachricht generiert', 75);\n            } catch (messageError) {\n                console.error('Fehler bei der Commit-Nachricht-Generierung:', messageError);\n                updateStatusBarProgress(statusBarItem, 'Fallback-Nachricht', 70);\n                \n                // Fallback-Nachricht mit Datum\n                const now = new Date();\n                const dateStr = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;\n                const timeStr = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n                \n                const gitSettings = config.get('gitSettings');\n                const language = gitSettings.commitMessageLanguage || 'en';\n                const style = gitSettings.commitMessageStyle || 'conventional';\n                \n                if (language === 'de') {\n                    commitMessage = style === 'conventional' ? \n                        `chore: Automatischer Commit vom ${dateStr} ${timeStr}` : \n                        `💾 Automatischer Commit vom ${dateStr} ${timeStr}`;\n                } else {\n                    commitMessage = style === 'conventional' ? \n                        `chore: automatic commit ${dateStr} ${timeStr}` : \n                        `💾 Automatic commit ${dateStr} ${timeStr}`;\n                }\n            }\n            \n            if (!commitMessage || commitMessage.trim().length === 0) {\n                commitMessage = \"chore: auto commit\";\n            }\n            \n            // Branch-Handling\n            try {\n                if (gitSettings.branch) {\n                    updateStatusBarProgress(statusBarItem, 'Branch prüfen', 80);\n                    \n                    // Aktuelle Branch bestimmen\n                    const currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\n                    \n                    // Nur wechseln, wenn nicht bereits auf dem Ziel-Branch\n                    if (currentBranch !== gitSettings.branch) {\n                        // Prüfen, ob der Branch existiert\n                        const branches = await executeGitCommand('git branch', repoPath);\n                        const branchExists = branches.includes(gitSettings.branch);\n                        \n                        if (branchExists) {\n                            // Zu existierendem Branch wechseln\n                            try {\n                                updateStatusBarProgress(statusBarItem, `Wechsle zu ${gitSettings.branch}`, 82);\n                                await executeGitCommand(`git checkout ${gitSettings.branch}`, repoPath);\n                                showNotification(`Zu Branch '${gitSettings.branch}' gewechselt.`, 'info');\n                            } catch (checkoutError) {\n                                // Fehler beim Checkout - möglicherweise ungespeicherte Änderungen\n                                updateStatusBarProgress(statusBarItem, 'Branch-Wechsel fehlgeschlagen', -1);\n                                showNotification(`Fehler beim Wechseln zu Branch '${gitSettings.branch}': ${checkoutError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n                            }\n                        } else {\n                            // Neuen Branch erstellen und wechseln\n                            try {\n                                updateStatusBarProgress(statusBarItem, `Erstelle Branch ${gitSettings.branch}`, 82);\n                                await executeGitCommand(`git checkout -b ${gitSettings.branch}`, repoPath);\n                                showNotification(`Branch '${gitSettings.branch}' erstellt und ausgecheckt.`, 'info');\n                            } catch (createBranchError) {\n                                updateStatusBarProgress(statusBarItem, 'Branch-Erstellung fehlgeschlagen', -1);\n                                showNotification(`Fehler beim Erstellen des Branches '${gitSettings.branch}': ${createBranchError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n                            }\n                        }\n                    }\n                }\n            } catch (branchError) {\n                console.error('Fehler beim Branch-Handling:', branchError);\n                showNotification(`Fehler bei der Branch-Verwaltung: ${branchError.message}. Fortfahren mit aktuellem Branch.`, 'warning');\n            }\n            \n            // Git Commit durchführen\n            updateStatusBarProgress(statusBarItem, 'Führe Commit aus', 90);\n            \n            try {\n                // Escapte Anführungszeichen für Shell\n                const escapedMessage = commitMessage.replace(/\"/g, '\\\\\"').replace(/`/g, \"'\");\n                await executeGitCommand(`git commit -m \"${escapedMessage}\"`, repoPath);\n                updateStatusBarProgress(statusBarItem, 'Commit abgeschlossen', 95);\n                \n                // Benachrichtigungen anzeigen basierend auf den Einstellungen\n                const notificationSettings = config.get('notifications');\n                \n                if (!isManualTrigger && notificationSettings.onCommit) {\n                    showNotification(`Automatischer Commit durchgeführt: ${commitMessage}`, 'info');\n                } else if (isManualTrigger) {\n                    showNotification(`Manueller Commit durchgeführt: ${commitMessage}`, 'info');\n                }\n                \n                // Reset der Änderungsverfolgung\n                lastCommitTime = new Date();\n                changedFiles.clear();\n            } catch (commitError) {\n                console.error('Commit fehlgeschlagen:', commitError);\n                \n                // Wenn nichts zum Committen da ist, ist das kein echter Fehler\n                if (commitError.message.includes('nothing to commit')) {\n                    updateStatusBarProgress(statusBarItem, 'Keine Änderungen', 100);\n                    showNotification('Keine Änderungen zum Committen gefunden.', 'info');\n                    isCommitInProgress = false;\n                    changedFiles.clear();\n                    return;\n                }\n                \n                // Bei anderen Fehlern versuchen, es noch einmal\n                if (retryCount < MAX_RETRIES) {\n                    updateStatusBarProgress(statusBarItem, 'Commit fehlgeschlagen, neuer Versuch', 85);\n                    showNotification(`Commit fehlgeschlagen: ${commitError.message}. Versuche es erneut...`, 'warning');\n                    setTimeout(() => {\n                        performAutoCommit(isManualTrigger, retryCount + 1);\n                    }, 2000); // 2 Sekunden Verzögerung vor dem Retry\n                    return;\n                } else {\n                    updateStatusBarProgress(statusBarItem, 'Commit endgültig fehlgeschlagen', -1);\n                    throw new Error(`Commit fehlgeschlagen nach ${MAX_RETRIES} Versuchen: ${commitError.message}`);\n                }\n            }\n            \n            // Automatischen Push ausführen, wenn konfiguriert\n            if (gitSettings.autoPush) {\n                try {\n                    updateStatusBarProgress(statusBarItem, 'Push ausführen', 97);\n                    await performAutoPush(repoPath);\n                    updateStatusBarProgress(statusBarItem, 'Push abgeschlossen', 100);\n                } catch (pushError) {\n                    console.error('Push fehlgeschlagen:', pushError);\n                    updateStatusBarProgress(statusBarItem, 'Push fehlgeschlagen', -1);\n                    showNotification(`Push fehlgeschlagen: ${pushError.message}`, 'error');\n                }\n            } else {\n                updateStatusBarProgress(statusBarItem, 'Vorgang abgeschlossen', 100);\n            }\n        } catch (error) {\n            console.error('Git-Befehl fehlgeschlagen:', error);\n            updateStatusBarProgress(statusBarItem, 'Git-Fehler', -1);\n            \n            // Fehlerbehandlung verbessern\n            let errorMessage = error.message;\n            if (errorMessage.includes('fatal: not a git repository')) {\n                errorMessage = 'Dieses Verzeichnis ist kein Git-Repository. Bitte initialisieren Sie zuerst ein Git-Repository.';\n            } else if (errorMessage.includes('fatal: unable to access')) {\n                errorMessage = 'Fehler beim Zugriff auf das Remote-Repository. Bitte prüfen Sie Ihre Netzwerkverbindung und Zugangsrechte.';\n            } else if (errorMessage.includes('maxBuffer') || errorMessage.includes('zu groß')) {\n                errorMessage = 'Zu viele oder zu große Änderungen für die automatische Verarbeitung. Bitte führen Sie einen manuellen Commit durch oder reduzieren Sie die Anzahl der Änderungen.';\n            }\n            \n            // Benachrichtigung anzeigen\n            const notificationSettings = config.get('notifications');\n            if (notificationSettings.onError) {\n                showNotification(`Git-Befehl fehlgeschlagen: ${errorMessage}`, 'error');\n            }\n            \n            throw error;\n        }\n    } catch (error) {\n        console.error('Comitto Fehler:', error);\n        updateStatusBarProgress(statusBarItem, 'Fehler', -1);\n        \n        // Benachrichtigung anzeigen\n        const notificationSettings = vscode.workspace.getConfiguration('comitto').get('notifications');\n        if (notificationSettings.onError) {\n            showNotification(`Comitto Fehler: ${error.message}`, 'error');\n        }\n    } finally {\n        isCommitInProgress = false;\n    }\n}\n\n/**\n * Führt einen automatischen Push durch\n * @param {string} repoPath Der Pfad zum Git-Repository\n */\nasync function performAutoPush(repoPath) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const notificationSettings = config.get('notifications');\n    const MAX_PUSH_RETRIES = 2;\n    \n    statusBarItem.text = \"$(sync~spin) Comitto: Pushe Änderungen...\";\n    \n    // Aktuelle Branch bestimmen\n    let currentBranch;\n    try {\n        currentBranch = (await executeGitCommand('git rev-parse --abbrev-ref HEAD', repoPath)).trim();\n    } catch (error) {\n        throw new Error(`Fehler beim Ermitteln des aktuellen Branches: ${error.message}`);\n    }\n    \n    // Push-Optionen basierend auf Einstellungen\n    const gitSettings = config.get('gitSettings');\n    const pushOptions = gitSettings.pushOptions || '';\n    const pushCommand = `git push origin ${currentBranch} ${pushOptions}`.trim();\n    \n    let pushSuccess = false;\n    let pushError = null;\n    \n    // Versuche es mehrfach mit Push\n    for (let i = 0; i <= MAX_PUSH_RETRIES; i++) {\n        try {\n            await executeGitCommand(pushCommand, repoPath);\n            pushSuccess = true;\n            break;\n        } catch (error) {\n            pushError = error;\n            console.warn(`Push-Versuch ${i+1} fehlgeschlagen:`, error);\n            \n            // Bei bestimmten Fehlern erneut versuchen\n            if (error.message.includes('Connection timed out') || \n                error.message.includes('Could not resolve host') ||\n                error.message.includes('failed to push some refs')) {\n                \n                // Kurze Pause vor dem nächsten Versuch\n                if (i < MAX_PUSH_RETRIES) {\n                    await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1)));\n                    continue;\n                }\n            }\n            \n            // Bei anderen Fehlern oder nach allen Versuchen abbrechen\n            break;\n        }\n    }\n    \n    // Ergebnis verarbeiten\n    if (pushSuccess) {\n        if (notificationSettings.onPush) {\n            showNotification(`Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\n        }\n    } else if (pushError) {\n        // Versuche ein Pull bei bestimmten Fehlern\n        if (pushError.message.includes('failed to push some refs') || \n            pushError.message.includes('rejected') ||\n            pushError.message.includes('non-fast-forward')) {\n            \n            try {\n                showNotification('Push fehlgeschlagen. Versuche Pull...', 'warning');\n                await executeGitCommand(`git pull origin ${currentBranch}`, repoPath);\n                \n                // Erneut versuchen zu pushen\n                await executeGitCommand(pushCommand, repoPath);\n                \n                if (notificationSettings.onPush) {\n                    showNotification(`Pull & Push erfolgreich: Änderungen wurden zu origin/${currentBranch} gepusht.`, 'info');\n                }\n            } catch (pullError) {\n                throw new Error(`Push fehlgeschlagen und Pull konnte nicht ausgeführt werden: ${pullError.message}`);\n            }\n        } else {\n            throw pushError;\n        }\n    }\n}\n\n/**\n * Führt das Staging von Dateien basierend auf dem konfigurieren Modus aus\n * @param {string} mode Der Staging-Modus ('all', 'specific', 'prompt')\n * @returns {Promise<void>}\n */\nasync function stageChanges(mode) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        throw new Error('Kein Workspace gefunden.');\n    }\n    \n    const config = vscode.workspace.getConfiguration('comitto');\n    const gitSettings = config.get('gitSettings');\n    const repoPath = gitSettings.repositoryPath || workspaceFolders[0].uri.fsPath;\n    \n    // Bei manuellem Modus Benutzer nach Dateien fragen\n    if (mode === 'prompt') {\n        // Git Status abrufen\n        const gitStatusOutput = await executeGitCommand('git status --porcelain', repoPath);\n        if (!gitStatusOutput.trim()) {\n            throw new Error('Keine Änderungen zum Stagen gefunden.');\n        }\n        \n        // Dateien parsen\n        const changedFilesList = gitStatusOutput.split('\\n')\n            .filter(line => line.trim().length > 0)\n            .map(line => {\n                const status = line.substring(0, 2).trim();\n                const filePath = line.substring(3).trim();\n                return { status, filePath };\n            });\n        \n        // Dateien zur Auswahl anbieten\n        const selectedFiles = await vscode.window.showQuickPick(\n            changedFilesList.map(file => ({\n                label: file.filePath,\n                description: ui.getStatusDescription(file.status),\n                picked: true // Standardmäßig alle auswählen\n            })),\n            {\n                canPickMany: true,\n                placeHolder: 'Dateien zum Stagen auswählen'\n            }\n        );\n        \n        if (!selectedFiles || selectedFiles.length === 0) {\n            throw new Error('Keine Dateien ausgewählt.');\n        }\n        \n        // Ausgewählte Dateien stagen\n        for (const file of selectedFiles) {\n            await executeGitCommand(`git add \"${file.label}\"`, repoPath);\n        }\n        \n        return;\n    }\n    \n    // Spezifische Dateien basierend auf Mustern stagen\n    if (mode === 'specific') {\n        const patterns = gitSettings.specificStagingPatterns || ['**/*.js', '**/*.ts', '**/*.json'];\n        \n        for (const pattern of patterns) {\n            try {\n                // Bei Windows können wir Probleme mit den Pfadtrennzeichen haben,\n                // daher verwenden wir ein sicheres Muster für die Ausführung\n                const safePattern = pattern.replace(/\\\\/g, '/');\n                await executeGitCommand(`git add \"${safePattern}\"`, repoPath);\n            } catch (error) {\n                console.error(`Fehler beim Stagen von Muster ${pattern}:`, error);\n                // Wir werfen den Fehler nicht weiter, sondern versuchen andere Muster\n            }\n        }\n        \n        return;\n    }\n    \n    // Standardmäßig alle Änderungen stagen\n    await executeGitCommand('git add .', repoPath);\n}\n\n/**\n * Zeigt eine Benachrichtigung an, wenn entsprechend konfiguriert,\n * und fügt sie immer zum Debug-Log hinzu\n * @param {string} message Die anzuzeigende Nachricht\n * @param {string} type Der Typ der Nachricht (info, warning, error)\n */\nfunction showNotification(message, type = 'info') {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const uiSettings = config.get('uiSettings');\n    const debug = config.get('debug');\n    \n    // Zum Debug-Log hinzufügen\n    addDebugLog(message, type);\n    \n    // Benachrichtigung anzeigen, wenn aktiviert\n    if (uiSettings && uiSettings.showNotifications) {\n        switch (type) {\n            case 'info':\n                vscode.window.showInformationMessage(message);\n                break;\n            case 'warning':\n                vscode.window.showWarningMessage(message);\n                break;\n            case 'error':\n                vscode.window.showErrorMessage(message);\n                break;\n            default:\n                vscode.window.showInformationMessage(message);\n        }\n    }\n    \n    // Status in der Statusleiste aktualisieren\n    if (type === 'error' && statusBarItem) {\n        const originalText = statusBarItem.text;\n        statusBarItem.text = \"$(error) Comitto: Fehler\";\n        \n        // Nach 3 Sekunden zurücksetzen\n        setTimeout(() => {\n            if (statusBarItem) {\n                statusBarItem.text = originalText;\n            }\n        }, 3000);\n    }\n}\n\n/**\n * @param {string} gitStatus Die Ausgabe von git status\n * @param {string} diffOutput Die Ausgabe von git diff\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateCommitMessage(gitStatus, diffOutput) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const aiProvider = config.get('aiProvider');\n    const gitSettings = config.get('gitSettings');\n    \n    // SCHRITT 1: Dateiliste mit Status erstellen (IMMER verfügbar für die KI)\n    let fileList = '';\n    let fileCount = 0;\n    \n    if (gitStatus && gitStatus.trim()) {\n        const statusLines = gitStatus.split('\\n').filter(line => line.trim().length > 0);\n        fileCount = statusLines.length;\n        \n        fileList = statusLines.map(line => {\n            const status = line.substring(0, 2).trim();\n            const filePath = line.substring(3).trim();\n            \n            // Status in lesbaren Text umwandeln\n            let statusText = '';\n            const firstChar = status.charAt(0);\n            const secondChar = status.charAt(1);\n            \n            if (firstChar === 'M' || secondChar === 'M') statusText = 'Geändert';\n            else if (firstChar === 'A') statusText = 'Neu hinzugefügt';\n            else if (firstChar === 'D') statusText = 'Gelöscht';\n            else if (firstChar === 'R') statusText = 'Umbenannt';\n            else if (firstChar === 'C') statusText = 'Kopiert';\n            else if (status === '??') statusText = 'Neue Datei (untracked)';\n            else statusText = `Status: ${status}`;\n            \n            return `${statusText}: ${filePath}`;\n        }).join('\\n');\n    }\n    \n    // SCHRITT 2: Basis-Prompt mit Dateiliste erstellen\n    let promptTemplate = config.get('promptTemplate') || \n        'Generiere eine aussagekräftige Commit-Nachricht basierend auf den folgenden Änderungen.\\n\\n{changes}';\n    \n    // Dateiliste in den Prompt einfügen\n    const changesSection = fileList || 'Keine spezifischen Dateiänderungen erkannt.';\n    promptTemplate = promptTemplate.replace('{changes}', changesSection);\n    \n    // SCHRITT 3: Sprache hinzufügen\n    const language = gitSettings.commitMessageLanguage || 'de';\n    if (!promptTemplate.toLowerCase().includes(language)) {\n        const languageInstruction = language === 'de' ? \n            '\\nDie Commit-Nachricht soll auf DEUTSCH sein.' :\n            language === 'en' ? '\\nThe commit message should be in ENGLISH.' :\n            `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\n        promptTemplate += languageInstruction;\n    }\n    \n    // SCHRITT 4: Commit-Stil hinzufügen\n    const style = gitSettings.commitMessageStyle || 'conventional';\n    let styleInstruction = '';\n    \n    switch (style) {\n        case 'conventional':\n            styleInstruction = '\\nVerwende das Conventional Commits Format (feat:, fix:, docs:, style:, refactor:, test:, chore:, etc.).';\n            break;\n        case 'gitmoji':\n            styleInstruction = '\\nVerwende Gitmoji-Emojis am Anfang der Commit-Nachricht (🎉 für neue Features, 🐛 für Bugfixes, 📚 für Dokumentation, 💄 für Styling, etc.).';\n            break;\n        case 'angular':\n            styleInstruction = '\\nVerwende das Angular Commit Convention Format: type(scope): description.';\n            break;\n        case 'atom':\n            styleInstruction = '\\nVerwende das Atom Editor Commit Format: :emoji: description.';\n            break;\n        case 'simple':\n            styleInstruction = '\\nVerwende einfache, klare und beschreibende Commit-Nachrichten ohne spezifisches Format.';\n            break;\n    }\n    \n    if (styleInstruction && !promptTemplate.includes(styleInstruction.toLowerCase())) {\n        promptTemplate += styleInstruction;\n    }\n    \n    // SCHRITT 5: Entscheiden, ob Diff-Inhalt hinzugefügt werden soll\n    const MAX_REASONABLE_DIFF_LENGTH = 1500; // Schwellwert für \"angemessene\" Diff-Größe\n    const MAX_DIFF_INCLUDED = 800; // Maximale Diff-Länge, die tatsächlich hinzugefügt wird\n    \n    let shouldIncludeDiff = false;\n    let diffSnippet = '';\n    \n    if (diffOutput && diffOutput.trim()) {\n        // Entscheidungslogik: Diff nur bei überschaubarer Größe hinzufügen\n        if (diffOutput.length <= MAX_REASONABLE_DIFF_LENGTH) {\n            shouldIncludeDiff = true;\n            diffSnippet = diffOutput;\n        } else if (fileCount <= 3) {\n            // Bei wenigen Dateien: gekürzten Diff hinzufügen\n            shouldIncludeDiff = true;\n            diffSnippet = diffOutput.substring(0, MAX_DIFF_INCLUDED) + \n                `\\n\\n[Diff gekürzt - Insgesamt ${diffOutput.length} Zeichen in ${fileCount} Datei(en)]`;\n        }\n        // Bei vielen Dateien oder sehr großem Diff: nur Dateiliste verwenden\n    }\n    \n    // SCHRITT 6: Diff-Inhalt hinzufügen (falls angemessen)\n    if (shouldIncludeDiff && diffSnippet) {\n        promptTemplate += `\\n\\nHier sind die konkreten Änderungen für besseren Kontext:\\n\\n${diffSnippet}`;\n    } else if (diffOutput && diffOutput.length > MAX_REASONABLE_DIFF_LENGTH) {\n        // Erklärung, warum kein Diff-Inhalt hinzugefügt wurde\n        promptTemplate += `\\n\\nHinweis: ${fileCount} Datei(en) mit umfangreichen Änderungen (${diffOutput.length} Zeichen). ` +\n            `Generiere die Commit-Nachricht basierend auf der Dateiliste und den erkennbaren Änderungsmustern.`;\n    }\n    \n    // SCHRITT 7: Längen-Begrenzung für die Commit-Nachricht\n    promptTemplate += '\\n\\nBitte halte die Commit-Nachricht unter 72 Zeichen und mache sie aussagekräftig und prägnant.';\n    \n    // SCHRITT 8: Debug-Ausgabe\n    console.log(`Commit-Nachricht wird generiert für ${fileCount} Datei(en), Diff-Größe: ${diffOutput?.length || 0} Zeichen, Diff hinzugefügt: ${shouldIncludeDiff}`);\n    addDebugLog(`Generiere Commit für ${fileCount} Dateien (${diffOutput?.length || 0} Zeichen Diff), Provider: ${aiProvider}`, 'info');\n    \n    // SCHRITT 9: KI-Provider aufrufen\n    let generatedMessage = '';\n    try {\n        switch (aiProvider) {\n            case 'ollama':\n                generatedMessage = await generateWithOllama(promptTemplate);\n                break;\n            case 'openai':\n                generatedMessage = await generateWithOpenAI(promptTemplate);\n                break;\n            case 'anthropic':\n                generatedMessage = await generateWithAnthropic(promptTemplate);\n                break;\n            default:\n                throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\n        }\n        \n        // SCHRITT 10: Nachricht verarbeiten und zurückgeben\n        if (typeof generatedMessage === 'string') {\n            // Nachricht bereinigen\n            generatedMessage = generatedMessage.trim();\n            // Anführungszeichen entfernen, falls vorhanden\n            generatedMessage = generatedMessage.replace(/^[\"']|[\"']$/g, '');\n            // Auf die erste Zeile beschränken, wenn sinnvoll\n            const firstLine = generatedMessage.split('\\n')[0];\n            if (firstLine && firstLine.length > 5) {\n                generatedMessage = firstLine;\n            }\n            // Auf 72 Zeichen beschränken (Git-Konvention)\n            if (generatedMessage.length > 72) {\n                const truncated = generatedMessage.substring(0, 69) + '...';\n                console.log(`Commit-Nachricht von ${generatedMessage.length} auf ${truncated.length} Zeichen gekürzt`);\n                generatedMessage = truncated;\n            }\n            \n            // Erfolgreiche Generierung protokollieren\n            addDebugLog(`Commit-Nachricht erfolgreich generiert: \"${generatedMessage}\" (${generatedMessage.length} Zeichen)`, 'success');\n            \n            return generatedMessage;\n        } else {\n            throw new Error('Commit-Nachricht konnte nicht generiert werden: Ungültiges Format');\n        }\n    } catch (error) {\n        console.error('Fehler beim Generieren der Commit-Nachricht:', error);\n        addDebugLog(`Fehler bei Commit-Generierung: ${error.message}`, 'error');\n        \n        // FALLBACK: Intelligente Standard-Nachricht basierend auf Dateiliste\n        let fallbackMessage = 'chore: update files';\n        \n        if (fileList) {\n            const hasNewFiles = fileList.includes('Neu hinzugefügt') || fileList.includes('Neue Datei');\n            const hasModifiedFiles = fileList.includes('Geändert');\n            const hasDeletedFiles = fileList.includes('Gelöscht');\n            \n            if (hasNewFiles && !hasModifiedFiles && !hasDeletedFiles) {\n                fallbackMessage = fileCount === 1 ? 'feat: add new file' : `feat: add ${fileCount} new files`;\n            } else if (hasDeletedFiles && !hasModifiedFiles && !hasNewFiles) {\n                fallbackMessage = fileCount === 1 ? 'chore: remove file' : `chore: remove ${fileCount} files`;\n            } else if (hasModifiedFiles && !hasNewFiles && !hasDeletedFiles) {\n                fallbackMessage = fileCount === 1 ? 'fix: update file' : `fix: update ${fileCount} files`;\n            } else {\n                fallbackMessage = `chore: update ${fileCount} files`;\n            }\n            \n            // Sprachabhängige Fallback-Nachrichten\n            if (language === 'de') {\n                fallbackMessage = fallbackMessage\n                    .replace('add new file', 'neue Datei hinzugefügt')\n                    .replace('add', 'hinzufügen')\n                    .replace('remove file', 'Datei entfernt')\n                    .replace('remove', 'entfernen')\n                    .replace('update file', 'Datei aktualisiert')\n                    .replace('update', 'aktualisieren')\n                    .replace('files', 'Dateien')\n                    .replace('file', 'Datei');\n            }\n        }\n        \n        addDebugLog(`Verwende Fallback-Commit-Nachricht: \"${fallbackMessage}\"`, 'warning');\n        return fallbackMessage;\n    }\n}\n\n/**\n * Richtet eine automatische Hintergrundüberwachung ein\n * @param {vscode.ExtensionContext} context \n */\nfunction setupAutoBackgroundMonitoring(context) {\n    // Überwachung für Git-Status (alle 10 Minuten)\n    setInterval(async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            if (!config.get('autoCommitEnabled')) return;\n            \n            const debugSettings = config.get('debug') || {};\n            \n            // Git-Repository-Status prüfen\n            const hasGit = await checkGitRepository(context);\n            if (!hasGit) {\n                addDebugLog('Hintergrundprüfung: Kein aktives Git-Repository gefunden.', 'warning');\n                return;\n            }\n            \n            // Prüfen, ob ungespeicherte Änderungen vorliegen, die noch nicht committed wurden\n            const workspaceFolders = vscode.workspace.workspaceFolders;\n            if (!workspaceFolders) return;\n            \n            const repoPath = workspaceFolders[0].uri.fsPath;\n            const gitStatus = await executeGitCommand('git status --porcelain', repoPath);\n            \n            if (gitStatus.trim() && changedFiles.size === 0) {\n                // Es gibt Änderungen, die nicht in changedFiles erfasst wurden\n                addDebugLog('Hintergrundprüfung: Nicht erfasste Änderungen gefunden.', 'info');\n                \n                // Dateien dem Tracking hinzufügen\n                gitStatus.split('\\n')\n                    .filter(line => line.trim().length > 0)\n                    .forEach(line => {\n                        const filePath = line.substring(3).trim();\n                        if (filePath && !isFileIgnored(filePath)) {\n                            // Relativen Pfad erstellen, sicherstellen dass dieser valide ist\n                            const absolutePath = path.resolve(repoPath, filePath);\n                            changedFiles.add(absolutePath);\n                        }\n                    });\n                \n                if (debugSettings.extendedLogging) {\n                    addDebugLog(`Hintergrund-Synchronisierung: ${changedFiles.size} Dateien werden nun überwacht.`, 'info');\n                }\n                \n                // Trigger-Check ausführen\n                if (config.get('autoCommitEnabled')) {\n                    checkCommitTrigger();\n                }\n            }\n        } catch (error) {\n            console.error('Fehler bei der Hintergrundüberwachung:', error);\n            addDebugLog(`Fehler bei der Hintergrundüberwachung: ${error.message}`, 'error');\n        }\n    }, 10 * 60 * 1000); // 10 Minuten\n    \n    // Regelmäßiger Gesundheitscheck\n    setInterval(() => {\n        try {\n            const config = vscode.workspace.getConfiguration('comitto');\n            if (!config.get('autoCommitEnabled')) return;\n            \n            const debugSettings = config.get('debug') || {};\n            \n            // Prüfen, ob der Watcher noch aktiv ist\n            if (!fileWatcher && config.get('autoCommitEnabled')) {\n                addDebugLog('Gesundheitscheck: FileWatcher ist nicht aktiv. Starte neu...', 'warning');\n                setupFileWatcher(context);\n            }\n            \n            // Prüfen, ob der Interval-Timer noch aktiv ist\n            const triggerRules = config.get('triggerRules');\n            if (triggerRules.onInterval && !intervalTimer && config.get('autoCommitEnabled')) {\n                addDebugLog('Gesundheitscheck: Interval-Timer ist nicht aktiv. Starte neu...', 'warning');\n                setupIntervalTrigger(triggerRules.intervalMinutes);\n            }\n            \n            if (debugSettings.extendedLogging) {\n                addDebugLog('Gesundheitscheck durchgeführt.', 'info');\n            }\n        } catch (error) {\n            console.error('Fehler beim Gesundheitscheck:', error);\n            addDebugLog(`Fehler beim Gesundheitscheck: ${error.message}`, 'error');\n        }\n    }, 30 * 60 * 1000); // 30 Minuten\n}\n\nfunction deactivate() {\n    if (intervalTimer) {\n        clearInterval(intervalTimer);\n    }\n    \n    // Alle Ressourcen löschen\n    if (statusBarItem) {\n        statusBarItem.dispose();\n    }\n    \n    if (fileWatcher) {\n        fileWatcher.dispose();\n    }\n    \n    if (outputChannel) {\n        outputChannel.dispose();\n    }\n    \n    return undefined;\n}\n\n/**\n * Generiert eine Commit-Nachricht mit Ollama\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithOllama(prompt) {\n    // Implementierung bleibt unverändert\n    const config = vscode.workspace.getConfiguration('comitto');\n    const endpoint = config.get('ollama').endpoint || 'http://localhost:11434/api/generate';\n    \n    // Backward-Kompatibilität für ollama-model Konfiguration\n    let ollamaConfig = config.get('ollama') || {};\n    let model = ollamaConfig.model;\n    const ollamaModelOld = config.get('ollama-model');\n    \n    if (!model && ollamaModelOld) {\n        model = ollamaModelOld;\n        ollamaConfig.model = ollamaModelOld;\n        await config.update('ollama', ollamaConfig, vscode.ConfigurationTarget.Global);\n        await config.update('ollama-model', undefined, vscode.ConfigurationTarget.Global);\n        \n        showNotification('Korrektur der Ollama-Modell-Konfiguration durchgeführt.', 'info');\n    }\n    \n    // Fallback, falls kein Modell konfiguriert ist\n    model = model || 'granite3.3:2b';\n    \n    try {\n        // Statusleiste aktualisieren\n        updateStatusBarProgress(statusBarItem, 'Ollama generiert', 0, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit Ollama (${model}) generiert...`, 'info', false);\n        \n        console.log(`Verwende Ollama-Modell: ${model} auf ${endpoint}`);\n        \n        // HTTP-Anfrage vorbereiten und Startzeit messen\n        const requestStart = Date.now();\n        \n        // Prüfen, ob der Endpunkt /api/generate enthält - verschiedene API-Pfade\n        const apiEndpoint = endpoint.endsWith('/api/generate') ? endpoint : \n                         (endpoint.endsWith('/') ? `${endpoint}api/generate` : `${endpoint}/api/generate`);\n        \n        const response = await axios.post(apiEndpoint, {\n            model: model,\n            prompt: prompt,\n            stream: false,\n            options: {\n                temperature: 0.3,\n                num_predict: 100\n            }\n        });\n        \n        const requestDuration = ((Date.now() - requestStart) / 1000).toFixed(2);\n        updateStatusBarProgress(statusBarItem, 'Ollama generiert', 100, `Fertig in ${requestDuration}s`);\n        \n        if (response.data && typeof response.data.response === 'string') {\n            let commitMessage = response.data.response.trim();\n            \n            // Debugging-Informationen\n            const evalDuration = response.data.eval_duration ? \n                (response.data.eval_duration / 1000000000).toFixed(2) + 's' : 'n/a';\n            const totalDuration = response.data.total_duration ? \n                (response.data.total_duration / 1000000000).toFixed(2) + 's' : requestDuration + 's';\n            \n            console.log(`Ollama-Antwort erhalten. Eval-Zeit: ${evalDuration}, Gesamt-Zeit: ${totalDuration}`);\n            showNotification(`Commit-Nachricht mit Ollama generiert (${totalDuration}).`, 'info', false);\n            \n            return commitMessage;\n        } else {\n            throw new Error('Unerwartetes Antwortformat von Ollama');\n        }\n    } catch (error) {\n        console.error('Ollama API-Fehler:', error.response?.data || error.message);\n        \n        // Statusleiste aktualisieren\n        updateStatusBarProgress(statusBarItem, 'Ollama-Fehler', -1);\n        \n        // Detaillierte Fehlermeldung\n        let errorMessage = 'Fehler bei der Kommunikation mit Ollama';\n        \n        if (error.code === 'ECONNREFUSED') {\n            errorMessage = 'Verbindung zu Ollama fehlgeschlagen. Bitte stellen Sie sicher, dass Ollama läuft und erreichbar ist.';\n        } else if (error.code === 'ETIMEDOUT' || error.code === 'TIMEOUT') {\n            errorMessage = 'Zeitüberschreitung bei der Anfrage an Ollama. Bitte prüfen Sie die Verbindung oder versuchen Sie ein kleineres Modell.';\n        } else if (error.response?.status === 404) {\n            errorMessage = `Das Ollama-Modell \"${model}\" wurde nicht gefunden. Bitte stellen Sie sicher, dass das Modell installiert ist.`;\n            \n            // Zusätzliche Hilfe zur Installation anbieten\n            showNotification(`Modell \"${model}\" nicht gefunden. Installieren Sie es mit: ollama pull ${model}`, 'warning');\n        } else if (error.response?.data) {\n            errorMessage = `Ollama-Fehler: ${error.response.data.error || JSON.stringify(error.response.data)}`;\n        } else {\n            errorMessage = `Ollama-Fehler: ${error.message}`;\n        }\n        \n        showNotification(errorMessage, 'error');\n        \n        // Fallback: Einfache, generische Commit-Nachricht\n        return \"chore: Änderungen commited\";\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit OpenAI\n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithOpenAI(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const apiKey = config.get('openai.apiKey');\n    const model = config.get('openai.model') || 'gpt-3.5-turbo';\n    \n    if (!apiKey) {\n        throw new Error('OpenAI API-Schlüssel nicht konfiguriert');\n    }\n    \n    try {\n        updateStatusBarProgress(statusBarItem, 'OpenAI generiert', 20, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit OpenAI (${model}) generiert...`, 'info', false);\n        \n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n            model: model,\n            messages: [\n                { role: 'system', content: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.' },\n                { role: 'user', content: prompt }\n            ],\n            temperature: 0.3,\n            max_tokens: 100\n        }, {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        updateStatusBarProgress(statusBarItem, 'OpenAI generiert', 100, 'Fertig');\n        \n        if (response.data && response.data.choices && response.data.choices[0]) {\n            return response.data.choices[0].message.content.trim()\n                .replace(/^[\"']|[\"']$/g, '')\n                .replace(/\\n/g, ' ');\n        } else {\n            throw new Error('Unerwartetes Antwortformat von OpenAI');\n        }\n    } catch (error) {\n        updateStatusBarProgress(statusBarItem, 'OpenAI-Fehler', -1);\n        console.error('OpenAI API-Fehler:', error.response?.data || error.message);\n        throw new Error(`Fehler bei der Kommunikation mit OpenAI: ${error.message}`);\n    }\n}\n\n/**\n * Generiert eine Commit-Nachricht mit Anthropic \n * @param {string} prompt Der zu verwendende Prompt\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateWithAnthropic(prompt) {\n    const config = vscode.workspace.getConfiguration('comitto');\n    const apiKey = config.get('anthropic.apiKey');\n    const model = config.get('anthropic.model') || 'claude-2';\n    \n    if (!apiKey) {\n        throw new Error('Anthropic API-Schlüssel nicht konfiguriert');\n    }\n    \n    try {\n        updateStatusBarProgress(statusBarItem, 'Anthropic generiert', 20, `Modell: ${model}`);\n        showNotification(`KI-Nachricht wird mit Anthropic (${model}) generiert...`, 'info', false);\n        \n        const response = await axios.post('https://api.anthropic.com/v1/messages', {\n            model: model,\n            max_tokens: 100,\n            temperature: 0.3,\n            system: 'Du bist ein Assistent, der hilft, präzise Git-Commit-Nachrichten zu erstellen.',\n            messages: [\n                { role: 'user', content: prompt }\n            ]\n        }, {\n            headers: {\n                'x-api-key': apiKey,\n                'anthropic-version': '2023-06-01',\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        updateStatusBarProgress(statusBarItem, 'Anthropic generiert', 100, 'Fertig');\n        \n        if (response.data && response.data.content && response.data.content[0]) {\n            return response.data.content[0].text.trim()\n                .replace(/^[\"']|[\"']$/g, '')\n                .replace(/\\n/g, ' ');\n        } else {\n            throw new Error('Unerwartetes Antwortformat von Anthropic');\n        }\n    } catch (error) {\n        updateStatusBarProgress(statusBarItem, 'Anthropic-Fehler', -1);\n        console.error('Anthropic API-Fehler:', error.response?.data || error.message);\n        throw new Error(`Fehler bei der Kommunikation mit Anthropic: ${error.message}`);\n    }\n}\n\n// Export der Funktionen der Erweiterung\nmodule.exports = {\n    activate,\n    deactivate,\n    generateWithOllama,\n    generateWithOpenAI,\n    generateWithAnthropic\n}; ","module.exports = require(\"os\");","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst ui = require('./ui'); // Importiere UI-Modul für Hilfsfunktionen\nconst { executeGitCommand, getStatusText, updateStatusBarProgress } = require('./utils');\nconst axios = require('axios');\nconst path = require('path');\n\n// Closure statt globaler Variable für die Statusleiste\nlet statusBarItemRef = null;\n\n/**\n * Registriert Befehle für die Erweiterung\n * @param {vscode.ExtensionContext} context VSCode-Erweiterungskontext\n * @param {Object} providers UI-Provider-Instanzen\n * @param {vscode.StatusBarItem} statusBarItem Statusleistenelement\n * @param {Function} setupFileWatcher Funktion zum Einrichten des FileWatchers\n * @param {Function} disableFileWatcher Funktion zum Deaktivieren des FileWatchers\n * @param {Function} performAutoCommit Funktion zum Ausführen eines Auto-Commits\n * @param {Function} showNotification Funktion zum Anzeigen von Benachrichtigungen\n */\nfunction registerCommands(context, providers, statusBarItem, setupFileWatcher, disableFileWatcher, performAutoCommit, showNotification) {\n    // Statusleiste in Closure speichern statt global\n    statusBarItemRef = statusBarItem;\n    \n    // Auto-Commit ein-/ausschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.enableAutoCommit', async () => {\n            try {\n                // Konfiguration abrufen und ändern\n                const config = vscode.workspace.getConfiguration('comitto');\n                await config.update('autoCommitEnabled', true, vscode.ConfigurationTarget.Global);\n                \n                // FileWatcher einrichten\n                setupFileWatcher(context);\n                \n                // Statusleiste aktualisieren\n                updateStatusBarProgress(statusBarItem, 'Aktiv', 100, 'Automatische Commits aktiviert');\n                showNotification('Automatische Commits aktiviert', 'info');\n                // Logge den Status der automatischen Commits in der Konsole\n                console.log('Automatische Commits wurden aktiviert');\n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Aktivieren des Auto-Commits\", true);\n            }\n        })\n    );\n    \n    // Auto-Commit deaktivieren\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.disableAutoCommit', async () => {\n            try {\n                // Konfiguration abrufen und ändern\n                const config = vscode.workspace.getConfiguration('comitto');\n                await config.update('autoCommitEnabled', false, vscode.ConfigurationTarget.Global);\n                \n                // FileWatcher deaktivieren\n                disableFileWatcher();\n                \n                // Statusleiste aktualisieren\n                updateStatusBarProgress(statusBarItem, 'Inaktiv', 0, 'Automatische Commits deaktiviert');\n                showNotification('Automatische Commits deaktiviert', 'info');\n                \n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Deaktivieren des Auto-Commits\", true);\n            }\n        })\n    );\n    \n    // Auto-Commit umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleAutoCommit', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const isEnabled = config.get('autoCommitEnabled');\n                \n                if (isEnabled) {\n                    await vscode.commands.executeCommand('comitto.disableAutoCommit');\n                } else {\n                    await vscode.commands.executeCommand('comitto.enableAutoCommit');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des Auto-Commits\", true);\n            }\n        })\n    );\n    \n    // Manuellen Commit ausführen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.manualCommit', async () => {\n            try {\n                await performAutoCommit(true); // true = manueller Trigger\n            } catch (error) {\n                handleError(error, \"Fehler beim manuellen Commit\", true);\n            }\n        })\n    );\n    \n    // Dashboard anzeigen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.showDashboard', async () => {\n            try {\n                if (providers && providers.dashboardProvider) {\n                    providers.dashboardProvider.show();\n                } else {\n                    showNotification('Dashboard konnte nicht geöffnet werden.', 'error');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Öffnen des Dashboards\", true);\n            }\n        })\n    );\n    \n    // Einfache UI anzeigen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.showSimpleUI', async () => {\n            try {\n                if (providers && providers.simpleUIProvider) {\n                    providers.simpleUIProvider.show();\n                } else {\n                    showNotification('Einfache UI konnte nicht geöffnet werden.', 'error');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Öffnen der einfachen UI\", true);\n            }\n        })\n    );\n    \n    // AI-Provider auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectAiProvider', async () => {\n            try {\n                const providers = ['ollama', 'openai', 'anthropic'];\n                const selection = await vscode.window.showQuickPick(providers, {\n                    placeHolder: 'Wähle einen KI-Provider für die Commit-Nachrichtengenerierung'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    await config.update('aiProvider', selection, vscode.ConfigurationTarget.Global);\n                    showNotification(`KI-Provider wurde auf ${selection} gesetzt.`, 'info');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des KI-Providers\", true);\n            }\n        })\n    );\n    \n    // Einfachen Modus umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleSimpleMode', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const uiSettings = config.get('uiSettings');\n                const newValue = !uiSettings.simpleMode;\n                \n                await config.update('uiSettings', { ...uiSettings, simpleMode: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Einfacher Modus wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des einfachen Modus\", true);\n            }\n        })\n    );\n    \n    // Theme auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectTheme', async () => {\n            try {\n                const themes = ['auto', 'hell', 'dunkel'];\n                const selection = await vscode.window.showQuickPick(themes, {\n                    placeHolder: 'Wähle ein Theme für Comitto'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const uiSettings = config.get('uiSettings');\n                    await config.update('uiSettings', { ...uiSettings, theme: selection }, vscode.ConfigurationTarget.Global);\n                    showNotification(`Theme wurde auf '${selection}' gesetzt.`, 'info');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des Themes\", true);\n            }\n        })\n    );\n    \n    // onSave-Trigger umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleOnSave', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const newValue = !triggerRules.onSave;\n                \n                await config.update('triggerRules', { ...triggerRules, onSave: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Auto-Commit beim Speichern wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des onSave-Triggers\", true);\n            }\n        })\n    );\n    \n    // onInterval-Trigger umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleOnInterval', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const newValue = !triggerRules.onInterval;\n                \n                await config.update('triggerRules', { ...triggerRules, onInterval: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Auto-Commit im Intervall wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des onInterval-Triggers\", true);\n            }\n        })\n    );\n    \n    // onBranchSwitch-Trigger umschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleOnBranchSwitch', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const newValue = !triggerRules.onBranchSwitch;\n                \n                await config.update('triggerRules', { ...triggerRules, onBranchSwitch: newValue }, vscode.ConfigurationTarget.Global);\n                showNotification(`Auto-Commit beim Branch-Wechsel wurde ${newValue ? 'aktiviert' : 'deaktiviert'}.`, 'info');\n                \n                // UI aktualisieren\n                if (providers) {\n                    providers.settingsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des onBranchSwitch-Triggers\", true);\n            }\n        })\n    );\n    \n    // Dateimuster bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editFilePatterns', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentPatterns = triggerRules.filePatterns.join(', ');\n                \n                const newPatterns = await vscode.window.showInputBox({\n                    prompt: \"Dateimuster (durch Komma getrennt)\",\n                    value: currentPatterns,\n                    placeHolder: \"z.B. **/*.js, **/*.ts\"\n                });\n                \n                if (newPatterns !== undefined) {\n                    const patternsArray = newPatterns.split(',').map(p => p.trim()).filter(p => p.length > 0);\n                    await config.update('triggerRules', { ...triggerRules, filePatterns: patternsArray }, vscode.ConfigurationTarget.Global);\n                    showNotification('Dateimuster wurden aktualisiert.', 'info');\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten der Dateimuster\", true);\n            }\n        })\n    );\n    \n    // Minimale Änderungsanzahl bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editMinChangeCount', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentValue = triggerRules.minChangeCount.toString();\n                \n                const newValue = await vscode.window.showInputBox({\n                    prompt: \"Minimale Anzahl an Änderungen für Auto-Commit\",\n                    value: currentValue,\n                    placeHolder: \"z.B. 10\"\n                });\n                \n                if (newValue !== undefined) {\n                    const numValue = parseInt(newValue);\n                    if (!isNaN(numValue) && numValue >= 0) {\n                        await config.update('triggerRules', { ...triggerRules, minChangeCount: numValue }, vscode.ConfigurationTarget.Global);\n                        showNotification(`Minimale Änderungsanzahl auf ${numValue} gesetzt.`, 'info');\n                        \n                        // UI aktualisieren\n                        if (providers) {\n                            providers.settingsProvider.refresh();\n                        }\n                    } else {\n                        showNotification('Bitte geben Sie eine gültige Zahl ein.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten der minimalen Änderungsanzahl\", true);\n            }\n        })\n    );\n    \n    // Zeitschwellwert bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editTimeThreshold', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentValue = triggerRules.timeThresholdMinutes.toString();\n                \n                const newValue = await vscode.window.showInputBox({\n                    prompt: \"Zeitschwellwert in Minuten (Zeit seit letztem Commit)\",\n                    value: currentValue,\n                    placeHolder: \"z.B. 30\"\n                });\n                \n                if (newValue !== undefined) {\n                    const numValue = parseInt(newValue);\n                    if (!isNaN(numValue) && numValue >= 0) {\n                        await config.update('triggerRules', { ...triggerRules, timeThresholdMinutes: numValue }, vscode.ConfigurationTarget.Global);\n                        showNotification(`Zeitschwellwert auf ${numValue} Minuten gesetzt.`, 'info');\n                        \n                        // UI aktualisieren\n                        if (providers) {\n                            providers.settingsProvider.refresh();\n                        }\n                    } else {\n                        showNotification('Bitte geben Sie eine gültige Zahl ein.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Zeitschwellwerts\", true);\n            }\n        })\n    );\n    \n    // Dateien-Schwellwert bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editFileCountThreshold', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                const currentValue = triggerRules.fileCountThreshold.toString();\n                \n                const newValue = await vscode.window.showInputBox({\n                    prompt: \"Dateien-Schwellwert (Anzahl der geänderten Dateien)\",\n                    value: currentValue,\n                    placeHolder: \"z.B. 3\"\n                });\n                \n                if (newValue !== undefined) {\n                    const numValue = parseInt(newValue);\n                    if (!isNaN(numValue) && numValue >= 0) {\n                        await config.update('triggerRules', { ...triggerRules, fileCountThreshold: numValue }, vscode.ConfigurationTarget.Global);\n                        showNotification(`Dateien-Schwellwert auf ${numValue} gesetzt.`, 'info');\n                        \n                        // UI aktualisieren\n                        if (providers) {\n                            providers.settingsProvider.refresh();\n                        }\n                    } else {\n                        showNotification('Bitte geben Sie eine gültige Zahl ein.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Dateien-Schwellwerts\", true);\n            }\n        })\n    );\n    \n    // Einstellungen aktualisieren\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.refreshSettings', async () => {\n            try {\n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n                showNotification('Einstellungen wurden aktualisiert.', 'info');\n            } catch (error) {\n                handleError(error, \"Fehler beim Aktualisieren der Einstellungen\", true);\n            }\n        })\n    );\n    \n    // Einstellungen öffnen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.openSettings', async () => {\n            try {\n                await vscode.commands.executeCommand('workbench.action.openSettings', 'comitto');\n            } catch (error) {\n                handleError(error, \"Fehler beim Öffnen der Einstellungen\", true);\n            }\n        })\n    );\n    \n    // Manuellen Commit ausführen (Alias für manualCommit)\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.performManualCommit', async () => {\n            try {\n                await performAutoCommit(true); // true = manueller Trigger\n            } catch (error) {\n                handleError(error, \"Fehler beim manuellen Commit\", true);\n            }\n        })\n    );\n    \n    // OpenAI-Modell auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectOpenAIModel', async () => {\n            try {\n                const models = [\n                    { label: 'GPT-4o', value: 'gpt-4o' },\n                    { label: 'GPT-4o Mini', value: 'gpt-4o-mini' },\n                    { label: 'GPT-4', value: 'gpt-4' },\n                    { label: 'GPT-4 Turbo', value: 'gpt-4-turbo' },\n                    { label: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' }\n                ];\n                \n                const selection = await vscode.window.showQuickPick(models, {\n                    placeHolder: 'Wähle ein OpenAI-Modell',\n                    title: 'OpenAI-Modell auswählen'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const openaiConfig = config.get('openai') || {};\n                    \n                    // Aktualisiere das Modell in den Einstellungen\n                    openaiConfig.model = selection.value;\n                    await config.update('openai', openaiConfig, vscode.ConfigurationTarget.Global);\n                    \n                    showNotification(`OpenAI-Modell wurde auf ${selection.label} (${selection.value}) gesetzt.`, 'info');\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des OpenAI-Modells\", true);\n            }\n        })\n    );\n    \n    // OpenAI API-Schlüssel bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editOpenAIKey', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const openaiConfig = config.get('openai') || {};\n                const currentKey = openaiConfig.apiKey || '';\n                \n                // Maske für den Schlüssel erstellen, falls einer existiert\n                const maskedKey = currentKey ? '********' + currentKey.slice(-4) : '';\n                \n                const input = await vscode.window.showInputBox({\n                    prompt: 'OpenAI API-Schlüssel eingeben',\n                    placeHolder: 'sk-...',\n                    value: maskedKey,\n                    password: true // Eingabe als Passwort maskieren\n                });\n                \n                if (input !== undefined) {\n                    // Wenn der Benutzer nicht die maskierte Version gelassen hat\n                    if (input !== maskedKey) {\n                        // Schlüssel aktualisieren\n                        openaiConfig.apiKey = input;\n                        await config.update('openai', openaiConfig, vscode.ConfigurationTarget.Global);\n                        showNotification('OpenAI API-Schlüssel wurde aktualisiert.', 'info');\n                    }\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des OpenAI API-Schlüssels\", true);\n            }\n        })\n    );\n    \n    // Anthropic-Modell auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectAnthropicModel', async () => {\n            try {\n                const models = [\n                    { label: 'Claude 3 Opus', value: 'claude-3-opus-20240229' },\n                    { label: 'Claude 3 Sonnet', value: 'claude-3-sonnet-20240229' },\n                    { label: 'Claude 3 Haiku', value: 'claude-3-haiku-20240307' },\n                    { label: 'Claude 2', value: 'claude-2' },\n                    { label: 'Claude 2.1', value: 'claude-2.1' },\n                    { label: 'Claude Instant', value: 'claude-instant-1' }\n                ];\n                \n                const selection = await vscode.window.showQuickPick(models, {\n                    placeHolder: 'Wähle ein Anthropic-Modell',\n                    title: 'Anthropic-Modell auswählen'\n                });\n                \n                if (selection) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const anthropicConfig = config.get('anthropic') || {};\n                    \n                    // Aktualisiere das Modell in den Einstellungen\n                    anthropicConfig.model = selection.value;\n                    await config.update('anthropic', anthropicConfig, vscode.ConfigurationTarget.Global);\n                    \n                    showNotification(`Anthropic-Modell wurde auf ${selection.label} (${selection.value}) gesetzt.`, 'info');\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler bei der Auswahl des Anthropic-Modells\", true);\n            }\n        })\n    );\n    \n    // Und auch einen Befehl für Anthropic, da dieser ebenfalls in der UI referenziert wird\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editAnthropicKey', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const anthropicConfig = config.get('anthropic') || {};\n                const currentKey = anthropicConfig.apiKey || '';\n                \n                // Maske für den Schlüssel erstellen, falls einer existiert\n                const maskedKey = currentKey ? '********' + currentKey.slice(-4) : '';\n                \n                const input = await vscode.window.showInputBox({\n                    prompt: 'Anthropic API-Schlüssel eingeben',\n                    placeHolder: 'sk-...',\n                    value: maskedKey,\n                    password: true // Eingabe als Passwort maskieren\n                });\n                \n                if (input !== undefined) {\n                    // Wenn der Benutzer nicht die maskierte Version gelassen hat\n                    if (input !== maskedKey) {\n                        // Schlüssel aktualisieren\n                        anthropicConfig.apiKey = input;\n                        await config.update('anthropic', anthropicConfig, vscode.ConfigurationTarget.Global);\n                        showNotification('Anthropic API-Schlüssel wurde aktualisiert.', 'info');\n                    }\n                    \n                    // UI aktualisieren\n                    if (providers) {\n                        providers.settingsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Anthropic API-Schlüssels\", true);\n            }\n        })\n    );\n    \n    // Und auch einen Befehl für die Bearbeitung der Prompt-Vorlage\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editPromptTemplate', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const currentTemplate = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht für diese Änderungen: {changes}';\n                \n                // Multi-line Text Editor verwenden, um die Vorlage zu bearbeiten\n                const document = await vscode.workspace.openTextDocument({\n                    content: currentTemplate,\n                    language: 'markdown'\n                });\n                \n                const editor = await vscode.window.showTextDocument(document);\n                \n                // Event-Listener für das Speichern registrieren\n                const disposable = vscode.workspace.onDidSaveTextDocument(async (doc) => {\n                    if (doc === document) {\n                        const newTemplate = doc.getText();\n                        await config.update('promptTemplate', newTemplate, vscode.ConfigurationTarget.Global);\n                        showNotification('Prompt-Vorlage wurde aktualisiert.', 'info');\n                        \n                        // Event-Listener und temporäres Dokument entfernen\n                        disposable.dispose();\n                        setTimeout(() => {\n                            vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n                        }, 500);\n                    }\n                });\n                \n                // Info-Meldung anzeigen\n                vscode.window.showInformationMessage('Bearbeiten Sie die Prompt-Vorlage und speichern Sie die Datei (STRG+S), um die Änderungen zu übernehmen.');\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten der Prompt-Vorlage\", true);\n            }\n        })\n    );\n    \n    // Alle Änderungen stagen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.stageAll', async () => {\n            try {\n                const gitExtension = vscode.extensions.getExtension('vscode.git')?.exports;\n                if (gitExtension) {\n                    const git = gitExtension.getAPI(1);\n                    if (git.repositories && git.repositories.length > 0) {\n                        await git.repositories[0].add([]);\n                        showNotification('Alle Änderungen wurden gestagt.', 'info');\n                    } else {\n                        showNotification('Kein Git-Repository gefunden.', 'error');\n                    }\n                } else {\n                    // Fallback auf git add -A\n                    const workspaceFolders = vscode.workspace.workspaceFolders;\n                    if (workspaceFolders && workspaceFolders.length > 0) {\n                        const path = workspaceFolders[0].uri.fsPath;\n                        await executeGitCommand(path, ['add', '-A']);\n                        showNotification('Alle Änderungen wurden gestagt.', 'info');\n                    } else {\n                        showNotification('Kein Arbeitsbereich geöffnet.', 'error');\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Stagen aller Änderungen\", true);\n            }\n        })\n    );\n    \n    // Auto-Push ein-/ausschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleAutoPush', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const gitSettings = config.get('gitSettings');\n                const currentValue = gitSettings.autoPush || false;\n                \n                gitSettings.autoPush = !currentValue;\n                await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n                \n                showNotification(`Auto-Push ${!currentValue ? 'aktiviert' : 'deaktiviert'}`, 'info');\n                \n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten des Auto-Push\", true);\n            }\n        })\n    );\n    \n    // Branch bearbeiten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.editBranch', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const gitSettings = config.get('gitSettings');\n                const currentBranch = gitSettings.branch || '';\n                \n                const input = await vscode.window.showInputBox({\n                    prompt: 'Branch-Name eingeben (leer für aktuellen Branch)',\n                    value: currentBranch,\n                    placeHolder: 'z.B. main oder feature/new-feature'\n                });\n                \n                if (input !== undefined) {\n                    gitSettings.branch = input;\n                    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n                    showNotification(`Branch auf \"${input || 'aktueller Branch'}\" gesetzt`, 'info');\n                    \n                    // UI-Provider aktualisieren\n                    if (providers) {\n                        providers.statusProvider.refresh();\n                        providers.settingsProvider.refresh();\n                        providers.quickActionsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Bearbeiten des Branch\", true);\n            }\n        })\n    );\n    \n    // Commit-Stil auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectCommitStyle', async () => {\n            try {\n                const styles = [\n                    { label: 'Conventional Commits', value: 'conventional', description: 'feat:, fix:, docs:, style:, etc.' },\n                    { label: 'Gitmoji', value: 'gitmoji', description: '🎉, 🐛, 📚, 💄, etc.' },\n                    { label: 'Einfach', value: 'simple', description: 'Einfache beschreibende Nachrichten' },\n                    { label: 'Angular', value: 'angular', description: 'Angular Commit Convention' },\n                    { label: 'Atom', value: 'atom', description: 'Atom Editor Style' }\n                ];\n                \n                const selected = await vscode.window.showQuickPick(styles, {\n                    placeHolder: 'Commit-Stil auswählen'\n                });\n                \n                if (selected) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const gitSettings = config.get('gitSettings');\n                    gitSettings.commitMessageStyle = selected.value;\n                    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n                    showNotification(`Commit-Stil auf \"${selected.label}\" gesetzt`, 'info');\n                    \n                    // UI-Provider aktualisieren\n                    if (providers) {\n                        providers.statusProvider.refresh();\n                        providers.settingsProvider.refresh();\n                        providers.quickActionsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Auswählen des Commit-Stils\", true);\n            }\n        })\n    );\n    \n    // Commit-Sprache auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectCommitLanguage', async () => {\n            try {\n                const languages = [\n                    { label: 'Deutsch', value: 'de' },\n                    { label: 'English', value: 'en' },\n                    { label: 'Français', value: 'fr' },\n                    { label: 'Español', value: 'es' },\n                    { label: 'Italiano', value: 'it' },\n                    { label: '日本語', value: 'ja' },\n                    { label: '中文', value: 'zh' }\n                ];\n                \n                const selected = await vscode.window.showQuickPick(languages, {\n                    placeHolder: 'Sprache für Commit-Nachrichten auswählen'\n                });\n                \n                if (selected) {\n                    const config = vscode.workspace.getConfiguration('comitto');\n                    const gitSettings = config.get('gitSettings');\n                    gitSettings.commitMessageLanguage = selected.value;\n                    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n                    showNotification(`Commit-Sprache auf \"${selected.label}\" gesetzt`, 'info');\n                    \n                    // UI-Provider aktualisieren\n                    if (providers) {\n                        providers.statusProvider.refresh();\n                        providers.settingsProvider.refresh();\n                        providers.quickActionsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Auswählen der Commit-Sprache\", true);\n            }\n        })\n    );\n    \n    // Trigger konfigurieren\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.configureTriggers', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const triggerRules = config.get('triggerRules');\n                \n                const options = [\n                    { label: `${triggerRules.onSave ? '✓' : '✗'} Bei Speichern`, value: 'onSave' },\n                    { label: `${triggerRules.onInterval ? '✓' : '✗'} Intervall-basiert`, value: 'onInterval' },\n                    { label: `${triggerRules.onBranchSwitch ? '✓' : '✗'} Bei Branch-Wechsel`, value: 'onBranchSwitch' },\n                    { label: 'Datei-Anzahl-Schwellwert bearbeiten', value: 'fileCountThreshold' },\n                    { label: 'Zeit-Schwellwert bearbeiten', value: 'timeThreshold' },\n                    { label: 'Mindest-Änderungs-Anzahl bearbeiten', value: 'minChangeCount' },\n                    { label: 'Datei-Muster bearbeiten', value: 'filePatterns' }\n                ];\n                \n                const selected = await vscode.window.showQuickPick(options, {\n                    placeHolder: 'Trigger-Einstellung auswählen'\n                });\n                \n                if (selected) {\n                    switch (selected.value) {\n                        case 'onSave':\n                        case 'onInterval':\n                        case 'onBranchSwitch':\n                            triggerRules[selected.value] = !triggerRules[selected.value];\n                            await config.update('triggerRules', triggerRules, vscode.ConfigurationTarget.Global);\n                            showNotification(`${selected.label} ${triggerRules[selected.value] ? 'aktiviert' : 'deaktiviert'}`, 'info');\n                            break;\n                        case 'fileCountThreshold':\n                            await vscode.commands.executeCommand('comitto.editFileCountThreshold');\n                            break;\n                        case 'timeThreshold':\n                            await vscode.commands.executeCommand('comitto.editTimeThreshold');\n                            break;\n                        case 'minChangeCount':\n                            await vscode.commands.executeCommand('comitto.editMinChangeCount');\n                            break;\n                        case 'filePatterns':\n                            await vscode.commands.executeCommand('comitto.editFilePatterns');\n                            break;\n                    }\n                    \n                    // UI-Provider aktualisieren\n                    if (providers) {\n                        providers.statusProvider.refresh();\n                        providers.settingsProvider.refresh();\n                        providers.quickActionsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Konfigurieren der Trigger\", true);\n            }\n        })\n    );\n    \n    // .gitignore ein-/ausschalten\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.toggleUseGitignore', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const gitSettings = config.get('gitSettings');\n                const currentValue = gitSettings.useGitignore !== false;\n                \n                gitSettings.useGitignore = !currentValue;\n                await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n                \n                showNotification(`Gitignore ${!currentValue ? 'aktiviert' : 'deaktiviert'}`, 'info');\n                \n                // UI-Provider aktualisieren\n                if (providers) {\n                    providers.statusProvider.refresh();\n                    providers.settingsProvider.refresh();\n                    providers.quickActionsProvider.refresh();\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Umschalten der Gitignore-Nutzung\", true);\n            }\n        })\n    );\n    \n    // KI-Provider konfigurieren\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.configureAIProvider', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const currentProvider = config.get('aiProvider');\n                \n                const providers = [\n                    { label: 'OpenAI', value: 'openai', description: 'ChatGPT, GPT-4, etc.' },\n                    { label: 'Anthropic', value: 'anthropic', description: 'Claude Models' },\n                    { label: 'Ollama', value: 'ollama', description: 'Lokale AI-Modelle' }\n                ];\n                \n                const selected = await vscode.window.showQuickPick(providers, {\n                    placeHolder: `Aktuell: ${currentProvider}. Neuen KI-Provider auswählen`\n                });\n                \n                if (selected && selected.value !== currentProvider) {\n                    await config.update('aiProvider', selected.value, vscode.ConfigurationTarget.Global);\n                    showNotification(`KI-Provider auf \"${selected.label}\" gesetzt`, 'info');\n                    \n                    // Je nach Provider weitere Konfiguration anbieten\n                    switch (selected.value) {\n                        case 'openai':\n                            const configureOpenAI = await vscode.window.showInformationMessage(\n                                'OpenAI ausgewählt. Möchten Sie den API-Schlüssel konfigurieren?',\n                                'Ja', 'Nein'\n                            );\n                            if (configureOpenAI === 'Ja') {\n                                await vscode.commands.executeCommand('comitto.editOpenAIKey');\n                            }\n                            break;\n                        case 'anthropic':\n                            const configureAnthropic = await vscode.window.showInformationMessage(\n                                'Anthropic ausgewählt. Möchten Sie den API-Schlüssel konfigurieren?',\n                                'Ja', 'Nein'\n                            );\n                            if (configureAnthropic === 'Ja') {\n                                await vscode.commands.executeCommand('comitto.editAnthropicKey');\n                            }\n                            break;\n                        case 'ollama':\n                            const configureOllama = await vscode.window.showInformationMessage(\n                                'Ollama ausgewählt. Stellen Sie sicher, dass Ollama lokal läuft.',\n                                'OK'\n                            );\n                            break;\n                    }\n                    \n                    // UI-Provider aktualisieren\n                    if (providers) {\n                        providers.statusProvider.refresh();\n                        providers.settingsProvider.refresh();\n                        providers.quickActionsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Konfigurieren des KI-Providers\", true);\n            }\n        })\n    );\n    \n    // Ausgewählte Dateien stagen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.stageSelected', async () => {\n            try {\n                const gitExtension = vscode.extensions.getExtension('vscode.git')?.exports;\n                if (gitExtension) {\n                    const git = gitExtension.getAPI(1);\n                    if (git.repositories && git.repositories.length > 0) {\n                        const repository = git.repositories[0];\n                        \n                        // Geänderte Dateien auflisten\n                        const changes = repository.state.workingTreeChanges;\n                        if (changes.length === 0) {\n                            showNotification('Keine Änderungen zum Stagen vorhanden.', 'info');\n                            return;\n                        }\n                        \n                        // Dateien zum Auswählen anbieten\n                        const options = changes.map(change => ({\n                            label: path.basename(change.uri.fsPath),\n                            description: change.uri.fsPath,\n                            value: change.uri\n                        }));\n                        \n                        const selectedFiles = await vscode.window.showQuickPick(options, {\n                            canPickMany: true,\n                            placeHolder: 'Dateien zum Stagen auswählen'\n                        });\n                        \n                        if (selectedFiles && selectedFiles.length > 0) {\n                            const fileUris = selectedFiles.map(file => file.value);\n                            await repository.add(fileUris);\n                            showNotification(`${selectedFiles.length} Datei(en) gestagt.`, 'info');\n                        }\n                    } else {\n                        showNotification('Kein Git-Repository gefunden.', 'error');\n                    }\n                } else {\n                    showNotification('Git-Erweiterung nicht verfügbar.', 'error');\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Stagen ausgewählter Dateien\", true);\n            }\n        })\n    );\n    \n    // Stage-Modus auswählen\n    context.subscriptions.push(\n        vscode.commands.registerCommand('comitto.selectStageMode', async () => {\n            try {\n                const config = vscode.workspace.getConfiguration('comitto');\n                const gitSettings = config.get('gitSettings');\n                \n                const stageModes = [\n                    { \n                        label: 'Alle Dateien stagen', \n                        value: 'all',\n                        description: 'Automatisch alle geänderten Dateien stagen'\n                    },\n                    { \n                        label: 'Spezifische Dateien stagen', \n                        value: 'specific',\n                        description: 'Nur Dateien mit bestimmten Mustern stagen'\n                    },\n                    { \n                        label: 'Nachfragen', \n                        value: 'ask',\n                        description: 'Vor jedem Commit nach Dateien fragen'\n                    }\n                ];\n                \n                const selected = await vscode.window.showQuickPick(stageModes, {\n                    placeHolder: 'Stage-Modus auswählen'\n                });\n                \n                if (selected) {\n                    gitSettings.stageMode = selected.value;\n                    await config.update('gitSettings', gitSettings, vscode.ConfigurationTarget.Global);\n                    showNotification(`Stage-Modus auf \"${selected.label}\" gesetzt`, 'info');\n                    \n                    // UI-Provider aktualisieren\n                    if (providers) {\n                        providers.statusProvider.refresh();\n                        providers.settingsProvider.refresh();\n                        providers.quickActionsProvider.refresh();\n                    }\n                }\n            } catch (error) {\n                handleError(error, \"Fehler beim Auswählen des Stage-Modus\", true);\n            }\n        })\n    );\n}\n\n/**\n * Generiert eine Commit-Nachricht basierend auf Git-Status und Diff\n * @param {string} gitStatus Git-Status-Ausgabe\n * @param {string} diffOutput Git-Diff-Ausgabe\n * @param {Function} generateWithOllama Funktion zur Generierung einer Commit-Nachricht mit Ollama\n * @param {Function} generateWithOpenAI Funktion zur Generierung einer Commit-Nachricht mit OpenAI\n * @param {Function} generateWithAnthropic Funktion zur Generierung einer Commit-Nachricht mit Anthropic\n * @returns {Promise<string>} Generierte Commit-Nachricht\n */\nasync function generateCommitMessage(gitStatus, diffOutput, generateWithOllama, generateWithOpenAI, generateWithAnthropic) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        const aiProvider = config.get('aiProvider');\n        const gitSettings = config.get('gitSettings');\n        \n        // Änderungen in ein lesbares Format bringen\n        const changes = gitStatus.split('\\n')\n            .filter(line => line.trim().length > 0)\n            .map(line => {\n                const status = line.substring(0, 2).trim();\n                const filePath = line.substring(3).trim();\n                return `${getStatusText(status)} ${filePath}`;\n            })\n            .join('\\n');\n        \n        // Prompt-Vorlage mit Änderungen füllen\n        let promptTemplate = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht basierend auf folgenden Änderungen:';\n        promptTemplate = promptTemplate.replace('{changes}', changes);\n        \n        // Sprache für die Commit-Nachricht einfügen\n        const language = gitSettings.commitMessageLanguage || 'de';\n        if (!promptTemplate.includes(language)) {\n            promptTemplate += `\\nDie Commit-Nachricht soll auf ${language.toUpperCase()} sein.`;\n        }\n        \n        // Commit-Stil einfügen\n        const style = gitSettings.commitMessageStyle || 'conventional';\n        if (style === 'conventional' && !promptTemplate.includes('conventional')) {\n            promptTemplate += `\\nVerwende das Conventional Commits Format (feat, fix, docs, style, etc.).`;\n        } else if (style === 'gitmoji' && !promptTemplate.includes('gitmoji')) {\n            promptTemplate += `\\nVerwende Gitmoji-Emojis am Anfang der Commit-Nachricht (🎉, 🐛, 📚, 💄, etc.).`;\n        } else if (style === 'angular' && !promptTemplate.includes('angular')) {\n            promptTemplate += `\\nVerwende das Angular Commit Convention Format mit type(scope): description.`;\n        } else if (style === 'atom' && !promptTemplate.includes('atom')) {\n            promptTemplate += `\\nVerwende das Atom Editor Commit Format: :emoji: description.`;\n        } else if (style === 'simple' && !promptTemplate.includes('simple')) {\n            promptTemplate += `\\nVerwende einfache, beschreibende Commit-Nachrichten ohne spezifisches Format.`;\n        }\n        \n        // Verschiedene KI-Provider unterstützen\n        switch (aiProvider) {\n            case 'ollama':\n                if (typeof generateWithOllama !== 'function') {\n                    throw new Error('generateWithOllama ist nicht definiert');\n                }\n                return await generateWithOllama(promptTemplate);\n            case 'openai':\n                if (typeof generateWithOpenAI !== 'function') {\n                    throw new Error('generateWithOpenAI ist nicht definiert');\n                }\n                return await generateWithOpenAI(promptTemplate);\n            case 'anthropic':\n                if (typeof generateWithAnthropic !== 'function') {\n                    throw new Error('generateWithAnthropic ist nicht definiert');\n                }\n                return await generateWithAnthropic(promptTemplate);\n            default:\n                throw new Error(`Unbekannter KI-Provider: ${aiProvider}`);\n        }\n    } catch (error) {\n        handleError(error, \"Fehler bei der Generierung der Commit-Nachricht\");\n        // Fallback-Nachricht bei Fehler zurückgeben\n        return \"chore: auto commit (Fehler bei der Nachrichtengenerierung)\";\n    }\n}\n\n/**\n * Bereitet eine Prompt-Vorlage mit Git-Status- und Diff-Informationen vor\n * @param {string} gitStatus Git-Status-Ausgabe\n * @param {string} diffOutput Git-Diff-Ausgabe\n * @returns {string} Vorbereiteter Prompt\n */\nfunction preparePromptTemplate(gitStatus, diffOutput) {\n    try {\n        const config = vscode.workspace.getConfiguration('comitto');\n        let template = config.get('promptTemplate') || 'Generiere eine Commit-Nachricht basierend auf folgenden Änderungen:';\n        \n        // Status-Informationen hinzufügen\n        template = template.replace('{changes}', gitStatus || 'Keine Status-Informationen verfügbar.');\n        \n        // Gekürzte Diff-Informationen hinzufügen, wenn verfügbar\n        if (diffOutput && diffOutput.length > 0) {\n            // Diff auf sinnvolle Größe beschränken (max. 2000 Zeichen)\n            const maxLength = 2000;\n            const truncatedDiff = diffOutput.length > maxLength\n                ? diffOutput.substring(0, maxLength) + '...(gekürzt)'\n                : diffOutput;\n                \n            template += `\\n\\nHier sind einige der Änderungen im Detail:\\n${truncatedDiff}`;\n        }\n        \n        return template;\n    } catch (error) {\n        handleError(error, \"Fehler bei der Vorbereitung des Prompts\");\n        return 'Generiere eine Commit-Nachricht basierend auf den letzten Änderungen.';\n    }\n}\n\n/**\n * Verarbeitet die Daten aus dem Git-Diff für den Prompt\n * @param {string} diffOutput Git-Diff-Ausgabe\n * @returns {string} Verarbeitete Diff-Daten\n */\nfunction processDiffForPrompt(diffOutput) {\n    try {\n        if (!diffOutput || diffOutput.trim().length === 0) {\n            return '';\n        }\n        \n        // Sehr große Diffs kürzen\n        const maxDiffLength = 2000;\n        if (diffOutput.length > maxDiffLength) {\n            // Nur die wichtigsten Teile behalten\n            const lines = diffOutput.split('\\n');\n            const fileHeaderLines = lines.filter(line => line.startsWith('diff --git') || line.startsWith('+++') || line.startsWith('---'));\n            const changedLines = lines.filter(line => line.startsWith('+') || line.startsWith('-'));\n            \n            // Kombination aus Header und einigen geänderten Zeilen\n            let result = fileHeaderLines.join('\\n') + '\\n';\n            result += '...\\n';\n            result += changedLines.slice(0, 30).join('\\n'); // Begrenzen auf 30 Zeilen\n            \n            if (changedLines.length > 30) {\n                result += '\\n...(weitere Änderungen gekürzt)';\n            }\n            \n            return result;\n        }\n        \n        return diffOutput;\n    } catch (error) {\n        handleError(error, \"Fehler bei der Verarbeitung der Diff-Daten\");\n        return diffOutput || '';\n    }\n}\n\n/**\n * Verarbeitet eine rohe Commit-Nachricht zur besseren Darstellung\n * @param {string} rawMessage Rohe Commit-Nachricht\n * @returns {string} Verarbeitete Commit-Nachricht\n */\nfunction processCommitMessage(rawMessage) {\n    try {\n        if (!rawMessage) {\n            return \"chore: auto commit\";\n        }\n        \n        let processedMessage = rawMessage.trim();\n        \n        // Entferne Markdown-Formatierung, wenn vorhanden\n        processedMessage = processedMessage.replace(/^#\\s+/gm, '');\n        \n        // Auf mehrere Zeilen prüfen und ggf. auf eine Zeile reduzieren\n        const lines = processedMessage.split('\\n').filter(line => line.trim().length > 0);\n        if (lines.length > 1) {\n            // Erste Zeile als Hauptnachricht, Rest als Beschreibung\n            const config = vscode.workspace.getConfiguration('comitto');\n            const gitSettings = config.get('gitSettings');\n            \n            // Prüfen, ob mehrzeilige Nachrichten erlaubt sind\n            if (gitSettings.allowMultilineMessages) {\n                // Formatiere mehrzeilige Nachricht entsprechend\n                return processedMessage;\n            } else {\n                // Nur die erste Zeile zurückgeben\n                return lines[0];\n            }\n        }\n        \n        return processedMessage;\n    } catch (error) {\n        handleError(error, \"Fehler bei der Verarbeitung der Commit-Nachricht\");\n        return rawMessage ? rawMessage.trim() : \"chore: auto commit\";\n    }\n}\n\n/**\n * Fehlerbehandlung für Commands\n * @param {Error} error Der aufgetretene Fehler\n * @param {string} context Kontext, in dem der Fehler aufgetreten ist\n * @param {boolean} showNotification Ob eine Benachrichtigung angezeigt werden soll\n */\nfunction handleError(error, context = 'Allgemeiner Fehler', showNotification = true) {\n    console.error(`Fehler in commands.js (${context}):`, error);\n    \n    if (showNotification) {\n        vscode.window.showErrorMessage(`Comitto Fehler: ${error.message}`);\n    }\n    \n    // Statusleiste aktualisieren\n    if (statusBarItemRef) {\n        updateStatusBarProgress(statusBarItemRef, 'Fehler', -1);\n        \n        // Nach 3 Sekunden auf normalen Status zurücksetzen\n        setTimeout(() => {\n            const config = vscode.workspace.getConfiguration('comitto');\n            const isEnabled = config.get('autoCommitEnabled');\n            updateStatusBarProgress(\n                statusBarItemRef, \n                isEnabled ? 'Aktiv' : 'Inaktiv',\n                isEnabled ? 100 : 0\n            );\n        }, 3000);\n    }\n    \n    // Fehler für die aufrufende Funktion weitergeben\n    throw error;\n}\n\n// Notwendige Exporte für externe Module\nmodule.exports = {\n    registerCommands,\n    generateCommitMessage,\n    handleError,\n    preparePromptTemplate,\n    processDiffForPrompt,\n    processCommitMessage\n}; ","module.exports = require(\"tty\");","module.exports = require(\"stream\");","module.exports = require(\"assert\");","module.exports = require(\"zlib\");","module.exports = require(\"events\");","module.exports = require(\"child_process\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"crypto\");","module.exports = require(\"url\");","module.exports = require(\"http\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [121,730], () => (__webpack_require__(286)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 121 ? \"vendor\" : chunkId) + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","installedChunks","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_unsupportedIterableToArray","_arrayLikeToArray","toString","Array","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","outputChannel","statusBarItem","fileWatcher","vscode","require","axios","path","exec","fs","ignore","ui","commands","_require2","executeGitCommand","ComittoError","getStatusText","ErrorTypes","logError","getErrorLogs","getDiagnosticInfo","withRetry","updateStatusBarProgress","os","changedFiles","WebviewPanel","Set","isCommitInProgress","lastCommitTime","gitignoreObj","uiProviders","intervalTimer","debugLogs","addDebugLog","message","undefined","logEntry","timestamp","Date","toISOString","unshift","console","error","warn","log","concat","logsProvider","addLog","debugLog","category","level","workspace","getConfiguration","get","formattedMessage","window","createOutputChannel","appendLine","show","logDir","join","process","env","HOME","USERPROFILE","existsSync","mkdirSync","recursive","logFile","split","appendFileSync","handleError","_x","_handleError","_callee2","contextMessage","showToUser","comittoError","viewDetailsButton","reportButton","messagePrefix","userMessage","issueBody","_args2","_context2","UNKNOWN","context","toJSON","showErrorMessage","showErrorDetails","encodeURIComponent","JSON","stringify","version","extensions","getExtension","packageJSON","openExternal","Uri","parse","panel","createWebviewPanel","ViewColumn","One","enableScripts","diagnosticInfo","webview","html","originalError","stack","onDidReceiveMessage","command","clipboard","writeText","text","showInformationMessage","showErrorLogs","logs","map","index","clearErrorLogs","dispose","showSaveDialog","defaultUri","file","homedir","filters","fileUri","writeFileSync","fsPath","_activate","_callee4","mainViewProvider","logsViewProvider","dashboardProvider","simpleUIProvider","mainTreeView","logsTreeView","hasGit","_context4","ensureResourceDirs","MainViewProvider","LogsViewProvider","DashboardProvider","SimpleUIProvider","createTreeView","treeDataProvider","showCollapseAll","subscriptions","mainProvider","statusProvider","settingsProvider","quickActionsProvider","createStatusBarItem","StatusBarAlignment","Left","tooltip","checkGitRepository","executeCommand","registerCommands","setupFileWatcher","disableFileWatcher","performAutoCommit","showNotification","registerCommand","clearLogs","loadGitignore","_callee3","info","_context3","data","setupAutoBackgroundMonitoring","setTimeout","refresh","showWelcomeNotification","t0","_x3","_checkGitRepository","_callee5","workspaceFolders","repoPath","_context5","uri","dir","dirPath","joinPath","extensionUri","currentVersion","extension","globalState","selection","update","showNotifications","activeTextEditor","gitSettings","useGitignore","repositoryPath","gitignorePath","gitignoreContent","readFileSync","add","triggerRules","filePatterns","createFileSystemWatcher","onDidChange","isFileIgnored","checkCommitTrigger","onDidCreate","onDidDelete","onInterval","setupIntervalTrigger","intervalMinutes","minutes","clearInterval","setInterval","size","onTriggerFired","clear","filePath","includes","relativePath","relative","replace","ignores","rules","specificFiles","hasSpecificFileChanged","some","isArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","changed","hasMinChanges","minChangeCount","hasFileThreshold","fileCountThreshold","timeThresholdMs","timeThresholdMinutes","now","getTime","_performAutoCommit","_callee6","isManualTrigger","retryCount","MAX_RETRIES","config","gitStatus","diffOutput","fileList","commitMessage","dateStr","timeStr","_gitSettings","language","style","escapedMessage","notificationSettings","errorMessage","_args6","_context6","stageMode","stageChanges","t1","t2","trim","t3","t4","generateCommitMessage","generateWithOllama","generateWithOpenAI","generateWithAnthropic","t5","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","commitMessageLanguage","commitMessageStyle","branch","t6","t7","t8","onCommit","t9","autoPush","performAutoPush","t10","t11","onError","t12","_x4","_performAutoPush","_callee7","MAX_PUSH_RETRIES","currentBranch","pushOptions","pushCommand","pushSuccess","pushError","_loop","_ret","_context8","_context7","onPush","_x5","_stageChanges","_callee8","mode","gitStatusOutput","changedFilesList","selectedFiles","_iterator","_step","patterns","_iterator2","_step2","pattern","safePattern","_context9","filter","line","status","substring","showQuickPick","label","description","getStatusDescription","picked","canPickMany","placeHolder","_createForOfIteratorHelper","specificStagingPatterns","uiSettings","showWarningMessage","originalText","_callee","debugSettings","_context","absolutePath","extendedLogging","_x8","_generateWithOllama","_callee10","prompt","endpoint","ollamaConfig","model","ollamaModelOld","requestStart","apiEndpoint","response","requestDuration","evalDuration","totalDuration","_error$response","_error$response2","_error$response3","_context11","ConfigurationTarget","Global","endsWith","post","stream","options","temperature","num_predict","toFixed","eval_duration","total_duration","code","_x9","_generateWithOpenAI","_callee11","apiKey","_error$response4","_context12","messages","role","content","max_tokens","headers","choices","_x10","_generateWithAnthropic","_callee12","_error$response5","_context13","system","module","exports","activate","_x2","deactivate","_require","statusBarItemRef","_generateCommitMessage","_callee36","aiProvider","changes","promptTemplate","_context36","toUpperCase","isEnabled","providers","_providers","newValue","simpleMode","_objectSpread","_callee9","themes","theme","_context10","onSave","onBranchSwitch","_callee13","currentPatterns","newPatterns","patternsArray","showInputBox","_callee14","currentValue","numValue","_context14","parseInt","_callee15","_context15","_callee16","_context16","_callee17","_context17","_callee18","_context18","_callee19","_context19","_callee20","models","openaiConfig","_context20","title","_callee21","currentKey","maskedKey","input","_context21","password","_callee22","anthropicConfig","_context22","_callee23","_context23","_callee25","currentTemplate","document","disposable","_context25","openTextDocument","showTextDocument","onDidSaveTextDocument","_ref25","_callee24","doc","newTemplate","_context24","getText","_callee26","_vscode$extensions$ge","gitExtension","git","_path","_context26","getAPI","repositories","_callee27","_context27","_callee28","_context28","_callee29","styles","selected","_context29","_callee30","languages","_context30","_callee31","_context31","_callee32","_context32","_callee33","currentProvider","_providers2","_context33","_callee34","_vscode$extensions$ge2","repository","fileUris","_context34","state","workingTreeChanges","change","basename","_callee35","stageModes","_context35","_x6","preparePromptTemplate","template","truncatedDiff","processDiffForPrompt","lines","fileHeaderLines","startsWith","changedLines","result","processCommitMessage","rawMessage","processedMessage","allowMultilineMessages","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","chunkId","all","reduce","promises","obj","prop","chunk","moreModules","modules","ids","runtime","installChunk"],"sourceRoot":""}