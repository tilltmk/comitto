{"version":3,"file":"730.js","mappings":"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","sources":["webpack://comitto/./utils.js","webpack://comitto/./ui.js"],"sourcesContent":["const { exec } = require('child_process');\r\n\r\n/**\r\n * Führt einen Git-Befehl aus\r\n * @param {string} command Der auszuführende Git-Befehl\r\n * @param {string} cwd Arbeitsverzeichnis für den Befehl\r\n * @returns {Promise<string>} Ausgabe des Befehls\r\n */\r\nfunction executeGitCommand(command, cwd) {\r\n    return new Promise((resolve, reject) => {\r\n        exec(command, { cwd }, (error, stdout, stderr) => {\r\n            if (error) {\r\n                // Detailliertere Fehlermeldung\r\n                const errorMessage = stderr || error.message || 'Unbekannter Git-Fehler';\r\n                console.error(`Git-Befehl fehlgeschlagen: ${command}`, errorMessage);\r\n                reject(new Error(errorMessage));\r\n                return;\r\n            }\r\n            resolve(stdout);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Gibt einen lesbaren Text für den Git-Status-Code zurück\r\n * @param {string} statusCode Der Git-Status-Code\r\n * @returns {string} Lesbarer Status\r\n */\r\nfunction getStatusText(statusCode) {\r\n    switch(statusCode) {\r\n        case 'M': return 'Geändert:';\r\n        case 'A': return 'Hinzugefügt:';\r\n        case 'D': return 'Gelöscht:';\r\n        case 'R': return 'Umbenannt:';\r\n        case 'C': return 'Kopiert:';\r\n        case 'U': return 'Unmerged:';\r\n        case '??': return 'Unverfolgt:';\r\n        default: return statusCode;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    executeGitCommand,\r\n    getStatusText\r\n}; ","const vscode = require('vscode');\r\nconst path = require('path');\r\n\r\n/**\r\n * Klasse für die Statusanzeige in der Seitenleiste\r\n * Erweiterte Implementierung mit verbesserten visuellen Elementen und Gruppierung\r\n */\r\nclass StatusViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            // Unterelemente für gruppierte Ansicht\r\n            return this._getSubItems(element);\r\n        }\r\n\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        // Statusgruppe erstellen\r\n        const statusGroup = new vscode.TreeItem(\r\n            'Status und Schnellzugriff',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        statusGroup.contextValue = 'status-group';\r\n        statusGroup.iconPath = new vscode.ThemeIcon('pulse');\r\n        statusGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(statusGroup);\r\n\r\n        // Konfigurationsgruppe erstellen\r\n        const configGroup = new vscode.TreeItem(\r\n            'Konfiguration',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        configGroup.contextValue = 'config-group';\r\n        configGroup.iconPath = new vscode.ThemeIcon('settings');\r\n        configGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(configGroup);\r\n\r\n        // Aktionsgruppe erstellen\r\n        const actionGroup = new vscode.TreeItem(\r\n            'Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        actionGroup.contextValue = 'action-group';\r\n        actionGroup.iconPath = new vscode.ThemeIcon('run-all');\r\n        actionGroup.collapsibleState = vscode.TreeItemCollapsibleState.Expanded;\r\n        items.push(actionGroup);\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Liefert Unterelemente für gruppierte Ansicht\r\n     * @param {vscode.TreeItem} element Das Übergeordnete Element\r\n     * @returns {Promise<vscode.TreeItem[]>} Liste der Unterelemente\r\n     */\r\n    async _getSubItems(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'status-group':\r\n                // Status-Element mit verbesserter Visualisierung\r\n                const statusItem = new vscode.TreeItem(\r\n                    `Status: ${enabled ? 'Aktiviert' : 'Deaktiviert'}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                statusItem.contextValue = enabled ? 'comitto-status-enabled' : 'comitto-status-disabled';\r\n                statusItem.iconPath = new vscode.ThemeIcon(enabled ? 'check' : 'circle-slash');\r\n                statusItem.tooltip = enabled ? 'Comitto überwacht aktiv Änderungen' : 'Comitto ist derzeit deaktiviert';\r\n                statusItem.command = {\r\n                    command: enabled ? 'comitto.disableAutoCommit' : 'comitto.enableAutoCommit',\r\n                    title: enabled ? 'Deaktivieren' : 'Aktivieren'\r\n                };\r\n                items.push(statusItem);\r\n\r\n                // Einfache Benutzeroberfläche öffnen\r\n                const simpleUIItem = new vscode.TreeItem(\r\n                    'Einfache Benutzeroberfläche',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                simpleUIItem.iconPath = new vscode.ThemeIcon('rocket');\r\n                simpleUIItem.tooltip = 'Öffnet eine übersichtliche Oberfläche für einfache Einstellungen';\r\n                simpleUIItem.command = {\r\n                    command: 'comitto.showSimpleUI',\r\n                    title: 'Einfache Benutzeroberfläche öffnen'\r\n                };\r\n                items.push(simpleUIItem);\r\n\r\n                // Dashboard öffnen\r\n                const dashboardItem = new vscode.TreeItem(\r\n                    'Dashboard anzeigen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                dashboardItem.iconPath = new vscode.ThemeIcon('dashboard');\r\n                dashboardItem.tooltip = 'Zeigt das vollständige Comitto-Dashboard an';\r\n                dashboardItem.command = {\r\n                    command: 'comitto.showDashboard',\r\n                    title: 'Dashboard anzeigen'\r\n                };\r\n                items.push(dashboardItem);\r\n                break;\r\n\r\n            case 'config-group':\r\n                // AI Provider mit mehr Details und exklusiver Auswahl\r\n                const provider = config.get('aiProvider');\r\n                const providerItem = new vscode.TreeItem(\r\n                    `KI-Provider: ${getProviderDisplayName(provider)}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                providerItem.iconPath = getProviderIcon(provider);\r\n                providerItem.tooltip = `Aktueller KI-Provider für Commit-Nachrichten: ${getProviderDisplayName(provider)}`;\r\n                providerItem.command = {\r\n                    command: 'comitto.configureAIProvider',\r\n                    title: 'KI-Provider konfigurieren'\r\n                };\r\n                items.push(providerItem);\r\n\r\n                // Git-Einstellungen anzeigen\r\n                const gitSettings = config.get('gitSettings');\r\n                const commitLanguage = gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch';\r\n                const autoPushStatus = gitSettings.autoPush ? 'Mit Auto-Push' : 'Ohne Auto-Push';\r\n                const stageMode = gitSettings.stageMode === 'all' ? 'Alle Dateien stagen' : \r\n                                gitSettings.stageMode === 'specific' ? 'Spezifische Dateien stagen' :\r\n                                'Nachfragen';\r\n                \r\n                const gitItem = new vscode.TreeItem(\r\n                    `Git: ${commitLanguage}, ${autoPushStatus}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                gitItem.iconPath = new vscode.ThemeIcon('git-merge');\r\n                gitItem.tooltip = `Branch: ${gitSettings.branch || 'Aktuell'}, Sprache: ${gitSettings.commitMessageLanguage}, Stil: ${gitSettings.commitMessageStyle}, Stage-Modus: ${stageMode}`;\r\n                gitItem.command = {\r\n                    command: 'comitto.openSettings',\r\n                    title: 'Git-Einstellungen bearbeiten'\r\n                };\r\n                items.push(gitItem);\r\n\r\n                // Trigger-Regeln mit mehr Details\r\n                const rules = config.get('triggerRules');\r\n                let triggerDescription = `${rules.fileCountThreshold} Dateien / ${rules.minChangeCount} Änderungen`;\r\n                \r\n                // Aktivierte Trigger anzeigen\r\n                const activeTriggers = [];\r\n                if (rules.onSave) activeTriggers.push('Bei Speichern');\r\n                if (rules.onInterval) activeTriggers.push(`Alle ${rules.intervalMinutes}min`);\r\n                if (rules.onBranchSwitch) activeTriggers.push('Bei Branch-Wechsel');\r\n                \r\n                if (activeTriggers.length > 0) {\r\n                    triggerDescription += ` (${activeTriggers.join(', ')})`;\r\n                }\r\n                \r\n                const rulesItem = new vscode.TreeItem(\r\n                    `Trigger: ${triggerDescription}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                rulesItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n                rulesItem.tooltip = `Commit bei ${rules.fileCountThreshold} Dateien, ${rules.minChangeCount} Änderungen oder nach ${rules.timeThresholdMinutes} Minuten\\nAktive Trigger: ${activeTriggers.join(', ')}`;\r\n                rulesItem.command = {\r\n                    command: 'comitto.configureTriggers',\r\n                    title: 'Trigger konfigurieren'\r\n                };\r\n                items.push(rulesItem);\r\n                break;\r\n\r\n            case 'action-group':\r\n                // Manuellen Commit-Button hinzufügen\r\n                const manualCommitItem = new vscode.TreeItem(\r\n                    'Manuellen Commit ausführen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                manualCommitItem.iconPath = new vscode.ThemeIcon('git-commit');\r\n                manualCommitItem.tooltip = 'Führt einen manuellen Commit mit KI-generierter Nachricht aus';\r\n                manualCommitItem.command = {\r\n                    command: 'comitto.performManualCommit',\r\n                    title: 'Manuellen Commit ausführen'\r\n                };\r\n                items.push(manualCommitItem);\r\n\r\n                // Staging-Buttons hinzufügen\r\n                const stageAllItem = new vscode.TreeItem(\r\n                    'Alle Änderungen stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageAllItem.iconPath = new vscode.ThemeIcon('add');\r\n                stageAllItem.tooltip = 'Stagt alle geänderten Dateien für den nächsten Commit';\r\n                stageAllItem.command = {\r\n                    command: 'comitto.stageAll',\r\n                    title: 'Alle Änderungen stagen'\r\n                };\r\n                items.push(stageAllItem);\r\n\r\n                const stageSelectedItem = new vscode.TreeItem(\r\n                    'Ausgewählte Dateien stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageSelectedItem.iconPath = new vscode.ThemeIcon('checklist');\r\n                stageSelectedItem.tooltip = 'Erlaubt die Auswahl bestimmter Dateien zum Stagen';\r\n                stageSelectedItem.command = {\r\n                    command: 'comitto.stageSelected',\r\n                    title: 'Ausgewählte Dateien stagen'\r\n                };\r\n                items.push(stageSelectedItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Einstellungen in der Seitenleiste\r\n * Verbesserte Implementierung mit visuellen Verbesserungen und logischer Gruppierung\r\n */\r\nclass SettingsViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            return this._getSubSettings(element);\r\n        }\r\n\r\n        // Hauptkategorien für Einstellungen mit verbesserten Icons und Beschreibungen\r\n        const items = [];\r\n\r\n        // KI-Provider-Einstellungen\r\n        const aiItem = new vscode.TreeItem(\r\n            'KI-Provider-Einstellungen',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        aiItem.contextValue = 'ai-provider';\r\n        aiItem.iconPath = new vscode.ThemeIcon('symbol-enum');\r\n        aiItem.tooltip = 'Konfiguration der KI-Provider für die Generierung von Commit-Nachrichten';\r\n        items.push(aiItem);\r\n\r\n        // Trigger-Einstellungen\r\n        const triggerItem = new vscode.TreeItem(\r\n            'Trigger-Regeln',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        triggerItem.contextValue = 'trigger-rules';\r\n        triggerItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n        triggerItem.tooltip = 'Konfiguration der Auslöser für automatische Commits';\r\n        items.push(triggerItem);\r\n\r\n        // Git-Einstellungen\r\n        const gitItem = new vscode.TreeItem(\r\n            'Git-Einstellungen',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        gitItem.contextValue = 'git-settings';\r\n        gitItem.iconPath = new vscode.ThemeIcon('git-merge');\r\n        gitItem.tooltip = 'Konfiguration von Git-bezogenen Einstellungen für Commits';\r\n        items.push(gitItem);\r\n\r\n        // Prompt-Vorlage\r\n        const promptItem = new vscode.TreeItem(\r\n            'Prompt-Vorlage',\r\n            vscode.TreeItemCollapsibleState.None\r\n        );\r\n        promptItem.contextValue = 'prompt-template';\r\n        promptItem.iconPath = new vscode.ThemeIcon('edit');\r\n        promptItem.tooltip = 'Anpassung der Vorlage für die Generierung von Commit-Nachrichten';\r\n        promptItem.command = {\r\n            command: 'comitto.editPromptTemplate',\r\n            title: 'Prompt-Vorlage bearbeiten'\r\n        };\r\n        items.push(promptItem);\r\n\r\n        // UI-Einstellungen\r\n        const uiItem = new vscode.TreeItem(\r\n            'Benutzeroberfläche',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        uiItem.contextValue = 'ui-settings';\r\n        uiItem.iconPath = new vscode.ThemeIcon('layout');\r\n        uiItem.tooltip = 'Einstellungen für die Benutzeroberfläche und Benachrichtigungen';\r\n        items.push(uiItem);\r\n\r\n        // Benachrichtigungs-Einstellungen\r\n        const notificationItem = new vscode.TreeItem(\r\n            'Benachrichtigungen',\r\n            vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n        notificationItem.contextValue = 'notification-settings';\r\n        notificationItem.iconPath = new vscode.ThemeIcon('bell');\r\n        notificationItem.tooltip = 'Konfiguration von Benachrichtigungen und Meldungen';\r\n        items.push(notificationItem);\r\n\r\n        return items;\r\n    }\r\n\r\n    async _getSubSettings(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'ai-provider':\r\n                // KI-Provider auswählen\r\n                const aiProvider = config.get('aiProvider');\r\n                const providerItem = new vscode.TreeItem(`Aktiver Provider: ${getProviderDisplayName(aiProvider)}`);\r\n                providerItem.iconPath = getProviderIcon(aiProvider);\r\n                providerItem.tooltip = 'Wählt den KI-Provider für die Generierung von Commit-Nachrichten aus';\r\n                providerItem.command = {\r\n                    command: 'comitto.selectAiProvider',\r\n                    title: 'KI-Provider auswählen'\r\n                };\r\n                items.push(providerItem);\r\n\r\n                // Provider-spezifische Einstellungen basierend auf dem ausgewählten Provider\r\n                if (aiProvider === 'ollama') {\r\n                    const ollamaEndpoint = config.get('ollama.endpoint');\r\n                    const ollamaEndpointItem = new vscode.TreeItem(`Ollama-Endpunkt: ${ollamaEndpoint}`);\r\n                    ollamaEndpointItem.iconPath = new vscode.ThemeIcon('link');\r\n                    ollamaEndpointItem.tooltip = 'Konfiguriert den API-Endpunkt für den Ollama-Dienst';\r\n                    ollamaEndpointItem.command = {\r\n                        command: 'comitto.configureOllamaSettings',\r\n                        title: 'Ollama-Einstellungen konfigurieren'\r\n                    };\r\n                    items.push(ollamaEndpointItem);\r\n\r\n                    const ollamaModel = config.get('ollama.model');\r\n                    const ollamaModelItem = new vscode.TreeItem(`Ollama-Modell: ${ollamaModel}`);\r\n                    ollamaModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    ollamaModelItem.tooltip = 'Wählt das zu verwendende Ollama-Modell aus';\r\n                    ollamaModelItem.command = {\r\n                        command: 'comitto.configureOllamaSettings',\r\n                        title: 'Ollama-Einstellungen konfigurieren'\r\n                    };\r\n                    items.push(ollamaModelItem);\r\n                } else if (aiProvider === 'openai') {\r\n                    const openaiModel = config.get('openai.model');\r\n                    const openaiModelItem = new vscode.TreeItem(`OpenAI-Modell: ${openaiModel}`);\r\n                    openaiModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    openaiModelItem.tooltip = 'Wählt das zu verwendende OpenAI-Modell aus';\r\n                    openaiModelItem.command = {\r\n                        command: 'comitto.selectOpenAIModel',\r\n                        title: 'OpenAI-Modell auswählen'\r\n                    };\r\n                    items.push(openaiModelItem);\r\n\r\n                    const hasKey = config.get('openai.apiKey') !== '';\r\n                    const openaiKeyItem = new vscode.TreeItem(`API-Schlüssel: ${hasKey ? 'Gesetzt' : 'Nicht gesetzt'}`);\r\n                    openaiKeyItem.iconPath = new vscode.ThemeIcon(hasKey ? 'key' : 'warning');\r\n                    openaiKeyItem.tooltip = 'Konfiguriert den API-Schlüssel für OpenAI';\r\n                    openaiKeyItem.command = {\r\n                        command: 'comitto.editOpenAIKey',\r\n                        title: 'OpenAI-API-Schlüssel bearbeiten'\r\n                    };\r\n                    items.push(openaiKeyItem);\r\n                } else if (aiProvider === 'anthropic') {\r\n                    const anthropicModel = config.get('anthropic.model');\r\n                    const anthropicModelItem = new vscode.TreeItem(`Anthropic-Modell: ${anthropicModel}`);\r\n                    anthropicModelItem.iconPath = new vscode.ThemeIcon('symbol-class');\r\n                    anthropicModelItem.tooltip = 'Wählt das zu verwendende Anthropic-Modell aus';\r\n                    anthropicModelItem.command = {\r\n                        command: 'comitto.selectAnthropicModel',\r\n                        title: 'Anthropic-Modell auswählen'\r\n                    };\r\n                    items.push(anthropicModelItem);\r\n\r\n                    const hasKey = config.get('anthropic.apiKey') !== '';\r\n                    const anthropicKeyItem = new vscode.TreeItem(`API-Schlüssel: ${hasKey ? 'Gesetzt' : 'Nicht gesetzt'}`);\r\n                    anthropicKeyItem.iconPath = new vscode.ThemeIcon(hasKey ? 'key' : 'warning');\r\n                    anthropicKeyItem.tooltip = 'Konfiguriert den API-Schlüssel für Anthropic';\r\n                    anthropicKeyItem.command = {\r\n                        command: 'comitto.editAnthropicKey',\r\n                        title: 'Anthropic-API-Schlüssel bearbeiten'\r\n                    };\r\n                    items.push(anthropicKeyItem);\r\n                }\r\n                break;\r\n\r\n            case 'trigger-rules':\r\n                const rules = config.get('triggerRules');\r\n                \r\n                // File Count Threshold\r\n                const fileCountItem = new vscode.TreeItem(\r\n                    `Dateianzahl-Schwellenwert: ${rules.fileCountThreshold}`\r\n                );\r\n                fileCountItem.iconPath = new vscode.ThemeIcon('files');\r\n                fileCountItem.tooltip = 'Die Anzahl an Dateien, die für einen automatischen Commit geändert sein müssen';\r\n                fileCountItem.command = {\r\n                    command: 'comitto.editFileCountThreshold',\r\n                    title: 'Dateianzahl-Schwellenwert bearbeiten'\r\n                };\r\n                items.push(fileCountItem);\r\n\r\n                // Min Change Count\r\n                const changeCountItem = new vscode.TreeItem(\r\n                    `Änderungsanzahl-Schwellenwert: ${rules.minChangeCount}`\r\n                );\r\n                changeCountItem.iconPath = new vscode.ThemeIcon('edit');\r\n                changeCountItem.tooltip = 'Die minimale Anzahl an Änderungen für einen automatischen Commit';\r\n                changeCountItem.command = {\r\n                    command: 'comitto.editMinChangeCount',\r\n                    title: 'Änderungsanzahl-Schwellenwert bearbeiten'\r\n                };\r\n                items.push(changeCountItem);\r\n\r\n                // Time Threshold\r\n                const timeItem = new vscode.TreeItem(\r\n                    `Zeit-Schwellenwert: ${rules.timeThresholdMinutes} Minuten`\r\n                );\r\n                timeItem.iconPath = new vscode.ThemeIcon('watch');\r\n                timeItem.tooltip = 'Die Zeitspanne in Minuten, nach der ein Commit ausgelöst wird';\r\n                timeItem.command = {\r\n                    command: 'comitto.editTimeThreshold',\r\n                    title: 'Zeit-Schwellenwert bearbeiten'\r\n                };\r\n                items.push(timeItem);\r\n\r\n                // Trigger Options\r\n                const triggerOptionsItem = new vscode.TreeItem('Trigger-Optionen');\r\n                triggerOptionsItem.iconPath = new vscode.ThemeIcon('settings');\r\n                \r\n                // On Save Trigger\r\n                const onSaveItem = new vscode.TreeItem(\r\n                    `Bei Speichern: ${rules.onSave ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onSaveItem.iconPath = new vscode.ThemeIcon(rules.onSave ? 'check' : 'x');\r\n                onSaveItem.command = {\r\n                    command: 'comitto.toggleOnSave',\r\n                    title: 'Speichern-Trigger umschalten'\r\n                };\r\n                items.push(onSaveItem);\r\n\r\n                // On Interval Trigger\r\n                const onIntervalItem = new vscode.TreeItem(\r\n                    `Bei Intervall: ${rules.onInterval ? `Aktiviert (${rules.intervalMinutes}min)` : 'Deaktiviert'}`\r\n                );\r\n                onIntervalItem.iconPath = new vscode.ThemeIcon(rules.onInterval ? 'check' : 'x');\r\n                onIntervalItem.command = {\r\n                    command: 'comitto.toggleOnInterval',\r\n                    title: 'Intervall-Trigger umschalten'\r\n                };\r\n                items.push(onIntervalItem);\r\n\r\n                // On Branch Switch\r\n                const onBranchItem = new vscode.TreeItem(\r\n                    `Bei Branch-Wechsel: ${rules.onBranchSwitch ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onBranchItem.iconPath = new vscode.ThemeIcon(rules.onBranchSwitch ? 'check' : 'x');\r\n                onBranchItem.command = {\r\n                    command: 'comitto.toggleOnBranchSwitch',\r\n                    title: 'Branch-Wechsel-Trigger umschalten'\r\n                };\r\n                items.push(onBranchItem);\r\n                \r\n                // File Patterns\r\n                const filePatternsText = rules.filePatterns.length > 0 \r\n                    ? rules.filePatterns.join(', ')\r\n                    : '(Keine)';\r\n                const filePatternsItem = new vscode.TreeItem(\r\n                    `Dateimuster: ${filePatternsText.length > 30 ? filePatternsText.substring(0, 30) + '...' : filePatternsText}`\r\n                );\r\n                filePatternsItem.iconPath = new vscode.ThemeIcon('filter');\r\n                filePatternsItem.tooltip = `Aktuell überwachte Dateimuster: ${rules.filePatterns.join(', ')}`;\r\n                filePatternsItem.command = {\r\n                    command: 'comitto.editFilePatterns',\r\n                    title: 'Dateimuster bearbeiten'\r\n                };\r\n                items.push(filePatternsItem);\r\n                break;\r\n\r\n            case 'git-settings':\r\n                const gitSettings = config.get('gitSettings');\r\n                \r\n                // Commit Message Language\r\n                const languageItem = new vscode.TreeItem(\r\n                    `Commit-Sprache: ${gitSettings.commitMessageLanguage === 'de' ? 'Deutsch' : 'Englisch'}`\r\n                );\r\n                languageItem.iconPath = new vscode.ThemeIcon('globe');\r\n                languageItem.tooltip = 'Die Sprache, in der die Commit-Nachrichten generiert werden';\r\n                languageItem.command = {\r\n                    command: 'comitto.selectCommitLanguage',\r\n                    title: 'Commit-Sprache auswählen'\r\n                };\r\n                items.push(languageItem);\r\n                \r\n                // Auto Push\r\n                const autoPushItem = new vscode.TreeItem(\r\n                    `Auto-Push: ${gitSettings.autoPush ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                autoPushItem.iconPath = new vscode.ThemeIcon(gitSettings.autoPush ? 'cloud-upload' : 'x');\r\n                autoPushItem.tooltip = 'Ob nach einem Commit automatisch gepusht werden soll';\r\n                autoPushItem.command = {\r\n                    command: 'comitto.toggleAutoPush',\r\n                    title: 'Auto-Push umschalten'\r\n                };\r\n                items.push(autoPushItem);\r\n                \r\n                // Branch\r\n                const branchItem = new vscode.TreeItem(\r\n                    `Branch: ${gitSettings.branch || 'Aktuell'}`\r\n                );\r\n                branchItem.iconPath = new vscode.ThemeIcon('git-branch');\r\n                branchItem.tooltip = 'Der für Commits zu verwendende Branch (leer für aktuellen Branch)';\r\n                branchItem.command = {\r\n                    command: 'comitto.editBranch',\r\n                    title: 'Branch bearbeiten'\r\n                };\r\n                items.push(branchItem);\r\n                \r\n                // Commit Message Style\r\n                const styleItem = new vscode.TreeItem(\r\n                    `Commit-Stil: ${gitSettings.commitMessageStyle === 'conventional' ? 'Conventional' : 'Gitmoji'}`\r\n                );\r\n                styleItem.iconPath = new vscode.ThemeIcon('symbol-string');\r\n                styleItem.tooltip = 'Der Stil der generierten Commit-Nachrichten';\r\n                styleItem.command = {\r\n                    command: 'comitto.selectCommitStyle',\r\n                    title: 'Commit-Stil auswählen'\r\n                };\r\n                items.push(styleItem);\r\n                \r\n                // Stage Mode\r\n                const stageMode = gitSettings.stageMode === 'all' ? 'Alle Dateien' : \r\n                                gitSettings.stageMode === 'specific' ? 'Spezifische Dateien' :\r\n                                'Nachfragen';\r\n                const stageModeItem = new vscode.TreeItem(\r\n                    `Stage-Modus: ${stageMode}`\r\n                );\r\n                stageModeItem.iconPath = new vscode.ThemeIcon('staged');\r\n                stageModeItem.tooltip = 'Wie Dateien für Commits gestaged werden sollen';\r\n                stageModeItem.command = {\r\n                    command: 'comitto.selectStageMode',\r\n                    title: 'Stage-Modus auswählen'\r\n                };\r\n                items.push(stageModeItem);\r\n                \r\n                // Staging Patterns (if mode is 'specific')\r\n                if (gitSettings.stageMode === 'specific') {\r\n                    const patternsText = gitSettings.specificStagingPatterns.length > 0 \r\n                        ? gitSettings.specificStagingPatterns.join(', ')\r\n                        : '(Keine)';\r\n                    const stagingPatternsItem = new vscode.TreeItem(\r\n                        `Staging-Muster: ${patternsText.length > 30 ? patternsText.substring(0, 30) + '...' : patternsText}`\r\n                    );\r\n                    stagingPatternsItem.iconPath = new vscode.ThemeIcon('filter');\r\n                    stagingPatternsItem.tooltip = `Dateimuster für spezifisches Staging: ${gitSettings.specificStagingPatterns.join(', ')}`;\r\n                    stagingPatternsItem.command = {\r\n                        command: 'comitto.editStagingPatterns',\r\n                        title: 'Staging-Muster bearbeiten'\r\n                    };\r\n                    items.push(stagingPatternsItem);\r\n                }\r\n                \r\n                // Use Gitignore\r\n                const useGitignore = gitSettings.useGitignore !== undefined ? gitSettings.useGitignore : true;\r\n                const gitignoreItem = new vscode.TreeItem(\r\n                    `Gitignore beachten: ${useGitignore ? 'Ja' : 'Nein'}`\r\n                );\r\n                gitignoreItem.iconPath = new vscode.ThemeIcon(useGitignore ? 'check' : 'x');\r\n                gitignoreItem.tooltip = 'Ob die .gitignore-Datei bei der Überwachung beachtet werden soll';\r\n                gitignoreItem.command = {\r\n                    command: 'comitto.toggleUseGitignore',\r\n                    title: 'Gitignore-Verwendung umschalten'\r\n                };\r\n                items.push(gitignoreItem);\r\n                break;\r\n\r\n            case 'ui-settings':\r\n                const uiSettings = config.get('uiSettings');\r\n                \r\n                // Simple Mode\r\n                const simpleModeItem = new vscode.TreeItem(\r\n                    `Einfacher Modus: ${uiSettings.simpleMode ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                simpleModeItem.iconPath = new vscode.ThemeIcon(uiSettings.simpleMode ? 'check' : 'x');\r\n                simpleModeItem.tooltip = 'Ob die vereinfachte Benutzeroberfläche verwendet werden soll';\r\n                simpleModeItem.command = {\r\n                    command: 'comitto.toggleSimpleMode',\r\n                    title: 'Einfachen Modus umschalten'\r\n                };\r\n                items.push(simpleModeItem);\r\n                \r\n                // Confirm Before Commit\r\n                const confirmItem = new vscode.TreeItem(\r\n                    `Bestätigung vor Commit: ${uiSettings.confirmBeforeCommit ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                confirmItem.iconPath = new vscode.ThemeIcon(uiSettings.confirmBeforeCommit ? 'check' : 'x');\r\n                confirmItem.tooltip = 'Ob vor einem Commit eine Bestätigung angefordert werden soll';\r\n                confirmItem.command = {\r\n                    command: 'comitto.toggleConfirmBeforeCommit',\r\n                    title: 'Commit-Bestätigung umschalten'\r\n                };\r\n                items.push(confirmItem);\r\n                \r\n                // Show Notifications\r\n                const notifyItem = new vscode.TreeItem(\r\n                    `Benachrichtigungen anzeigen: ${uiSettings.showNotifications ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                notifyItem.iconPath = new vscode.ThemeIcon(uiSettings.showNotifications ? 'check' : 'x');\r\n                notifyItem.tooltip = 'Ob Benachrichtigungen angezeigt werden sollen';\r\n                notifyItem.command = {\r\n                    command: 'comitto.toggleShowNotifications',\r\n                    title: 'Benachrichtigungen umschalten'\r\n                };\r\n                items.push(notifyItem);\r\n                \r\n                // Theme\r\n                const themeItem = new vscode.TreeItem(\r\n                    `Farbschema: ${getThemeLabel(uiSettings.theme)}`\r\n                );\r\n                themeItem.iconPath = new vscode.ThemeIcon('symbol-color');\r\n                themeItem.tooltip = 'Das zu verwendende Farbschema';\r\n                themeItem.command = {\r\n                    command: 'comitto.selectTheme',\r\n                    title: 'Farbschema auswählen'\r\n                };\r\n                items.push(themeItem);\r\n                break;\r\n\r\n            case 'notification-settings':\r\n                const notifications = config.get('notifications');\r\n                \r\n                // On Commit\r\n                const onCommitItem = new vscode.TreeItem(\r\n                    `Bei Commit: ${notifications.onCommit ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onCommitItem.iconPath = new vscode.ThemeIcon(notifications.onCommit ? 'check' : 'x');\r\n                onCommitItem.tooltip = 'Ob Benachrichtigungen bei erfolgreichen Commits angezeigt werden sollen';\r\n                onCommitItem.command = {\r\n                    command: 'comitto.toggleNotificationOnCommit',\r\n                    title: 'Commit-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onCommitItem);\r\n                \r\n                // On Push\r\n                const onPushItem = new vscode.TreeItem(\r\n                    `Bei Push: ${notifications.onPush ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onPushItem.iconPath = new vscode.ThemeIcon(notifications.onPush ? 'check' : 'x');\r\n                onPushItem.tooltip = 'Ob Benachrichtigungen bei erfolgreichen Pushes angezeigt werden sollen';\r\n                onPushItem.command = {\r\n                    command: 'comitto.toggleNotificationOnPush',\r\n                    title: 'Push-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onPushItem);\r\n                \r\n                // On Error\r\n                const onErrorItem = new vscode.TreeItem(\r\n                    `Bei Fehler: ${notifications.onError ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onErrorItem.iconPath = new vscode.ThemeIcon(notifications.onError ? 'check' : 'x');\r\n                onErrorItem.tooltip = 'Ob Benachrichtigungen bei Fehlern angezeigt werden sollen';\r\n                onErrorItem.command = {\r\n                    command: 'comitto.toggleNotificationOnError',\r\n                    title: 'Fehler-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onErrorItem);\r\n                \r\n                // On Trigger Fired\r\n                const onTriggerItem = new vscode.TreeItem(\r\n                    `Bei Trigger-Auslösung: ${notifications.onTriggerFired ? 'Aktiviert' : 'Deaktiviert'}`\r\n                );\r\n                onTriggerItem.iconPath = new vscode.ThemeIcon(notifications.onTriggerFired ? 'check' : 'x');\r\n                onTriggerItem.tooltip = 'Ob Benachrichtigungen bei Trigger-Auslösungen angezeigt werden sollen';\r\n                onTriggerItem.command = {\r\n                    command: 'comitto.toggleNotificationOnTriggerFired',\r\n                    title: 'Trigger-Benachrichtigung umschalten'\r\n                };\r\n                items.push(onTriggerItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * Klasse für die Schnellaktionen in der Seitenleiste\r\n * Verbesserte Implementierung mit visuellen Verbesserungen und logischer Gruppierung\r\n */\r\nclass QuickActionsViewProvider {\r\n    constructor(context) {\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this._context = context;\r\n    }\r\n\r\n    refresh() {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element) {\r\n        if (element) {\r\n            return this._getSubActions(element);\r\n        }\r\n\r\n        // Hauptgruppen für Schnellaktionen\r\n        const items = [];\r\n\r\n        // Commit-Aktionen\r\n        const commitGroup = new vscode.TreeItem(\r\n            'Commit-Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        commitGroup.contextValue = 'commit-actions';\r\n        commitGroup.iconPath = new vscode.ThemeIcon('git-commit');\r\n        items.push(commitGroup);\r\n\r\n        // Git-Aktionen\r\n        const gitGroup = new vscode.TreeItem(\r\n            'Git-Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        gitGroup.contextValue = 'git-actions';\r\n        gitGroup.iconPath = new vscode.ThemeIcon('source-control');\r\n        items.push(gitGroup);\r\n\r\n        // Einstellungs-Aktionen\r\n        const configGroup = new vscode.TreeItem(\r\n            'Einstellungs-Aktionen',\r\n            vscode.TreeItemCollapsibleState.Expanded\r\n        );\r\n        configGroup.contextValue = 'config-actions';\r\n        configGroup.iconPath = new vscode.ThemeIcon('gear');\r\n        items.push(configGroup);\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Liefert Unterelemente für gruppierte Aktionen\r\n     * @param {vscode.TreeItem} element Das Übergeordnete Element\r\n     * @returns {Promise<vscode.TreeItem[]>} Liste der Unterelemente\r\n     */\r\n    async _getSubActions(element) {\r\n        const config = vscode.workspace.getConfiguration('comitto');\r\n        const enabled = config.get('autoCommitEnabled');\r\n        const items = [];\r\n\r\n        switch (element.contextValue) {\r\n            case 'commit-actions':\r\n                // Comitto aktivieren/deaktivieren\r\n                const toggleItem = new vscode.TreeItem(\r\n                    `Comitto ${enabled ? 'deaktivieren' : 'aktivieren'}`,\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                toggleItem.iconPath = new vscode.ThemeIcon(enabled ? 'circle-slash' : 'check');\r\n                toggleItem.tooltip = enabled ? 'Deaktiviert die automatischen Commits' : 'Aktiviert die automatischen Commits';\r\n                toggleItem.command = {\r\n                    command: 'comitto.toggleAutoCommit',\r\n                    title: `Comitto ${enabled ? 'deaktivieren' : 'aktivieren'}`\r\n                };\r\n                items.push(toggleItem);\r\n\r\n                // Manueller Commit\r\n                const manualCommitItem = new vscode.TreeItem(\r\n                    'Manuellen Commit ausführen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                manualCommitItem.iconPath = new vscode.ThemeIcon('git-commit');\r\n                manualCommitItem.tooltip = 'Führt einen manuellen Commit mit KI-generierter Nachricht aus';\r\n                manualCommitItem.command = {\r\n                    command: 'comitto.performManualCommit',\r\n                    title: 'Manuellen Commit ausführen'\r\n                };\r\n                items.push(manualCommitItem);\r\n                break;\r\n\r\n            case 'git-actions':\r\n                // Alle Änderungen stagen\r\n                const stageAllItem = new vscode.TreeItem(\r\n                    'Alle Änderungen stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageAllItem.iconPath = new vscode.ThemeIcon('add');\r\n                stageAllItem.tooltip = 'Stagt alle geänderten Dateien für den nächsten Commit';\r\n                stageAllItem.command = {\r\n                    command: 'comitto.stageAll',\r\n                    title: 'Alle Änderungen stagen'\r\n                };\r\n                items.push(stageAllItem);\r\n\r\n                // Ausgewählte Dateien stagen\r\n                const stageSelectedItem = new vscode.TreeItem(\r\n                    'Ausgewählte Dateien stagen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                stageSelectedItem.iconPath = new vscode.ThemeIcon('checklist');\r\n                stageSelectedItem.tooltip = 'Erlaubt die Auswahl bestimmter Dateien zum Stagen';\r\n                stageSelectedItem.command = {\r\n                    command: 'comitto.stageSelected',\r\n                    title: 'Ausgewählte Dateien stagen'\r\n                };\r\n                items.push(stageSelectedItem);\r\n\r\n                // Git-Einstellungen bearbeiten\r\n                const gitSettingsItem = new vscode.TreeItem(\r\n                    'Git-Einstellungen bearbeiten',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                gitSettingsItem.iconPath = new vscode.ThemeIcon('gear');\r\n                gitSettingsItem.tooltip = 'Öffnet die Git-Einstellungen zur Bearbeitung';\r\n                gitSettingsItem.command = {\r\n                    command: 'comitto.openSettings',\r\n                    title: 'Git-Einstellungen bearbeiten'\r\n                };\r\n                items.push(gitSettingsItem);\r\n                break;\r\n\r\n            case 'config-actions':\r\n                // KI-Provider konfigurieren\r\n                const configAIItem = new vscode.TreeItem(\r\n                    'KI-Provider konfigurieren',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                configAIItem.iconPath = new vscode.ThemeIcon('symbol-misc');\r\n                configAIItem.tooltip = 'Öffnet die KI-Provider-Konfiguration';\r\n                configAIItem.command = {\r\n                    command: 'comitto.configureAIProvider',\r\n                    title: 'KI-Provider konfigurieren'\r\n                };\r\n                items.push(configAIItem);\r\n\r\n                // Trigger konfigurieren\r\n                const configTriggersItem = new vscode.TreeItem(\r\n                    'Trigger konfigurieren',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                configTriggersItem.iconPath = new vscode.ThemeIcon('settings-gear');\r\n                configTriggersItem.tooltip = 'Öffnet die Trigger-Konfiguration';\r\n                configTriggersItem.command = {\r\n                    command: 'comitto.configureTriggers',\r\n                    title: 'Trigger konfigurieren'\r\n                };\r\n                items.push(configTriggersItem);\r\n\r\n                // Einfache UI anzeigen\r\n                const simpleUIItem = new vscode.TreeItem(\r\n                    'Einfache Benutzeroberfläche öffnen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                simpleUIItem.iconPath = new vscode.ThemeIcon('rocket');\r\n                simpleUIItem.tooltip = 'Öffnet die vereinfachte Benutzeroberfläche';\r\n                simpleUIItem.command = {\r\n                    command: 'comitto.showSimpleUI',\r\n                    title: 'Einfache Benutzeroberfläche öffnen'\r\n                };\r\n                items.push(simpleUIItem);\r\n\r\n                // Dashboard anzeigen\r\n                const dashboardItem = new vscode.TreeItem(\r\n                    'Dashboard anzeigen',\r\n                    vscode.TreeItemCollapsibleState.None\r\n                );\r\n                dashboardItem.iconPath = new vscode.ThemeIcon('dashboard');\r\n                dashboardItem.tooltip = 'Öffnet das Comitto-Dashboard';\r\n                dashboardItem.command = {\r\n                    command: 'comitto.showDashboard',\r\n                    title: 'Dashboard anzeigen'\r\n                };\r\n                items.push(dashboardItem);\r\n                break;\r\n        }\r\n\r\n        return items;\r\n    }\r\n}\r\n\r\n/**\r\n * UI-Hilfsfunktionen\r\n */\r\n\r\n/**\r\n * Gibt einen anzeigbaren Namen für den KI-Provider zurück\r\n * @param {string} provider Provider-ID\r\n * @returns {string} Anzeigename\r\n */\r\nfunction getProviderDisplayName(provider) {\r\n    switch (provider) {\r\n        case 'ollama': return 'Ollama (lokal)';\r\n        case 'openai': return 'OpenAI';\r\n        case 'anthropic': return 'Anthropic Claude';\r\n        default: return provider;\r\n    }\r\n}\r\n\r\n/**\r\n * Gibt ein Icon für den Provider zurück\r\n * @param {string} provider Provider-ID\r\n * @returns {vscode.ThemeIcon} Icon für den Provider\r\n */\r\nfunction getProviderIcon(provider) {\r\n    switch (provider) {\r\n        case 'ollama': return new vscode.ThemeIcon('server');\r\n        case 'openai': return new vscode.ThemeIcon('rocket');\r\n        case 'anthropic': return new vscode.ThemeIcon('beaker');\r\n        default: return new vscode.ThemeIcon('symbol-misc');\r\n    }\r\n}\r\n\r\nfunction getOpenAIModelOptions() {\r\n    return [\r\n        { label: 'GPT-4o', value: 'gpt-4o' },\r\n        { label: 'GPT-4o Mini', value: 'gpt-4o-mini' },\r\n        { label: 'GPT-4', value: 'gpt-4' },\r\n        { label: 'GPT-4 Turbo', value: 'gpt-4-turbo' },\r\n        { label: 'GPT-4 (Januar 2025)', value: 'gpt-4-0125-preview' },\r\n        { label: 'GPT-4 (November 2023)', value: 'gpt-4-1106-preview' },\r\n        { label: 'GPT-4 Vision Preview', value: 'gpt-4-vision-preview' },\r\n        { label: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' },\r\n        { label: 'GPT-3.5 Turbo (Januar 2024)', value: 'gpt-3.5-turbo-0125' },\r\n        { label: 'GPT-3.5 Turbo (November 2023)', value: 'gpt-3.5-turbo-1106' }\r\n    ];\r\n}\r\n\r\n/**\r\n * Gibt ein lesbares Label für den Staging-Modus zurück\r\n * @param {string} mode Der Staging-Modus\r\n * @returns {string} Lesbares Label\r\n */\r\nfunction getStageModeLabel(mode) {\r\n    switch (mode) {\r\n        case 'all': return 'Alle Dateien stagen';\r\n        case 'specific': return 'Spezifische Dateien stagen';\r\n        case 'prompt': return 'Nachfragen';\r\n        default: return mode;\r\n    }\r\n}\r\n\r\n/**\r\n * Gibt ein lesbares Label für das Theme zurück\r\n * @param {string} theme Das Theme\r\n * @returns {string} Lesbares Label\r\n */\r\nfunction getThemeLabel(theme) {\r\n    switch (theme) {\r\n        case 'light': return 'Hell';\r\n        case 'dark': return 'Dunkel';\r\n        case 'auto': return 'Automatisch';\r\n        default: return theme;\r\n    }\r\n}\r\n\r\n/**\r\n * Gibt eine lesbare Beschreibung für den Git-Status-Code zurück\r\n * @param {string} statusCode Der Git-Status-Code\r\n * @returns {string} Lesbare Beschreibung des Status\r\n */\r\nfunction getStatusDescription(statusCode) {\r\n    const firstChar = statusCode.charAt(0);\r\n    const secondChar = statusCode.charAt(1);\r\n    \r\n    let description = '';\r\n    \r\n    // Index-Status (erster Buchstabe)\r\n    if (firstChar === 'M') description = 'Modifiziert im Index';\r\n    else if (firstChar === 'A') description = 'Zum Index hinzugefügt';\r\n    else if (firstChar === 'D') description = 'Aus Index gelöscht';\r\n    else if (firstChar === 'R') description = 'Im Index umbenannt';\r\n    else if (firstChar === 'C') description = 'Im Index kopiert';\r\n    else if (firstChar === 'U') description = 'Ungemerged im Index';\r\n    \r\n    // Working Directory Status (zweiter Buchstabe)\r\n    if (secondChar === 'M') {\r\n        if (description) description += ', modifiziert im Arbeitsverzeichnis';\r\n        else description = 'Modifiziert im Arbeitsverzeichnis';\r\n    } else if (secondChar === 'D') {\r\n        if (description) description += ', gelöscht im Arbeitsverzeichnis';\r\n        else description = 'Gelöscht im Arbeitsverzeichnis';\r\n    }\r\n    \r\n    // Untracked files\r\n    if (statusCode === '??') description = 'Nicht verfolgte Datei';\r\n    \r\n    return description || statusCode;\r\n}\r\n\r\n/**\r\n * Registriert alle UI-Komponenten\r\n * @param {vscode.ExtensionContext} context \r\n * @returns {Object} Die Provider-Instanzen\r\n */\r\nfunction registerUI(context) {\r\n    // Status-Ansicht\r\n    const statusProvider = new StatusViewProvider(context);\r\n    const statusTreeView = vscode.window.createTreeView('comitto-status', {\r\n        treeDataProvider: statusProvider,\r\n        showCollapseAll: false\r\n    });\r\n    context.subscriptions.push(statusTreeView);\r\n\r\n    // Schnellaktionen-Ansicht\r\n    const quickActionsProvider = new QuickActionsViewProvider(context);\r\n    const quickActionsTreeView = vscode.window.createTreeView('comitto-quick-actions', {\r\n        treeDataProvider: quickActionsProvider,\r\n        showCollapseAll: false\r\n    });\r\n    context.subscriptions.push(quickActionsTreeView);\r\n\r\n    // Einstellungs-Ansicht\r\n    const settingsProvider = new SettingsViewProvider(context);\r\n    const settingsTreeView = vscode.window.createTreeView('comitto-settings', {\r\n        treeDataProvider: settingsProvider,\r\n        showCollapseAll: true\r\n    });\r\n    context.subscriptions.push(settingsTreeView);\r\n\r\n    // Nach kurzer Verzögerung Refresh ausführen, um sicherzustellen, dass die UI aktualisiert wird\r\n    setTimeout(() => {\r\n        statusProvider.refresh();\r\n        quickActionsProvider.refresh();\r\n        settingsProvider.refresh();\r\n    }, 500);\r\n\r\n    // Registriere einen Event-Handler, der die Seitenleiste sichtbar macht\r\n    context.subscriptions.push(vscode.extensions.onDidChange(() => {\r\n        // Setze den Kontext, dass ein Git-Repository vorhanden ist\r\n        vscode.commands.executeCommand('setContext', 'workspaceHasGit', true);\r\n    }));\r\n\r\n    return {\r\n        statusProvider,\r\n        quickActionsProvider,\r\n        settingsProvider,\r\n        statusTreeView,\r\n        settingsTreeView,\r\n        quickActionsTreeView\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    registerUI,\r\n    StatusViewProvider,\r\n    QuickActionsViewProvider,\r\n    SettingsViewProvider,\r\n    getProviderDisplayName,\r\n    getProviderIcon,\r\n    getOpenAIModelOptions,\r\n    getStageModeLabel,\r\n    getThemeLabel,\r\n    getStatusDescription\r\n}; "],"names":["exec","require","module","exports","executeGitCommand","command","cwd","Promise","resolve","reject","error","stdout","stderr","errorMessage","message","console","concat","Error","getStatusText","statusCode","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","toPrimitive","String","_toPrimitive","vscode","StatusViewProvider","context","this","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","_context","fire","element","_getChildren","_callee","items","statusGroup","configGroup","actionGroup","_getSubItems","workspace","getConfiguration","get","TreeItem","TreeItemCollapsibleState","Expanded","contextValue","iconPath","ThemeIcon","collapsibleState","_x","_getSubItems2","_callee2","config","enabled","statusItem","simpleUIItem","dashboardItem","provider","providerItem","gitSettings","commitLanguage","autoPushStatus","stageMode","gitItem","rules","triggerDescription","activeTriggers","rulesItem","manualCommitItem","stageAllItem","stageSelectedItem","_context2","t0","None","tooltip","title","getProviderDisplayName","getProviderIcon","commitMessageLanguage","autoPush","branch","commitMessageStyle","fileCountThreshold","minChangeCount","onSave","onInterval","intervalMinutes","onBranchSwitch","join","timeThresholdMinutes","_x2","SettingsViewProvider","_getChildren2","_callee3","aiItem","triggerItem","promptItem","uiItem","notificationItem","_context3","_getSubSettings","Collapsed","_x3","_getSubSettings2","_callee4","aiProvider","ollamaEndpoint","ollamaEndpointItem","ollamaModel","ollamaModelItem","openaiModel","openaiModelItem","hasKey","openaiKeyItem","anthropicModel","anthropicModelItem","_hasKey","anthropicKeyItem","fileCountItem","changeCountItem","timeItem","onSaveItem","onIntervalItem","onBranchItem","filePatternsText","filePatternsItem","languageItem","autoPushItem","branchItem","styleItem","stageModeItem","patternsText","stagingPatternsItem","useGitignore","gitignoreItem","uiSettings","simpleModeItem","confirmItem","notifyItem","themeItem","notifications","onCommitItem","onPushItem","onErrorItem","onTriggerItem","_context4","filePatterns","substring","specificStagingPatterns","undefined","simpleMode","confirmBeforeCommit","showNotifications","getThemeLabel","theme","onCommit","onPush","onError","onTriggerFired","_x4","QuickActionsViewProvider","_getChildren3","_callee5","commitGroup","gitGroup","_context5","_getSubActions","_x5","_getSubActions2","_callee6","toggleItem","gitSettingsItem","configAIItem","configTriggersItem","_context6","_x6","registerUI","statusProvider","statusTreeView","window","createTreeView","treeDataProvider","showCollapseAll","subscriptions","quickActionsProvider","quickActionsTreeView","settingsProvider","settingsTreeView","setTimeout","refresh","extensions","onDidChange","commands","executeCommand","getOpenAIModelOptions","label","getStageModeLabel","mode","getStatusDescription","firstChar","secondChar","description"],"sourceRoot":""}